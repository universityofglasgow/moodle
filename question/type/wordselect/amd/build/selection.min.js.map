{"version":3,"file":"selection.min.js","sources":["../src/selection.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * JavaScript code for the wordselect question type.\n *\n * @copyright  2016 Marcus Green\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/* global $ */\ndefine(function() {\n  /**\n   * Initialise the quesiton instance with a unique id\n   * Necessary where there is more than one of this\n   * type of question per page.\n   * @param {int} questionId\n   */\n  function WordSelectQuestion(questionId) {\n    $('#' + questionId + ' .selectable').on('keydown', function(e) {\n      /* Space bar */\n      if (e.keyCode === 32) {\n        toggleSelection($(this));\n        return false;\n      }\n      /* Eat the keycode so it doesnt scroll the screen down */\n      if (e.keyCode === 32) {\n        return false;\n      }\n      return true;\n    });\n    $('#' + questionId + ' .selectable').on('click', function() {\n      toggleSelection($(this));\n    });\n  }\n\n  /**\n   * Toggle a word (or collection of word)\n   * As selected/unselected.\n   * @param {string} selection\n   */\n  function toggleSelection(selection) {\n    var iselected = $(selection).hasClass('selected');\n    var wordname = selection.attr('name');\n    var hidden = document.getElementById(wordname);\n    if (hidden === null || hidden.disabled === true) {\n      return;\n    }\n    if (iselected === true) {\n      selection.removeClass('selected');\n      selection.removeAttr('title');\n      selection.attr('aria-checked', 'false');\n      /* Convert type to text, because\n      * unchecked textboxes would not\n      * be included in the response\n      */\n      hidden.type = 'text';\n      hidden.style.visibility = 'hidden';\n      hidden.style.display = 'none';\n      hidden.value = '';\n    } else {\n      selection.addClass('selected');\n      selection.prop('title', 'selected');\n      selection.attr('aria-checked', 'true');\n      hidden.type = 'checkbox';\n      hidden.value = 'on';\n      hidden.checked = 'true';\n    }\n  }\n\n  return {\n    init: function(questionId) {\n      new WordSelectQuestion(questionId);\n    },\n  };\n});\n"],"names":["define","WordSelectQuestion","questionId","$","on","e","keyCode","toggleSelection","this","selection","iselected","hasClass","wordname","attr","hidden","document","getElementById","disabled","removeClass","removeAttr","type","style","visibility","display","value","addClass","prop","checked","init"],"mappings":";;;;;;AAuBAA,qCAAO,oBAOIC,mBAAmBC,YAC1BC,EAAE,IAAMD,WAAa,gBAAgBE,GAAG,WAAW,SAASC,UAExC,KAAdA,EAAEC,SACJC,gBAAgBJ,EAAEK,QACX,GAGS,KAAdH,EAAEC,WAKRH,EAAE,IAAMD,WAAa,gBAAgBE,GAAG,SAAS,WAC/CG,gBAAgBJ,EAAEK,mBASbD,gBAAgBE,eACnBC,UAAYP,EAAEM,WAAWE,SAAS,YAClCC,SAAWH,UAAUI,KAAK,QAC1BC,OAASC,SAASC,eAAeJ,UACtB,OAAXE,SAAuC,IAApBA,OAAOG,YAGZ,IAAdP,WACFD,UAAUS,YAAY,YACtBT,UAAUU,WAAW,SACrBV,UAAUI,KAAK,eAAgB,SAK/BC,OAAOM,KAAO,OACdN,OAAOO,MAAMC,WAAa,SAC1BR,OAAOO,MAAME,QAAU,OACvBT,OAAOU,MAAQ,KAEff,UAAUgB,SAAS,YACnBhB,UAAUiB,KAAK,QAAS,YACxBjB,UAAUI,KAAK,eAAgB,QAC/BC,OAAOM,KAAO,WACdN,OAAOU,MAAQ,KACfV,OAAOa,QAAU,eAId,CACLC,KAAM,SAAS1B,gBACTD,mBAAmBC"}