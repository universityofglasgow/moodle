{"version":3,"file":"datafilter.min.js","sources":["../src/datafilter.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Data filter management.\n *\n * @module     core/datafilter\n * @copyright  2020 Andrew Nicols <andrew@nicols.co.uk>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport CourseFilter from 'core/datafilter/filtertypes/courseid';\nimport GenericFilter from 'core/datafilter/filtertype';\nimport {get_strings as getStrings} from 'core/str';\nimport Notification from 'core/notification';\nimport Pending from 'core/pending';\nimport Selectors from 'core/datafilter/selectors';\nimport Templates from 'core/templates';\nimport CustomEvents from 'core/custom_interaction_events';\nimport jQuery from 'jquery';\n\nexport default class {\n\n    /**\n     * Initialise the filter on the element with the given filterSet and callback.\n     *\n     * @param {HTMLElement} filterSet The filter element.\n     * @param {Function} applyCallback Callback function when updateTableFromFilter\n     */\n    constructor(filterSet, applyCallback) {\n\n        this.filterSet = filterSet;\n        this.applyCallback = applyCallback;\n        // Keep a reference to all of the active filters.\n        this.activeFilters = {\n            courseid: new CourseFilter('courseid', filterSet),\n        };\n    }\n\n    /**\n     * Initialise event listeners to the filter.\n     */\n    init() {\n        // Add listeners for the main actions.\n        this.filterSet.querySelector(Selectors.filterset.region).addEventListener('click', e => {\n            if (e.target.closest(Selectors.filterset.actions.addRow)) {\n                e.preventDefault();\n\n                this.addFilterRow();\n            }\n\n            if (e.target.closest(Selectors.filterset.actions.applyFilters)) {\n                e.preventDefault();\n\n                this.updateTableFromFilter();\n            }\n\n            if (e.target.closest(Selectors.filterset.actions.resetFilters)) {\n                e.preventDefault();\n\n                this.removeAllFilters();\n            }\n        });\n\n        // Add the listener to remove a single filter.\n        this.filterSet.querySelector(Selectors.filterset.regions.filterlist).addEventListener('click', e => {\n            if (e.target.closest(Selectors.filter.actions.remove)) {\n                e.preventDefault();\n\n                this.removeOrReplaceFilterRow(e.target.closest(Selectors.filter.region), true);\n            }\n        });\n\n        // Add listeners for the filter type selection.\n        let filterRegion = jQuery(this.getFilterRegion());\n        CustomEvents.define(filterRegion, [CustomEvents.events.accessibleChange]);\n        filterRegion.on(CustomEvents.events.accessibleChange, e => {\n            const typeField = e.target.closest(Selectors.filter.fields.type);\n            if (typeField && typeField.value) {\n                const filter = e.target.closest(Selectors.filter.region);\n\n                this.addFilter(filter, typeField.value);\n            }\n        });\n\n        this.filterSet.querySelector(Selectors.filterset.fields.join).addEventListener('change', e => {\n            this.filterSet.dataset.filterverb = e.target.value;\n        });\n    }\n\n    /**\n     * Get the filter list region.\n     *\n     * @return {HTMLElement}\n     */\n    getFilterRegion() {\n        return this.filterSet.querySelector(Selectors.filterset.regions.filterlist);\n    }\n\n    /**\n     * Add an unselected filter row.\n     *\n     * @return {Promise}\n     */\n    addFilterRow() {\n        const pendingPromise = new Pending('core/datafilter:addFilterRow');\n        const rownum = 1 + this.getFilterRegion().querySelectorAll(Selectors.filter.region).length;\n        return Templates.renderForPromise('core/datafilter/filter_row', {\"rownumber\": rownum})\n            .then(({html, js}) => {\n                const newContentNodes = Templates.appendNodeContents(this.getFilterRegion(), html, js);\n\n                return newContentNodes;\n            })\n            .then(filterRow => {\n                // Note: This is a nasty hack.\n                // We should try to find a better way of doing this.\n                // We do not have the list of types in a readily consumable format, so we take the pre-rendered one and copy\n                // it in place.\n                const typeList = this.filterSet.querySelector(Selectors.data.typeList);\n\n                filterRow.forEach(contentNode => {\n                    const contentTypeList = contentNode.querySelector(Selectors.filter.fields.type);\n\n                    if (contentTypeList) {\n                        contentTypeList.innerHTML = typeList.innerHTML;\n                    }\n                });\n\n                return filterRow;\n            })\n            .then(filterRow => {\n                this.updateFiltersOptions();\n\n                return filterRow;\n            })\n            .then(result => {\n                pendingPromise.resolve();\n\n                return result;\n            })\n            .catch(Notification.exception);\n    }\n\n    /**\n     * Get the filter data source node fro the specified filter type.\n     *\n     * @param {String} filterType\n     * @return {HTMLElement}\n     */\n    getFilterDataSource(filterType) {\n        const filterDataNode = this.filterSet.querySelector(Selectors.filterset.regions.datasource);\n\n        return filterDataNode.querySelector(Selectors.data.fields.byName(filterType));\n    }\n\n    /**\n     * Add a filter to the list of active filters, performing any necessary setup.\n     *\n     * @param {HTMLElement} filterRow\n     * @param {String} filterType\n     * @param {Array} initialFilterValues The initially selected values for the filter\n     * @returns {Filter}\n     */\n    async addFilter(filterRow, filterType, initialFilterValues) {\n        // Name the filter on the filter row.\n        filterRow.dataset.filterType = filterType;\n\n        const filterDataNode = this.getFilterDataSource(filterType);\n\n        // Instantiate the Filter class.\n        let Filter = GenericFilter;\n        if (filterDataNode.dataset.filterTypeClass) {\n            Filter = await import(filterDataNode.dataset.filterTypeClass);\n        }\n        this.activeFilters[filterType] = new Filter(filterType, this.filterSet, initialFilterValues);\n\n        // Disable the select.\n        const typeField = filterRow.querySelector(Selectors.filter.fields.type);\n        typeField.value = filterType;\n        typeField.disabled = 'disabled';\n\n        // Update the list of available filter types.\n        this.updateFiltersOptions();\n\n        return this.activeFilters[filterType];\n    }\n\n    /**\n     * Get the registered filter class for the named filter.\n     *\n     * @param {String} name\n     * @return {Object} See the Filter class.\n     */\n    getFilterObject(name) {\n        return this.activeFilters[name];\n    }\n\n    /**\n     * Remove or replace the specified filter row and associated class, ensuring that if there is only one filter row,\n     * that it is replaced instead of being removed.\n     *\n     * @param {HTMLElement} filterRow\n     * @param {Bool} refreshContent Whether to refresh the table content when removing\n     */\n    removeOrReplaceFilterRow(filterRow, refreshContent) {\n        const filterCount = this.getFilterRegion().querySelectorAll(Selectors.filter.region).length;\n        if (filterCount === 1) {\n            this.replaceFilterRow(filterRow, refreshContent);\n        } else {\n            this.removeFilterRow(filterRow, refreshContent);\n        }\n    }\n\n    /**\n     * Remove the specified filter row and associated class.\n     *\n     * @param {HTMLElement} filterRow\n     * @param {Bool} refreshContent Whether to refresh the table content when removing\n     */\n    async removeFilterRow(filterRow, refreshContent = true) {\n        const filterType = filterRow.querySelector(Selectors.filter.fields.type);\n        const hasFilterValue = !!filterType.value;\n\n        // Remove the filter object.\n        this.removeFilterObject(filterRow.dataset.filterType);\n\n        // Remove the actual filter HTML.\n        filterRow.remove();\n\n        // Update the list of available filter types.\n        this.updateFiltersOptions();\n\n        if (hasFilterValue && refreshContent) {\n            // Refresh the table if there was any content in this row.\n            this.updateTableFromFilter();\n        }\n\n        // Update filter fieldset legends.\n        const filterLegends = await this.getAvailableFilterLegends();\n\n        this.getFilterRegion().querySelectorAll(Selectors.filter.region).forEach((filterRow, index) => {\n            filterRow.querySelector('legend').innerText = filterLegends[index];\n        });\n\n    }\n\n    /**\n     * Replace the specified filter row with a new one.\n     *\n     * @param {HTMLElement} filterRow\n     * @param {Bool} refreshContent Whether to refresh the table content when removing\n     * @param {Number} rowNum The number used to label the filter fieldset legend (eg Row 1). Defaults to 1 (the first filter).\n     * @return {Promise}\n     */\n    replaceFilterRow(filterRow, refreshContent = true, rowNum = 1) {\n        // Remove the filter object.\n        this.removeFilterObject(filterRow.dataset.filterType);\n\n        return Templates.renderForPromise('core/datafilter/filter_row', {\"rownumber\": rowNum})\n            .then(({html, js}) => {\n                const newContentNodes = Templates.replaceNode(filterRow, html, js);\n\n                return newContentNodes;\n            })\n            .then(filterRow => {\n                // Note: This is a nasty hack.\n                // We should try to find a better way of doing this.\n                // We do not have the list of types in a readily consumable format, so we take the pre-rendered one and copy\n                // it in place.\n                const typeList = this.filterSet.querySelector(Selectors.data.typeList);\n\n                filterRow.forEach(contentNode => {\n                    const contentTypeList = contentNode.querySelector(Selectors.filter.fields.type);\n\n                    if (contentTypeList) {\n                        contentTypeList.innerHTML = typeList.innerHTML;\n                    }\n                });\n\n                return filterRow;\n            })\n            .then(filterRow => {\n                this.updateFiltersOptions();\n\n                return filterRow;\n            })\n            .then(filterRow => {\n                // Refresh the table.\n                if (refreshContent) {\n                    return this.updateTableFromFilter();\n                } else {\n                    return filterRow;\n                }\n            })\n            .catch(Notification.exception);\n    }\n\n    /**\n     * Remove the Filter Object from the register.\n     *\n     * @param {string} filterName The name of the filter to be removed\n     */\n    removeFilterObject(filterName) {\n        if (filterName) {\n            const filter = this.getFilterObject(filterName);\n            if (filter) {\n                filter.tearDown();\n\n                // Remove from the list of active filters.\n                delete this.activeFilters[filterName];\n            }\n        }\n    }\n\n    /**\n     * Remove all filters.\n     *\n     * @returns {Promise}\n     */\n    removeAllFilters() {\n        const filters = this.getFilterRegion().querySelectorAll(Selectors.filter.region);\n        filters.forEach(filterRow => this.removeOrReplaceFilterRow(filterRow, false));\n\n        // Refresh the table.\n        return this.updateTableFromFilter();\n    }\n\n    /**\n     * Remove any empty filters.\n     */\n    removeEmptyFilters() {\n        const filters = this.getFilterRegion().querySelectorAll(Selectors.filter.region);\n        filters.forEach(filterRow => {\n            const filterType = filterRow.querySelector(Selectors.filter.fields.type);\n            if (!filterType.value) {\n                this.removeOrReplaceFilterRow(filterRow, false);\n            }\n        });\n    }\n\n    /**\n     * Update the list of filter types to filter out those already selected.\n     */\n    updateFiltersOptions() {\n        const filters = this.getFilterRegion().querySelectorAll(Selectors.filter.region);\n        filters.forEach(filterRow => {\n            const options = filterRow.querySelectorAll(Selectors.filter.fields.type + ' option');\n            options.forEach(option => {\n                if (option.value === filterRow.dataset.filterType) {\n                    option.classList.remove('hidden');\n                    option.disabled = false;\n                } else if (this.activeFilters[option.value]) {\n                    option.classList.add('hidden');\n                    option.disabled = true;\n                } else {\n                    option.classList.remove('hidden');\n                    option.disabled = false;\n                }\n            });\n        });\n\n        // Configure the state of the \"Add row\" button.\n        // This button is disabled when there is a filter row available for each condition.\n        const addRowButton = this.filterSet.querySelector(Selectors.filterset.actions.addRow);\n        const filterDataNode = this.filterSet.querySelectorAll(Selectors.data.fields.all);\n        if (filterDataNode.length <= filters.length) {\n            addRowButton.setAttribute('disabled', 'disabled');\n        } else {\n            addRowButton.removeAttribute('disabled');\n        }\n\n        if (filters.length === 1) {\n            this.filterSet.querySelector(Selectors.filterset.regions.filtermatch).classList.add('hidden');\n            this.filterSet.querySelector(Selectors.filterset.fields.join).value = 2;\n            this.filterSet.dataset.filterverb = 2;\n        } else {\n            this.filterSet.querySelector(Selectors.filterset.regions.filtermatch).classList.remove('hidden');\n        }\n    }\n\n    /**\n     * Update the Dynamic table based upon the current filter.\n     */\n    updateTableFromFilter() {\n        const pendingPromise = new Pending('core/datafilter:updateTableFromFilter');\n\n        const filters = {};\n        Object.values(this.activeFilters).forEach(filter => {\n            filters[filter.filterValue.name] = filter.filterValue;\n        });\n\n        if (this.applyCallback) {\n            this.applyCallback(filters, pendingPromise);\n        }\n    }\n\n    /**\n     * Fetch the strings used to populate the fieldset legends for the maximum number of filters possible.\n     *\n     * @return {array}\n     */\n    async getAvailableFilterLegends() {\n        const maxFilters = document.querySelector(Selectors.data.typeListSelect).length - 1;\n        let requests = [];\n\n        [...Array(maxFilters)].forEach((_, rowIndex) => {\n            requests.push({\n                \"key\": \"filterrowlegend\",\n                \"component\": \"core\",\n                // Add 1 since rows begin at 1 (index begins at zero).\n                \"param\": rowIndex + 1\n            });\n        });\n\n        const legendStrings = await getStrings(requests)\n            .then(fetchedStrings => {\n                return fetchedStrings;\n            })\n            .catch(Notification.exception);\n\n        return legendStrings;\n    }\n\n}\n"],"names":["_courseid","_interopRequireDefault","_filtertype","_notification","_pending","_selectors","_templates","_custom_interaction_events","_jquery","_systemImportTransformerGlobalIdentifier","window","self","global","obj","__esModule","default","_exports","constructor","filterSet","applyCallback","this","activeFilters","courseid","CourseFilter","init","querySelector","Selectors","filterset","region","addEventListener","e","target","closest","actions","addRow","preventDefault","addFilterRow","applyFilters","updateTableFromFilter","resetFilters","removeAllFilters","regions","filterlist","filter","remove","removeOrReplaceFilterRow","filterRegion","jQuery","getFilterRegion","CustomEvents","define","events","accessibleChange","on","typeField","fields","type","value","addFilter","join","dataset","filterverb","pendingPromise","Pending","rownum","querySelectorAll","length","Templates","renderForPromise","rownumber","then","_ref","html","js","appendNodeContents","filterRow","typeList","data","forEach","contentNode","contentTypeList","innerHTML","updateFiltersOptions","result","resolve","catch","Notification","exception","getFilterDataSource","filterType","datasource","byName","async","initialFilterValues","filterDataNode","Filter","GenericFilter","filterTypeClass","amd","Promise","reject","require","module","exports","component","loader","disabled","getFilterObject","name","refreshContent","replaceFilterRow","removeFilterRow","arguments","undefined","hasFilterValue","removeFilterObject","filterLegends","getAvailableFilterLegends","index","innerText","rowNum","_ref2","replaceNode","filterName","tearDown","removeEmptyFilters","filters","option","classList","add","addRowButton","all","setAttribute","removeAttribute","filtermatch","Object","values","filterValue","maxFilters","document","typeListSelect","requests","Array","_","rowIndex","push","key","param","getStrings","get_strings","fetchedStrings"],"mappings":"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"}