{"version":3,"file":"js/logout.js","mappings":"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","sources":["webpack://simplesamlphp-assets/./resources/js/logout/logout.js","webpack://simplesamlphp-assets/./resources/js/logout/main.js"],"sourcesContent":["'use strict';\n\n/**\n * This class is used for the logout page.\n *\n * It allows the user to start logout from all the services where a session exists (if any). Logout will be\n * triggered by loading an iframe where we send a SAML logout request to the SingleLogoutService endpoint of the\n * given SP. After successful response back from the SP, we will load a small template in the iframe that loads\n * this class again (IFrameLogoutHandler branch of the constructor), and sends a message to the main page\n * (core:logout-iframe branch).\n *\n * The iframes communicate the logout status for their corresponding association via an event message, for which the\n * main page is listening (the clearAssociation() method). Upon reception of a message, we'll check if there was an\n * error or not, and call the appropriate method (either completed() or failed()).\n */\nclass SimpleSAMLLogout {\n    constructor(page)\n    {\n        if (page === 'core:logout-iframe') { // main page\n            this.populateData();\n            if (Object.keys(this.sps).length === 0) {\n                // all SPs completed logout, this was a reload\n                this.btncontinue.click();\n            }\n            this.btnall.addEventListener(\"click\", this.initLogout.bind(this));\n            window.addEventListener('message', this.clearAssociation.bind(this), false);\n        } else if (page === 'IFrameLogoutHandler') { // iframe\n            var data = document.querySelector('i[id=\"data\"]');\n            var message = {\n                spId: data.getAttribute('data-spid')\n            };\n            if (data.hasAttribute('data-error')) {\n                message.error = data.getAttribute('data-error');\n            }\n\n            window.parent.postMessage(JSON.stringify(message), SimpleSAMLLogout.getOrigin());\n        }\n    }\n\n\n    /**\n     * Clear an association when it is signaled from an iframe (either failed or completed).\n     *\n     * @param event The event containing the message from the iframe.\n     */\n    clearAssociation(event)\n    {\n        if (event.origin !== SimpleSAMLLogout.getOrigin()) {\n            // we don't accept events from other origins\n            return;\n        }\n        var data = JSON.parse(event.data);\n        if (typeof data.error === 'undefined') {\n            this.completed(data.spId);\n        } else {\n            this.failed(data.spId, data.error);\n        }\n\n        if (Object.keys(this.sps).length === 0) {\n            if (this.nfailed === 0) {\n                // all SPs successfully logged out, continue w/o user interaction\n                this.btncontinue.click();\n            }\n        }\n    }\n\n\n    /**\n     * Mark logout as completed for a given SP.\n     *\n     * This method will be called by the SimpleSAML\\IdP\\IFrameLogoutHandler class upon successful logout from the SP.\n     *\n     * @param id The ID of the SP that completed logout successfully.\n     */\n    completed(id)\n    {\n        if (typeof this.sps[id] === 'undefined') {\n            return;\n        }\n\n        this.sps[id].icon.classList.remove('fa-spin');\n        this.sps[id].icon.classList.remove('fa-circle-o-notch');\n        this.sps[id].icon.classList.add('fa-check-circle');\n        this.sps[id].element.style.display = \"none\";\n        delete this.sps[id];\n        this.finish();\n    }\n\n\n    /**\n     * Mark logout as failed for a given SP.\n     *\n     * This method will be called by the SimpleSAML\\IdP\\IFrameLogoutHandler class upon logout failure from the SP.\n     *\n     * @param id The ID of the SP that failed to complete logout.\n     * @param reason The reason why logout failed.\n     */\n    failed(id, reason)\n    {\n        if (typeof this.sps[id] === 'undefined') {\n            return;\n        }\n\n        this.sps[id].element.classList.add('error');\n        this.sps[id].icon.classList.remove('fa-spin', 'fa-circle-o-notch');\n        this.sps[id].icon.classList.add('fa-exclamation-circle');\n\n        this.errmsg.classList.remove('hidden');\n        this.errfrm.classList.remove('hidden');\n\n        delete this.sps[id];\n        this.nfailed++;\n        this.finish();\n    }\n\n\n    /**\n     * Finish the logout process, acting according to the current situation:\n     *\n     * - If there were failures, an error message is shown telling the user to close the browser.\n     * - If everything went ok, then we just continue back to the service that started logout.\n     *\n     * Note: this method won't do anything if there are SPs pending logout (e.g. waiting for the timeout).\n     */\n    finish()\n    {\n        if (Object.keys(this.sps).length > 0) { // pending services\n            return;\n        }\n\n        if (typeof this.timeout !== 'undefined') {\n            clearTimeout(this.timeout);\n        }\n\n        if (this.nfailed > 0) { // some services failed to log out\n            this.errmsg.classList.remove('hidden');\n            this.errfrm.classList.remove('hidden');\n            this.actions.classList.add('hidden');\n        } else { // all services done\n            this.btncontinue.click();\n        }\n    }\n\n\n    /**\n     * Get the origin of the current page.\n     */\n    static getOrigin()\n    {\n        var origin = window.location.origin;\n        if (!origin) {\n            // IE < 11 does not support window.location.origin\n            origin = window.location.protocol + \"//\" + window.location.hostname +\n                (window.location.port ? ':' + window.location.port : '');\n        }\n        return origin;\n    }\n\n\n    /**\n     * This method starts logout on all SPs where we are currently logged in.\n     *\n     * @param event The click event on the \"Yes, all services\" button.\n     */\n    initLogout(event)\n    {\n        event.preventDefault();\n\n        this.btnall.disabled = true;\n        this.btncancel.disabled = true;\n        Object.keys(this.sps).forEach((function (id) {\n            this.sps[id].status = 'inprogress';\n            this.sps[id].startTime = (new Date()).getTime();\n            this.sps[id].iframe.setAttribute('src', this.sps[id].iframe.getAttribute('data-url'));\n            this.sps[id].icon.classList.add('fa-spin');\n        }).bind(this));\n        this.initTimeout();\n    }\n\n\n    /**\n     * Set timeouts for all logout operations.\n     *\n     * If an SP didn't reply by the timeout, we'll mark it as failed.\n     */\n    initTimeout()\n    {\n        var timeout = 10;\n\n        for (const id in this.sps) {\n            if (typeof id === 'undefined') {\n                continue;\n            }\n            if (!this.sps.hasOwnProperty(id)) {\n                continue;\n            }\n            if (this.sps[id].status !== 'inprogress') {\n                continue;\n            }\n            var now = ((new Date()).getTime() - this.sps[id].startTime) / 1000;\n\n            if (this.sps[id].timeout <= now) {\n                this.failed(id, 'Timed out', window.document);\n            } else {\n                // get the lowest timeout we have\n                if ((this.sps[id].timeout - now) < timeout) {\n                    timeout = this.sps[id].timeout - now;\n                }\n            }\n        }\n\n        if (Object.keys(this.sps).length > 0) {\n            // we have associations left, check them again as soon as one expires\n            this.timeout = setTimeout(this.initTimeout.bind(this), timeout * 1000);\n        } else {\n            this.finish();\n        }\n    }\n\n\n    /**\n     * This method populates the data we need from data-* properties in the page.\n     */\n    populateData()\n    {\n        this.sps = {};\n        this.btnall = document.querySelector('button[id=\"btn-all\"]');\n        this.btncancel = document.querySelector('button[id=\"btn-cancel\"]');\n        this.btncontinue = document.querySelector('button[id=\"btn-continue\"]');\n        this.actions = document.querySelector('div[id=\"original-actions\"]');\n        this.errmsg = document.querySelector('div[id=\"error-message\"]');\n        this.errfrm = document.querySelector('form[id=\"error-form\"]');\n        this.nfailed = 0;\n        var that = this;\n\n        // initialise SP status and timeout arrays\n        document.querySelectorAll('li[id^=\"sp-\"]').forEach(function (currentValue, index, arr) {\n            var id = currentValue.getAttribute('data-id');\n            var iframe = document.querySelector('iframe[id=\"iframe-' + id + '\"]');\n            var status = currentValue.getAttribute('data-status');\n\n            switch (status) {\n                case 'failed':\n                    that.nfailed++;\n                case 'completed':\n                    return;\n            }\n\n            that.sps[id] = {\n                status: status,\n                timeout: currentValue.getAttribute('data-timeout'),\n                element: currentValue,\n                iframe: iframe,\n                icon: document.querySelector('i[id=\"icon-' + id + '\"]'),\n            };\n        });\n    }\n}\n\nexport default SimpleSAMLLogout;\n","'use strict';\n\nimport SimpleSAMLLogout from './logout.js';\n\nready(function () {\n    new SimpleSAMLLogout(document.body.id);\n});\n"],"names":["page","this","populateData","Object","keys","sps","length","btncontinue","click","btnall","addEventListener","initLogout","bind","window","clearAssociation","data","document","querySelector","message","spId","getAttribute","hasAttribute","error","parent","postMessage","JSON","stringify","SimpleSAMLLogout","getOrigin","origin","location","protocol","hostname","port","event","parse","completed","failed","nfailed","id","icon","classList","remove","add","element","style","display","finish","reason","errmsg","errfrm","timeout","clearTimeout","actions","preventDefault","disabled","btncancel","forEach","status","startTime","Date","getTime","iframe","setAttribute","initTimeout","hasOwnProperty","now","setTimeout","that","querySelectorAll","currentValue","index","arr","ready","body"],"sourceRoot":""}