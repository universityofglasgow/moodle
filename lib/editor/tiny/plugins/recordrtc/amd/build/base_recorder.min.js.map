{"version":3,"file":"base_recorder.min.js","sources":["../src/base_recorder.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n//\n\n/**\n * Tiny Record RTC type.\n *\n * @module      tiny_recordrtc/recording/base\n * @copyright   2022 Stevani Andolo <stevani@hotmail.com.au>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {get_string as getString, get_strings as getStrings} from 'core/str';\nimport {component} from './common';\nimport Pending from 'core/pending';\nimport {getData} from './options';\nimport uploadFile from 'editor_tiny/uploader';\nimport {add as addToast} from 'core/toast';\nimport * as ModalEvents from 'core/modal_events';\nimport * as ModalFactory from 'core/modal_factory';\nimport * as Templates from 'core/templates';\nimport {saveCancelPromise} from 'core/notification';\nimport {prefetchStrings, prefetchTemplates} from 'core/prefetch';\n\n/**\n * The RecordRTC base class for audio, video, and any other future types\n */\nexport default class {\n\n    stopRequested = false;\n\n    /**\n     * Constructor for the RecordRTC class\n     *\n     * @param {TinyMCE} editor The Editor to which the content will be inserted\n     * @param {Modal} modal The Moodle Modal that contains the interface used for recording\n     */\n    constructor(editor, modal) {\n        this.ready = false;\n\n        if (!this.checkAndWarnAboutBrowserCompatibility()) {\n            return;\n        }\n\n        this.editor = editor;\n        this.config = getData(editor).params;\n        this.modal = modal;\n        this.modalRoot = modal.getRoot()[0];\n        this.startStopButton = this.modalRoot.querySelector('button[data-action=\"startstop\"]');\n        this.uploadButton = this.modalRoot.querySelector('button[data-action=\"upload\"]');\n\n        // Disable the record button untilt he stream is acquired.\n        this.setRecordButtonState(false);\n\n        this.player = this.configurePlayer();\n        this.registerEventListeners();\n        this.ready = true;\n\n        this.captureUserMedia();\n        this.prefetchContent();\n    }\n\n    /**\n     * Check whether the browser is compatible.\n     *\n     * @returns {boolean}\n     */\n    isReady() {\n        return this.ready;\n    }\n\n    // Disable eslint's valid-jsdoc rule as the following methods are abstract and mnust be overridden by the child class.\n\n    /* eslint-disable valid-jsdoc, no-unused-vars */\n\n    /**\n     * Get the Player element for this type.\n     *\n     * @returns {HTMLElement} The player element, typically an audio or video tag.\n     */\n    configurePlayer() {\n        throw new Error(`configurePlayer() must be implemented in ${this.constructor.name}`);\n    }\n\n    /**\n     * Get the list of supported mimetypes for this recorder.\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/isTypeSupported}\n     *\n     * @returns {string[]} The list of supported mimetypes.\n     */\n    getSupportedTypes() {\n        throw new Error(`getSupportedTypes() must be implemented in ${this.constructor.name}`);\n    }\n\n    /**\n     * Get any recording options passed into the MediaRecorder.\n     * Please note that the mimeType will be fetched from {@link getSupportedTypes()}.\n     *\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/MediaRecorder#options}\n     * @returns {Object}\n     */\n    getRecordingOptions() {\n        throw new Error(`getRecordingOptions() must be implemented in ${this.constructor.name}`);\n    }\n\n    /**\n     * Get a filename for the generated file.\n     *\n     * Typically this function will take a prefix and add a type-specific suffix such as the extension to it.\n     *\n     * @param {string} prefix The prefix for the filename generated by the recorder.\n     * @returns {string}\n     */\n    getFileName(prefix) {\n        throw new Error(`getFileName() must be implemented in ${this.constructor.name}`);\n    }\n\n    /**\n     * Get a list of constraints as required by the getUserMedia() function.\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia#constraints}\n     *\n     * @returns {Object}\n     */\n    getMediaConstraints() {\n        throw new Error(`getMediaConstraints() must be implemented in ${this.constructor.name}`);\n    }\n\n    /**\n     * Whether to start playing the recording as it is captured.\n     * @returns {boolean} Whether to start playing the recording as it is captured.\n     */\n    playOnCapture() {\n        return false;\n    }\n\n    /**\n     * Get the time limit for this recording type.\n     *\n     * @returns {number} The time limit in seconds.\n     */\n    getTimeLimit() {\n        throw new Error(`getTimeLimit() must be implemented in ${this.constructor.name}`);\n    }\n\n    /**\n     * Get the name of the template used when embedding the URL in the editor content.\n     *\n     * @returns {string}\n     */\n    getEmbedTemplateName() {\n        throw new Error(`getEmbedTemplateName() must be implemented in ${this.constructor.name}`);\n    }\n\n    /**\n     * Fetch the Class of the Modal to be displayed.\n     *\n     * @returns {Modal}\n     */\n    static getModalClass() {\n        throw new Error(`getModalClass() must be implemented in ${this.constructor.name}`);\n    }\n\n    /* eslint-enable valid-jsdoc, no-unused-vars */\n\n    /**\n     * Get the options for the MediaRecorder.\n     *\n     * @returns {object} The options for the MediaRecorder instance.\n     */\n    getParsedRecordingOptions() {\n        const types = this.getSupportedTypes();\n        const options = this.getParsedRecordingOptions();\n        const compatTypes = types.filter((type) => window.MediaRecorder.isTypeSupported(type));\n\n        if (compatTypes.length !== 0) {\n            options.mimeType = compatTypes[0];\n        }\n\n        return options;\n    }\n\n    /**\n     * Start capturing the User Media and handle success or failure of the capture.\n     */\n    async captureUserMedia() {\n        try {\n            const stream = await navigator.mediaDevices.getUserMedia(this.getMediaConstraints());\n            this.handleCaptureSuccess(stream);\n        } catch (error) {\n            this.handleCaptureFailure(error);\n        }\n    }\n\n    /**\n     * Prefetch some of the content that will be used in the UI.\n     *\n     * Note: not all of the strings used are pre-fetched.\n     * Some of the strings will be fetched because their template is used.\n     */\n    prefetchContent() {\n        prefetchStrings(component, [\n            'uploading',\n            'recordagain_title',\n            'recordagain_desc',\n            'discard_title',\n            'discard_desc',\n            'confirm_yes',\n            'recordinguploaded',\n            'maxfilesizehit',\n            'maxfilesizehit_title',\n            'uploadfailed',\n        ]);\n\n        prefetchTemplates([\n            this.getEmbedTemplateName(),\n            'tiny_recordrtc/timeremaining',\n        ]);\n    }\n\n    /**\n     * Display an error message to the user.\n     *\n     * @param {Promise<string>} title The error title\n     * @param {Promise<string>} content The error message\n     * @returns {Promise<Modal>}\n     */\n    async displayAlert(title, content) {\n        const pendingPromise = new Pending('core/confirm:alert');\n        const ModalFactory = await import('core/modal_factory');\n        const modal = await ModalFactory.create({\n            type: ModalFactory.types.ALERT,\n            title: title,\n            body: content,\n            removeOnClose: true,\n        });\n\n        modal.show();\n        pendingPromise.resolve();\n\n        return modal;\n    }\n\n    /**\n     * Handle successful capture of the User Media.\n     *\n     * @param {MediaStream} stream The stream as captured by the User Media.\n     */\n    handleCaptureSuccess(stream) {\n        // Set audio player source to microphone stream.\n        this.player.srcObject = stream;\n\n        if (this.playOnCapture()) {\n            // Mute audio, distracting while recording.\n            this.player.muted = true;\n\n            this.player.play();\n        }\n\n        this.stream = stream;\n        this.setupPlayerSource();\n        this.setRecordButtonState(true);\n    }\n\n    /**\n     * Setup the player to use the stream as a source.\n     */\n    setupPlayerSource() {\n        if (!this.player.srcObject) {\n            this.player.srcObject = this.stream;\n\n            // Mute audio, distracting while recording.\n            this.player.muted = true;\n\n            this.player.play();\n        }\n    }\n\n    /**\n     * Enable the record button.\n     *\n     * @param {boolean|null} enabled Set the button state\n     */\n    setRecordButtonState(enabled) {\n        this.startStopButton.disabled = !enabled;\n    }\n\n    /**\n     * Configure button visibility for the record button.\n     *\n     * @param {boolean} visible Set the visibility of the button.\n     */\n    setRecordButtonVisibility(visible) {\n        const container = this.getButtonContainer('start-stop');\n        container.classList.toggle('hide', !visible);\n    }\n\n    /**\n     * Enable the upload button.\n     *\n     * @param {boolean|null} enabled Set the button state\n     */\n    setUploadButtonState(enabled) {\n        this.uploadButton.disabled = !enabled;\n    }\n\n    /**\n     * Configure button visibility for the upload button.\n     *\n     * @param {boolean} visible Set the visibility of the button.\n     */\n    setUploadButtonVisibility(visible) {\n        const container = this.getButtonContainer('upload');\n        container.classList.toggle('hide', !visible);\n    }\n    /**\n     * Handle failure to capture the User Media.\n     *\n     * @param {Error} error\n     */\n    handleCaptureFailure(error) {\n        // Changes 'CertainError' -> 'gumcertain' to match language string names.\n        var subject = `gum${error.name.replace('Error', '').toLowerCase()}`;\n        this.displayAlert(\n            getString(`${subject}_title`, component),\n            getString(subject, component)\n        );\n    }\n\n    /**\n     * Close the modal and stop recording.\n     */\n    close() {\n        // Closing the modal will destroy it and remove it from the DOM.\n        // It will also stop the recording via the hidden Modal Event.\n        this.modal.hide();\n    }\n\n    /**\n     * Register event listeners for the modal.\n     */\n    registerEventListeners() {\n        this.modalRoot.addEventListener('click', this.handleModalClick.bind(this));\n        this.modal.getRoot().on(ModalEvents.outsideClick, this.outsideClickHandler.bind(this));\n        this.modal.getRoot().on(ModalEvents.hidden, () => {\n            this.cleanupStream();\n            this.requestRecordingStop();\n        });\n    }\n\n    /**\n     * Prevent the Modal from closing when recording is on process.\n     *\n     * @param {MouseEvent} event The click event\n     */\n    async outsideClickHandler(event) {\n        if (this.isRecording()) {\n            // The user is recording.\n            // Do not distract with a confirmation, just prevent closing.\n            event.preventDefault();\n        } else if (this.hasData()) {\n            // If there is a blobsize then there is data that may be lost.\n            // Ask the user to confirm they want to close the modal.\n            // We prevent default here, and then close the modal if they confirm.\n            event.preventDefault();\n\n            try {\n                await saveCancelPromise(\n                    await getString(\"discard_title\", component),\n                    await getString(\"discard_desc\", component),\n                    await getString(\"confirm_yes\", component),\n                );\n                this.modal.hide();\n            } catch (error) {\n                // Do nothing, the modal will not close.\n            }\n        }\n    }\n\n    /**\n     * Handle a click within the Modal.\n     *\n     * @param {MouseEvent} event The click event\n     */\n    handleModalClick(event) {\n        const button = event.target.closest('button');\n        if (button && button.dataset.action) {\n            const action = button.dataset.action;\n            if (action === 'startstop') {\n                this.handleRecordingStartStopRequested();\n            }\n\n            if (action === 'upload') {\n                this.uploadRecording();\n            }\n        }\n    }\n\n    /**\n     * Handle the click event for the recording start/stop button.\n     */\n    handleRecordingStartStopRequested() {\n        if (this.mediaRecorder?.state === 'recording') {\n            this.requestRecordingStop();\n        } else {\n            this.startRecording();\n        }\n    }\n\n    /**\n     * Handle the media stream after it has finished.\n     */\n    async onMediaStopped() {\n        // Set source of audio player.\n        this.blob = new Blob(this.data.chunks, {\n            type: this.mediaRecorder.mimeType\n        });\n        this.player.srcObject = null;\n        this.player.src = URL.createObjectURL(this.blob);\n\n        // Change the label to \"Record again\".\n        this.setRecordButtonTextFromString('recordagain');\n\n        // Show audio player with controls enabled, and unmute.\n        this.player.muted = false;\n        this.player.controls = true;\n        this.getButtonContainer('player')?.classList.toggle('hide', false);\n\n        // Show upload button.\n        this.setUploadButtonVisibility(true);\n        this.setUploadButtonState(true);\n    }\n\n    /**\n     * Upload the recording and insert it into the editor content.\n     */\n    async uploadRecording() {\n        // Trigger error if no recording has been made.\n        if (this.data.chunks.length === 0) {\n            this.displayAlert('norecordingfound');\n            return;\n        }\n\n        const fileName = this.getFileName((Math.random() * 1000).toString().replace('.', ''));\n\n        // Upload recording to server.\n        try {\n            // Once uploading starts, do not allow any further changes to the recording.\n            this.setRecordButtonVisibility(false);\n\n            // Disable the upload button.\n            this.setUploadButtonState(false);\n\n            // Upload the recording.\n            const fileURL = await uploadFile(this.editor, 'media', this.blob, fileName, (progress) => {\n                this.setUploadButtonTextProgress(progress);\n            });\n            this.insertMedia(fileURL);\n            this.close();\n            addToast(await getString('recordinguploaded', component));\n        } catch (error) {\n            // Show a toast and unhide the button.\n            this.setUploadButtonState(true);\n\n            addToast(await getString('uploadfailed', component, {error}), {\n                type: 'error',\n            });\n\n        }\n    }\n\n    /**\n     * Helper to get the container that a button is in.\n     *\n     * @param {string} purpose The button purpose\n     * @returns {HTMLElement}\n     */\n    getButtonContainer(purpose) {\n        return this.modalRoot.querySelector(`[data-purpose=\"${purpose}-container\"]`);\n    }\n\n    /**\n     * Check whether the browser is compatible with capturing media.\n     *\n     * @returns {boolean}\n     */\n    static isBrowserCompatible() {\n        return this.checkSecure() && this.hasUserMedia();\n    }\n\n    static async display(editor) {\n        const ModalClass = this.getModalClass();\n        const modal = await ModalFactory.create({\n            type: ModalClass.TYPE,\n            templateContext: {},\n            large: true,\n        });\n\n        // Set up the VideoRecorder.\n        const recorder = new this(editor, modal);\n        if (recorder.isReady()) {\n            modal.show();\n        }\n        return modal;\n    }\n\n    /**\n     * Check whether the browser is compatible with capturing media, and display a warning if not.\n     *\n     * @returns {boolean}\n     */\n    checkAndWarnAboutBrowserCompatibility() {\n        if (!this.constructor.checkSecure()) {\n            getStrings(['insecurealert_title', 'insecurealert'].map((key) => ({key, component})))\n                .then(([title, message]) => addToast(message, {title, type: 'error'}))\n                .catch();\n            return false;\n        }\n\n        if (!this.constructor.hasUserMedia) {\n            getStrings(['nowebrtc_title', 'nowebrtc'].map((key) => ({key, component})))\n                .then(([title, message]) => addToast(message, {title, type: 'error'}))\n                .catch();\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Check whether the browser supports WebRTC.\n     *\n     * @returns {boolean}\n     */\n    static hasUserMedia() {\n        return (navigator.mediaDevices && window.MediaRecorder);\n    }\n\n    /**\n     * Check whether the hostname is either hosted over SSL, or from a valid localhost hostname.\n     *\n     * The UserMedia API can only be used in secure contexts as noted.\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia#privacy_and_security}\n     *\n     * @returns {boolean} Whether the plugin can be loaded.\n     */\n    static checkSecure() {\n        // Note: We can now use window.isSecureContext.\n        // https://developer.mozilla.org/en-US/docs/Web/Security/Secure_Contexts#feature_detection\n        // https://developer.mozilla.org/en-US/docs/Web/API/isSecureContext\n        return window.isSecureContext;\n    }\n\n    /**\n     * Update the content of the stop recording button timer.\n     */\n    async setStopRecordingButton() {\n        const {html, js} = await Templates.renderForPromise('tiny_recordrtc/timeremaining', this.getTimeRemaining());\n        Templates.replaceNodeContents(this.startStopButton, html, js);\n        this.buttonTimer = setInterval(this.updateRecordButtonTime.bind(this), 500);\n    }\n\n    /**\n     * Update the time on the stop recording button.\n     */\n    updateRecordButtonTime() {\n        const {remaining, minutes, seconds} = this.getTimeRemaining();\n        if (remaining < 0) {\n            this.requestRecordingStop();\n        } else {\n            this.startStopButton.querySelector('[data-type=\"minutes\"]').textContent = minutes;\n            this.startStopButton.querySelector('[data-type=\"seconds\"]').textContent = seconds;\n        }\n    }\n\n    /**\n     * Set the text of the record button using a language string.\n     *\n     * @param {string} string The string identifier\n     */\n    async setRecordButtonTextFromString(string) {\n        this.startStopButton.textContent = await getString(string, component);\n    }\n\n    /**\n     * Set the upload button text progress.\n     *\n     * @param {number} progress The progress\n     */\n    async setUploadButtonTextProgress(progress) {\n        this.uploadButton.textContent = await getString('uploading', component, {\n            progress: Math.round(progress * 100) / 100,\n        });\n    }\n\n    async resetUploadButtonText() {\n        this.uploadButton.textContent = await getString('upload', component);\n    }\n\n    /**\n     * Clear the timer for the stop recording button.\n     */\n    clearButtonTimer() {\n        if (this.buttonTimer) {\n            clearInterval(this.buttonTimer);\n        }\n        this.buttonTimer = null;\n    }\n\n    /**\n     * Get the time remaining for the recording.\n     *\n     * @returns {Object} The minutes and seconds remaining.\n     */\n    getTimeRemaining() {\n        // All times are in milliseconds\n        const now = new Date().getTime();\n        const remaining = Math.floor(this.getTimeLimit() - ((now - this.startTime) / 1000));\n\n        const formatter = new Intl.NumberFormat(navigator.language, {minimumIntegerDigits: 2});\n        const seconds = formatter.format(remaining % 60);\n        const minutes = formatter.format(Math.floor((remaining - seconds) / 60));\n        return {\n            remaining,\n            minutes,\n            seconds,\n        };\n    }\n\n    /**\n     * Get the maximum file size that can be uploaded.\n     *\n     * @returns {number} The max byte size\n     */\n    getMaxUploadSize() {\n        return this.config.maxrecsize;\n    }\n\n    /**\n     * Stop the recording.\n     * Please note that this should only stop the recording.\n     * Anything related to processing the recording should be handled by the\n     * mediaRecorder's stopped event handler which is processed after it has stopped.\n     */\n    requestRecordingStop() {\n        if (this.mediaRecorder && this.mediaRecorder.state !== 'inactive') {\n            this.stopRequested = true;\n        } else {\n            // There is no recording to stop, but the stream must still be cleaned up.\n            this.cleanupStream();\n        }\n    }\n\n    stopRecorder() {\n        this.mediaRecorder.stop();\n\n        // Unmute the player so that the audio is heard during playback.\n        this.player.muted = false;\n    }\n\n    /**\n     * Clean up the stream.\n     *\n     * This involves stopping any track which is still active.\n     */\n    cleanupStream() {\n        if (this.stream) {\n            this.stream.getTracks()\n                .filter((track) => track.readyState !== 'ended')\n                .forEach((track) => track.stop());\n        }\n    }\n\n    /**\n     * Handle the mediaRecorder `stop` event.\n     */\n    handleStopped() {\n        // Handle the stream data.\n        this.onMediaStopped();\n\n        // Clear the button timer.\n        this.clearButtonTimer();\n    }\n\n    /**\n     * Handle the mediaRecorder `start` event.\n     *\n     * This event is called when the recording starts.\n     */\n    handleStarted() {\n        this.startTime = new Date().getTime();\n        this.setStopRecordingButton();\n    }\n\n    /**\n     * Handle the mediaRecorder `dataavailable` event.\n     *\n     * @param {Event} event\n     */\n    handleDataAvailable(event) {\n        if (this.isRecording()) {\n            const newSize = this.data.blobSize + event.data.size;\n            // Recording stops when either the maximum upload size is reached, or the time limit expires.\n            // The time limit is checked in the `updateButtonTime` function.\n            if (newSize >= this.getMaxUploadSize()) {\n                this.stopRecorder();\n                this.displayFileLimitHitMessage();\n            } else {\n                // Push recording slice to array.\n                this.data.chunks.push(event.data);\n\n                // Size of all recorded data so far.\n                this.data.blobSize = newSize;\n\n                if (this.stopRequested) {\n                    this.stopRecorder();\n                }\n            }\n        }\n    }\n\n    async displayFileLimitHitMessage() {\n        addToast(await getString('maxfilesizehit', component), {\n            title: await getString('maxfilesizehit_title', component),\n            type: 'error',\n        });\n    }\n\n    /**\n     * Check whether the recording is in progress.\n     *\n     * @returns {boolean}\n     */\n    isRecording() {\n        return this.mediaRecorder?.state === 'recording';\n    }\n\n    /**\n     * Whether any data has been recorded.\n     *\n     * @returns {boolean}\n     */\n    hasData() {\n        return !!this.data?.blobSize;\n    }\n\n    /**\n     * Start the recording\n     */\n    async startRecording() {\n        if (this.mediaRecorder) {\n            // Stop the existing recorder if it exists.\n            if (this.isRecording()) {\n                this.mediaRecorder.stop();\n            }\n\n            if (this.hasData()) {\n                const resetRecording = await this.recordAgainConfirmation();\n                if (!resetRecording) {\n                    // User cancelled at the confirmation to reset the data, so exit early.\n                    return;\n                }\n                this.setUploadButtonVisibility(false);\n            }\n\n            this.mediaRecorder = null;\n        }\n\n        // The options for the recording codecs and bitrates.\n        this.mediaRecorder = new MediaRecorder(this.stream, this.getParsedRecordingOptions());\n\n        this.mediaRecorder.addEventListener('dataavailable', this.handleDataAvailable.bind(this));\n        this.mediaRecorder.addEventListener('stop', this.handleStopped.bind(this));\n        this.mediaRecorder.addEventListener('start', this.handleStarted.bind(this));\n\n        this.data = {\n            chunks: [],\n            blobSize: 0\n        };\n        this.setupPlayerSource();\n        this.stopRequested = false;\n\n        // Capture in 50ms chunks.\n        this.mediaRecorder.start(50);\n    }\n\n    /**\n     * Confirm whether the user wants to reset the existing recoring.\n     *\n     * @returns {Promise<boolean>} Whether the user confirmed the reset.\n     */\n    async recordAgainConfirmation() {\n        try {\n            await saveCancelPromise(\n                await getString(\"recordagain_title\", component),\n                await getString(\"recordagain_desc\", component),\n                await getString(\"confirm_yes\", component)\n            );\n            return true;\n        } catch {\n            return false;\n        }\n    }\n\n    /**\n     * Insert the HTML to embed the recording into the editor content.\n     *\n     * @param {string} source The URL to view the media.\n     */\n    async insertMedia(source) {\n        const {html} = await Templates.renderForPromise(\n            this.getEmbedTemplateName(),\n            this.getEmbedTemplateContext({\n                source,\n            })\n        );\n        this.editor.insertContent(html);\n    }\n\n    /**\n     * Add or modify the template parameters for the specified type.\n     *\n     * @param {Object} templateContext The Tempalte context to use\n     * @returns {Object} The finalised template context\n     */\n    getEmbedTemplateContext(templateContext) {\n        return templateContext;\n    }\n}\n"],"names":["_pending","_interopRequireDefault","_uploader","ModalEvents","_interopRequireWildcard","ModalFactory","Templates","_systemImportTransformerGlobalIdentifier","window","self","global","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_defineProperty","value","arg","input","hint","prim","Symbol","toPrimitive","undefined","res","TypeError","String","Number","_toPrimitive","_toPropertyKey","enumerable","configurable","writable","_exports","constructor","editor","modal","this","ready","checkAndWarnAboutBrowserCompatibility","config","getData","params","modalRoot","getRoot","startStopButton","querySelector","uploadButton","setRecordButtonState","player","configurePlayer","registerEventListeners","captureUserMedia","prefetchContent","isReady","Error","concat","name","getSupportedTypes","getRecordingOptions","getFileName","prefix","getMediaConstraints","playOnCapture","getTimeLimit","getEmbedTemplateName","static","getParsedRecordingOptions","types","options","compatTypes","filter","type","MediaRecorder","isTypeSupported","length","mimeType","async","stream","navigator","mediaDevices","getUserMedia","handleCaptureSuccess","error","handleCaptureFailure","prefetchStrings","component","prefetchTemplates","title","content","pendingPromise","Pending","define","amd","Promise","resolve","reject","require","module","exports","loader","create","ALERT","body","removeOnClose","show","srcObject","muted","play","setupPlayerSource","enabled","disabled","setRecordButtonVisibility","visible","getButtonContainer","classList","toggle","setUploadButtonState","setUploadButtonVisibility","subject","replace","toLowerCase","displayAlert","getString","get_string","close","hide","addEventListener","handleModalClick","bind","on","outsideClick","outsideClickHandler","hidden","cleanupStream","requestRecordingStop","event","isRecording","preventDefault","hasData","saveCancelPromise","button","target","closest","dataset","action","handleRecordingStartStopRequested","uploadRecording","_this$mediaRecorder","mediaRecorder","state","startRecording","_this$getButtonContai","blob","Blob","data","chunks","src","URL","createObjectURL","setRecordButtonTextFromString","controls","fileName","Math","random","toString","fileURL","uploadFile","progress","setUploadButtonTextProgress","insertMedia","addToast","purpose","checkSecure","hasUserMedia","ModalClass","getModalClass","TYPE","templateContext","large","getStrings","map","then","_ref2","message","catch","_ref","isSecureContext","html","js","renderForPromise","getTimeRemaining","replaceNodeContents","buttonTimer","setInterval","updateRecordButtonTime","remaining","minutes","seconds","textContent","string","round","clearButtonTimer","clearInterval","now","Date","getTime","floor","startTime","formatter","Intl","NumberFormat","language","minimumIntegerDigits","format","getMaxUploadSize","maxrecsize","stopRequested","stopRecorder","stop","getTracks","track","readyState","forEach","handleStopped","onMediaStopped","handleStarted","setStopRecordingButton","handleDataAvailable","newSize","blobSize","size","displayFileLimitHitMessage","push","_this$mediaRecorder2","_this$data","recordAgainConfirmation","start","source","getEmbedTemplateContext","insertContent"],"mappings":"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"}