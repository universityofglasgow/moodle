{"version":3,"file":"course_mod_modal.min.js","sources":["../src/course_mod_modal.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/* eslint space-before-function-paren: 0 */\n\n/**\n * Javascript Module to handle rendering of course modules (e.g. resource/PDF, resource/html, page) in modal windows\n *\n * When the user clicks a PDF course module subtile or old style resource\n * if we are using modals for it (e.g. PDF) , create, populate, launch and size the modal\n *\n * @module      format_tiles/course_mod_modal\n * @copyright   2018 David Watson {@link http://evolutioncode.uk}\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since       Moodle 3.3\n */\n\ndefine([\"jquery\", \"core/modal_factory\", \"core/config\", \"core/templates\", \"core/notification\", \"core/ajax\", 'core/fragment'],\n    function ($, modalFactory, config, Templates, Notification, ajax, Fragment) {\n        \"use strict\";\n\n        /**\n         * Keep references for all modals we have already added to the page,\n         * so that we can relaunch then if needed\n         * @type {{}}\n         */\n        var modalStore = {};\n        var loadingIconHtml;\n        const win = $(window);\n        var courseId;\n        var tilesConfig;\n\n        const Selector = {\n            modal: \".modal\",\n            modalDialog: \".modal-dialog\",\n            modalBody: \".modal-body\",\n            sectionMain: \".section.main\",\n            pageContent: \"#page-content\",\n            regionMain: \"#region-main\",\n            completionState: \"#completion-check-\",\n            cmModal: \".embed_cm_modal\",\n            moodleMediaPlayer: \".mediaplugin_videojs\",\n            closeBtn: \"button.close\",\n            ACTIVITY: \"li.activity\",\n            URLACTIVITYPOPUPLINK: \".activity.modtype_url.urlpopup a\",\n            modalHeader: \".modal-header\",\n            embedModuleButtons: \".embed-module-buttons\",\n            iframe: \"iframe\"\n        };\n\n        const CLASS = {\n            COMPLETION_ENABLED: \"completion-enabled\",\n            COMPLETION_MANUAL: \"completion-manual\",\n            COMPLETION_AUTO: \"completion-auto\", // E.g. grade based.\n            COMPLETION_VIEW: \"completion-view\",\n            COMPLETION_CHECK_BOX: \"completioncheckbox\",\n            COMPLETION_DROPDOWN: \"completion-dropdown\"\n        };\n\n        const modalMinWidth = function () {\n            return Math.min(win.width(), 1100);\n        };\n\n        /**\n         * Some modals contain videos in iframes or objects, which need to stop playing when dismissed.\n         * @param {object} modal the modal which contains the video.\n         */\n        const stopAllVideosOnDismiss = function(modal) {\n            const iframes = modal.find(Selector.iframe);\n            if (iframes.length > 0) {\n                modal.find(Selector.closeBtn).click(function(e) {\n                    $(e.currentTarget).closest(Selector.cmModal).find(Selector.iframe).each(function (index, iframe) {\n                        iframe = $(iframe);\n                        iframe.attr('src', iframe.attr(\"src\"));\n                    });\n                });\n            }\n            const objects = modal.find(\"object\");\n            if (objects.length > 0) {\n                // In this case resetting the URL does not seem to work so we clear it and clear modal from storage.\n                modal.find(Selector.closeBtn).click(function(e) {\n                    const modal = $(e.currentTarget).closest(Selector.cmModal);\n                    modal.find(\"object\").each(function (index, object) {\n                        object = $(object);\n                        object.attr('data', \"\");\n                    });\n                    modalStore[modal.data(\"cmid\")] = undefined;\n                });\n            }\n\n            const moodleMediaPlayer = modal.find(Selector.moodleMediaPlayer);\n            if (moodleMediaPlayer.length > 0) {\n                modal.find(Selector.closeBtn).click(function() {\n                    modal.find(Selector.moodleMediaPlayer).html(\"\");\n                });\n                // Ensure we create a new modal next time.\n                modalStore[modal.data(\"cmid\")] = undefined;\n            }\n        };\n        /**\n         *\n         * @param {number} cmId\n         * @param {number} moduleContextId\n         * @param {number} sectionNum\n         * @param {string} title\n         * @param {string} objectType\n         * @param {string} pluginfileUrl\n         * @param {boolean} completionEnabled\n         * @param {number} existingCompletionState\n         * @param {boolean} isManualCompletion\n         * @param {string} secondaryUrl URL to be shown to user as a fallback if embedded URL does not laod.\n         * @returns {boolean}\n         */\n        const launchCmModal = function (\n                cmId, moduleContextId, sectionNum, title, objectType, pluginfileUrl,\n                completionEnabled, existingCompletionState, isManualCompletion, secondaryUrl\n            ) {\n            modalFactory.create({\n                type: modalFactory.types.DEFAULT,\n                title: title,\n                body: loadingIconHtml\n            }).done(function (modal) {\n                modalStore[cmId] = modal;\n                modal.setLarge();\n                modal.show();\n                const modalRoot = $(modal.root);\n                modalRoot.attr(\"id\", \"embed_mod_modal_\" + cmId);\n                modalRoot.data(\"cmid\", cmId);\n                modalRoot.data(\"section\", sectionNum);\n                modalRoot.addClass(\"embed_cm_modal\");\n\n                // If it's a page activity, we simply add the page HTML as the modal body.\n                // Otherwise, we set the body by rendering from a template.\n                if (objectType === 'page') {\n                    modalRoot.addClass('mod_' + objectType);\n                    stopAllVideosOnDismiss(modalRoot);\n                    Fragment.loadFragment(\n                        'format_tiles', `get_cm_content`, moduleContextId, {contextid: moduleContextId}\n                    )\n                       .done(function(html, js) {\n                            modal.setBody(html);\n                            Templates.runTemplateJS(js);\n                        });\n                } else {\n                    // Render the modal body and set it to the page.\n                    // First a blank template data object.\n                    var templateData = {\n                        id: cmId,\n                        pluginfileUrl: pluginfileUrl,\n                        objectType: null,\n                        width: \"100%\",\n                        height: Math.round(win.height() - 60), // Embedded object height in modal - make as high as poss.\n                        cmid: cmId,\n                        tileid: sectionNum,\n                        isediting: 0,\n                        sesskey: config.sesskey,\n                        activityname: title,\n                        config: {wwwroot: config.wwwroot},\n                        completionstring: '',\n                        secondaryurl: secondaryUrl\n                    };\n\n                    var template = null;\n                    if (objectType === \"resource_html\") {\n                        templateData.objectType = \"text/html\";\n                        template = 'format_tiles/embed_file_modal_body';\n                    } else if (objectType === \"resource_pdf\") {\n                        templateData.objectType = 'application/pdf';\n                        template = 'format_tiles/embed_file_modal_body';\n                    } else if (objectType === \"url\") {\n                        templateData.objectType = 'url';\n                        template = 'format_tiles/embed_url_modal_body';\n                    }\n\n                    Templates.render(template, templateData).done(function (html) {\n                        modal.setBody(html);\n                        modalRoot.find(Selector.modalBody).animate({\"min-height\": Math.round(win.height() - 120)}, \"fast\");\n\n                        if (objectType === \"resource_html\" || objectType === 'url') {\n                            // HTML files only - set widths to 100% since they may contain embedded videos etc.\n                            modalRoot.find(Selector.modal).animate({\"max-width\": \"100%\"}, \"fast\");\n                            modalRoot.find(Selector.modalDialog).animate({\"max-width\": \"100%\"}, \"fast\");\n                            modalRoot.find(Selector.modalBody).animate({\"max-width\": \"100%\"}, \"fast\");\n                            stopAllVideosOnDismiss(modalRoot);\n                            if (objectType === 'url') {\n                                modalRoot.find(Selector.modalBody).addClass(\"text-center\");\n                            }\n                        } else if (objectType === \"resource_pdf\") {\n                            // Otherwise (e.g. for PDF) we don't need 100% width.\n                            modalRoot.find(Selector.modal).animate({\"max-width\": modalMinWidth()}, \"fast\");\n                            // We do modal-dialog too since Moove theme uses it.\n                            modalRoot.find(Selector.modalDialog).animate({\"max-width\": modalMinWidth()}, \"fast\");\n                        }\n\n                    }).fail(Notification.exception);\n                }\n\n                // Render the modal header / title and set it to the page.\n                var headerTemplateData = {\n                    cmid: cmId,\n                    activityname: title,\n                    tileid: sectionNum,\n                    showDownload: objectType === \"resource_pdf\" ? 1 : 0,\n                    showNewWindow: [\"resource_pdf\", 'url'].includes(objectType) ? 1 : 0,\n                    pluginfileUrl: pluginfileUrl,\n                    forModal: true,\n                    secondaryurl: secondaryUrl\n                };\n                if (completionEnabled) {\n                    headerTemplateData.istrackeduser = 1;\n                    headerTemplateData.hascompletion = 1;\n                    const oldState = existingCompletionState === 1;\n\n                    // Core completion button template has 'overallcomplete' arg relating to this cm.\n                    // See course/templates/completion_manual.mustache.\n                    headerTemplateData.overallcomplete = oldState ? 1 : 0;\n                    headerTemplateData.overallincomplete = oldState ? 0 : 1;\n                    headerTemplateData.completionIsManual = isManualCompletion;\n                    if (!headerTemplateData.completionIsManual) {\n                        // Auto completion has different vars for core template core_course/completion_automatic.\n                        headerTemplateData.statuscomplete = headerTemplateData.overallcomplete;\n                        headerTemplateData.statusincomplete = headerTemplateData.overallincomplete;\n                    }\n                    // Trigger event to check if other items in course have updated availability.\n                    if (oldState !== headerTemplateData.completionstate) {\n                        require([\"format_tiles/completion\"], function (completion) {\n                            completion.triggerCompletionChangedEvent(parseInt(sectionNum), parseInt(cmId));\n                        });\n                    }\n                }\n\n                Templates.render(\"format_tiles/embed_module_modal_header_btns\", headerTemplateData).done(function (html) {\n                    modalRoot.find(Selector.embedModuleButtons).remove();\n                    modalRoot.find($('button.close')).remove();\n                    modalRoot.find(Selector.modalHeader).append(html);\n                    modalRoot.find(Selector.closeBtn).detach().appendTo(modalRoot.find(Selector.embedModuleButtons));\n                    const toggleCompletionSelector = '[data-action=\"toggle-manual-completion\"]';\n                    modalRoot.find(toggleCompletionSelector).on('click', () => {\n                        require([\"format_tiles/completion\"], function (completion) {\n                            // In this case, core will handle the request to set the new completion value in the DB.\n                            // We wait a moment to allow that to get a head start.\n                            // Then we trigger an event which course.js will see and update section content to show new statuses.\n                            // Use will not notice this as they are looking at the modal, but it's ready when they dismiss modal.\n                            setTimeout(() => {\n                                completion.triggerCompletionChangedEvent(\n                                    parseInt(modalRoot.data('section')), parseInt(modalRoot.data(\"cmid\"))\n                                );\n                            }, 300);\n                        });\n                    });\n                }).fail(Notification.exception);\n\n                // Allow a short delay before we resize the modal, and check a few times, as content may be loading.\n                setTimeout(() => {\n                    modalHeightChangeWatcher(modalRoot, 3, 1000);\n                }, 500);\n\n                return true;\n            });\n            return false;\n        };\n\n        /**\n         * Resize the modal to account for its content.\n         * @param {object} modalRoot\n         */\n        var resizeModal = function(modalRoot) {\n            modalRoot.find(Selector.modal).animate({\"max-width\": modalMinWidth()}, \"fast\");\n\n            var MODAL_MARGIN = 70;\n\n            // If the modal contains a Moodle mediaplayer div, remove the max width css rule which Moodle applies.\n            // Otherwise video will be 400px max wide.\n            var mediaPlayer = $(Selector.moodleMediaPlayer);\n            mediaPlayer.find(\"div\").each(function(index, child) {\n                $(child).css(\"max-width\", \"\");\n            });\n            if (mediaPlayer.length > 0) {\n                stopAllVideosOnDismiss(modalRoot);\n            }\n\n            // If the activity contains an iframe (e.g. is a page with a YouTube video in it, or H5P), ensure modal is big enough.\n            // Do this for every iframe in the course module.\n            modalRoot.find(Selector.iframe).each(function (index, iframe) {\n\n                const iframeSelector = $(iframe);\n\n                // Get the modal.\n                var modal;\n                // Boost calls the modal \"modal dialog\" so try this first.\n                modal = modalRoot.find(Selector.modalDialog);\n\n                // If no luck, try what Clean and Adaptable do instead.\n                if (modal.length === 0) {\n                    modal = modalRoot.find(Selector.modal);\n                }\n\n                // Now check and adjust the width of the modal.\n                var iframeWidth = Math.min(iframeSelector.width(), win.width());\n                if (iframeWidth > modal.width() - MODAL_MARGIN) {\n                    modal.animate(\n                        {\"max-width\": Math.max(iframeWidth + MODAL_MARGIN, modalMinWidth())},\n                        \"fast\"\n                    );\n                    modalRoot.find(Selector.modal).animate(\n                        {\"max-width\": Math.max(iframeWidth + MODAL_MARGIN, modalMinWidth())},\n                        \"fast\"\n                    );\n                }\n\n                // Then the height of the modal body.\n                var modalBody = modalRoot.find(Selector.modalBody);\n                if (iframeSelector.height() > modalBody.height() - MODAL_MARGIN) {\n                    iframeSelector.attr('height', modalBody.height() - MODAL_MARGIN);\n                }\n                stopAllVideosOnDismiss(modalRoot);\n            });\n        };\n\n        /**\n         * Check the modal height to see if the iframe in it is bigger.  If it is, adjust modal height up.\n         * Do this a few times so that, if iframe content is loading, we can check after it's loaded.\n         * @param {object} modalRoot\n         * @param {number} howManyChecks\n         * @param {number}duration\n         * @param {number} oldHeight\n         */\n        const modalHeightChangeWatcher = function (modalRoot, howManyChecks, duration, oldHeight = 0) {\n            const iframe = modalRoot.find(Selector.modalBody);\n            if (iframe) {\n                const newHeight = Math.round(iframe.height());\n                if (newHeight && newHeight > oldHeight + 10) {\n                    resizeModal(modalRoot);\n                }\n                if (howManyChecks > 0) {\n                    setTimeout(() => {\n                        modalHeightChangeWatcher(modalRoot, howManyChecks - 1, duration, newHeight);\n                    }, duration);\n                }\n            }\n        };\n\n        const logCmView = function(cmId) {\n            ajax.call([{\n                methodname: \"format_tiles_log_mod_view\", args: {\n                    courseid: courseId,\n                    cmid: cmId\n                }\n            }])[0].fail(Notification.exception);\n        };\n\n        /**\n         * Do we need a modal for this cm?\n         * @param {number} cmId course module ID\n         * @param {string} url\n         * @return boolean\n         */\n        const modalRequired = function(cmId, url) {\n            if (tilesConfig.modalallowedmodnames === undefined) {\n                return false;\n            }\n            if (tilesConfig.modalallowedcmids === undefined) {\n                return false;\n            }\n            if (!(tilesConfig.modalallowedcmids).includes(cmId)) {\n                return false;\n            }\n\n            return ((tilesConfig.modalallowedmodnames).includes('page') && url.startsWith(`${config.wwwroot}/mod/page/view.php`))\n                || ((tilesConfig.modalallowedmodnames).includes('url') && url.startsWith(`${config.wwwroot}/mod/url/view.php`))\n                || ((tilesConfig.modalallowedmodnames).includes('pdf') && url.startsWith(`${config.wwwroot}/mod/resource/view.php`))\n                || ((tilesConfig.modalallowedmodnames).includes('html')\n                    && url.startsWith(`${config.wwwroot}/mod/resource/view.php`));\n        };\n\n        return {\n            init: function (courseIdInit, isEditing, pageType, launchModalCmid) {\n                courseId = courseIdInit;\n                $(document).ready(function () {\n                    tilesConfig = $('#format-tiles-js-config').data();\n                    const courseIndex = $('nav#courseindex');\n\n                    if (pageType === 'course-view-tiles') {\n                        // We are on the main tiles page.\n                        // If any link in the course index on the left is clicked, check if it needs a modal.\n                        // If it does, launch the modal instead of following the link.\n                        // This isn't ideal but saves plugin re-implementing / maintaining large volume of course index code.\n                        if (courseIndex.length > 0) {\n                            courseIndex.on('click', function(e) {\n                                const target = $(e.target);\n                                const link = target.hasClass('courseindex-link') ? target : target.find('a.courseindex-link');\n                                if (link && link.data('for') === 'cm_name') {\n                                    e.preventDefault();\n                                    const linkUrl = link.attr('href');\n                                    if (linkUrl) {\n                                        const cmId = link.closest('li.courseindex-item').data('id');\n                                        if (modalRequired(cmId, linkUrl)) {\n                                            ajax.call([{\n                                                methodname: \"format_tiles_get_course_mod_info\", args: {cmid: cmId}\n                                            }])[0].done(function (data) {\n                                                if (!data || !data.modalallowed) {\n                                                    window.location.href = linkUrl;\n                                                }\n                                                const expandedSection = $(`li#section-${data.sectionnumber}.state-visible`);\n                                                if (expandedSection.length === 0) {\n                                                    require([\"format_tiles/course\"], function (course) {\n                                                        course.populateAndExpandSection(\n                                                            data.coursecontextid, data.sectionid, data.sectionnumber\n                                                        );\n                                                    });\n                                                }\n\n                                                launchCmModal(\n                                                    cmId,\n                                                    data.modulecontextid,\n                                                    data.sectionnumber,\n                                                    data.name,\n                                                    data.modname === 'resource' ? `resource_${data.resourcetype}` : data.modname,\n                                                    data.modname === 'url' || data.resourcetype === 'html'\n                                                        ? data.pluginfileurl : linkUrl,\n                                                    data.completionenabled ? 1 : 0,\n                                                    data.iscomplete ? 1 : 0,\n                                                    data.ismanualcompletion,\n                                                    data.pluginfileurl\n                                                );\n                                            })\n                                                .fail(function() {\n                                                    window.location.href = linkUrl;\n                                                });\n                                            } else {\n                                                window.location.href = linkUrl;\n                                            }\n                                    }\n                                }\n                            });\n                        }\n\n                        // If we are passing ?cmid=xxx in the URL this suggests we are trying to launch course mod modal.\n                        // This would be from clicking a course index link while in another activity.\n                        // E.g. from /mod/xxx/view.php for another course module.\n                        // This isn't ideal but saves this plugin re-implementing / maintaining large volume of course index code.\n                        if (launchModalCmid) {\n                            ajax.call([{\n                                methodname: \"format_tiles_get_course_mod_info\", args: {cmid: launchModalCmid}\n                            }])[0].done(function (data) {\n                                if (data && data.modalallowed) {\n                                    const expandedSection = $(`li#section-${data.sectionnumber}.state-visible`);\n                                    if (expandedSection.length === 0) {\n                                        require([\"format_tiles/course\"], function (course) {\n                                            course.populateAndExpandSection(\n                                                data.coursecontextid, data.sectionid, data.sectionnumber\n                                            );\n                                        });\n                                    }\n\n                                    launchCmModal(\n                                        launchModalCmid,\n                                        data.modulecontextid,\n                                        data.sectionnumber,\n                                        data.name,\n                                        data.modname === 'resource' ? `resource_${data.resourcetype}` : data.modname,\n                                        ['url', 'resource'].includes(data.modname) ? data.pluginfileurl : '',\n                                        data.completionenabled ? 1 : 0,\n                                        data.iscomplete ? 1 : 0,\n                                        data.ismanualcompletion,\n                                        data.secondaryurl\n                                    );\n                                }\n                            });\n                        }\n\n                        const launchModalDataActions =\n                            [\"launch-tiles-resource-modal\", \"launch-tiles-module-modal\", \"launch-tiles-url-modal\"];\n                        var modalSelectors = launchModalDataActions.map(function (action) {\n                            return `[data-action=\"${action}\"]`;\n                        }).join(\", \");\n\n                        var pageContent = $(Selector.pageContent);\n                        if (pageContent.length === 0) {\n                            // Some themes e.g. RemUI do not have a #page-content div, so use #region-main.\n                            pageContent = $(Selector.regionMain);\n                        }\n                        pageContent.on(\"click\", modalSelectors, function (e) {\n                            // If click is on a completion checkbox within activity, ignore here as handled elsewhere.\n                            const tgt = $(e.target);\n                            const isExcludedControl = tgt.hasClass(CLASS.COMPLETION_CHECK_BOX)\n                                || tgt.parent().hasClass(CLASS.COMPLETION_CHECK_BOX)\n                                || tgt.hasClass(CLASS.COMPLETION_DROPDOWN)\n                                || tgt.parent().hasClass(CLASS.COMPLETION_DROPDOWN)\n                                || tgt.is(\":button\")\n                                || tgt.hasClass('expanded-content') // \"Show less\" link on restrictions.\n                                || tgt.hasClass('collapsed-content'); // \"Show more\" link on restrictions\n                            if (isExcludedControl) {\n                                return;\n                            }\n                            e.preventDefault();\n                            const currTgt = $(e.currentTarget);\n                            var clickedCmObject = currTgt.closest(\"li.activity\");\n                            const cmId = clickedCmObject.data('cmid');\n                            const moduleContextId = clickedCmObject.data('contextid');\n                            const sectionNum = clickedCmObject.closest(Selector.sectionMain).data('section');\n\n                            // If we already have this modal on the page, launch it.\n                            var existingModal = modalStore[cmId];\n                            if (typeof existingModal === \"object\") {\n                                existingModal.show();\n                            } else {\n                                // Log the fact we viewed it (only do this once not every time the modal launches).\n                                logCmView(cmId);\n\n                                // We don't already have it, so make it.\n                                launchCmModal(\n                                    cmId,\n                                    moduleContextId,\n                                    sectionNum,\n                                    clickedCmObject.data('title'),\n                                    clickedCmObject.data('modtype'),\n                                    clickedCmObject.data('url'),\n                                    clickedCmObject.hasClass(CLASS.COMPLETION_ENABLED),\n                                    clickedCmObject.data('completion-state')\n                                        ? parseInt(clickedCmObject.data('completion-state')) : null,\n                                    clickedCmObject.hasClass(CLASS.COMPLETION_MANUAL),\n                                    clickedCmObject.data(\"url-secondary\")\n                                );\n                            }\n                        });\n\n                        // Render the loading icon and append it to body so that we can use it later.\n                        Templates.render(\"format_tiles/loading\", {})\n                            .catch(Notification.exception)\n                            .done(function (html) {\n                                loadingIconHtml = html; // TODO get this from elsewhere.\n                            }).fail(Notification.exception);\n\n                        // If completion of a cm changes, remove it from store so that it can be re-rendered with correct heading.\n                        $(document).on('format-tiles-completion-changed', function(e, data) {\n                            if (data.cmid && modalStore[data.cmid]) {\n                                modalStore[data.cmid] = undefined;\n                            }\n                        });\n                    } else if (pageType.match('^mod-[a-z]+-view$')) {\n                        courseIndex.on('click', function (e) {\n                            const target = $(e.target);\n                            const link = target.hasClass('courseindex-link') ? target : target.find('a.courseindex-link');\n                            if (link && link.data('for') === 'cm_name') {\n                                e.preventDefault();\n                                const linkUrl = link.attr('href');\n                                if (linkUrl) {\n                                    const link = $(e.target);\n                                    const cmId = link.closest('li.courseindex-item').data('id');\n                                    if (modalRequired(cmId, linkUrl)) {\n                                        window.location.href =\n                                            `${config.wwwroot}/course/view.php?id=${courseId}&cmid=${cmId}`;\n                                    } else {\n                                        window.location.href = linkUrl;\n                                    }\n                                }\n                            }\n                        });\n                    }\n                });\n            }\n        };\n    }\n);\n"],"names":["define","$","modalFactory","config","Templates","Notification","ajax","Fragment","loadingIconHtml","modalStore","win","window","courseId","tilesConfig","Selector","CLASS","modalMinWidth","Math","min","width","stopAllVideosOnDismiss","modal","find","length","click","e","currentTarget","closest","each","index","iframe","attr","object","data","undefined","html","launchCmModal","cmId","moduleContextId","sectionNum","title","objectType","pluginfileUrl","completionEnabled","existingCompletionState","isManualCompletion","secondaryUrl","create","type","types","DEFAULT","body","done","setLarge","show","modalRoot","root","addClass","loadFragment","contextid","js","setBody","runTemplateJS","templateData","id","height","round","cmid","tileid","isediting","sesskey","activityname","wwwroot","completionstring","secondaryurl","template","render","animate","fail","exception","headerTemplateData","showDownload","showNewWindow","includes","forModal","istrackeduser","hascompletion","oldState","overallcomplete","overallincomplete","completionIsManual","statuscomplete","statusincomplete","completionstate","require","completion","triggerCompletionChangedEvent","parseInt","remove","append","detach","appendTo","on","setTimeout","modalHeightChangeWatcher","resizeModal","mediaPlayer","child","css","iframeSelector","iframeWidth","max","modalBody","howManyChecks","duration","oldHeight","newHeight","modalRequired","url","modalallowedmodnames","modalallowedcmids","startsWith","init","courseIdInit","isEditing","pageType","launchModalCmid","document","ready","courseIndex","target","link","hasClass","preventDefault","linkUrl","call","methodname","args","modalallowed","location","href","sectionnumber","course","populateAndExpandSection","coursecontextid","sectionid","modulecontextid","name","modname","resourcetype","pluginfileurl","completionenabled","iscomplete","ismanualcompletion","modalSelectors","map","action","join","pageContent","tgt","parent","is","clickedCmObject","existingModal","courseid","logCmView","catch","match"],"mappings":"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"}