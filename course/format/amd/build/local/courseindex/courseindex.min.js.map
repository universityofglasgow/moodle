{"version":3,"file":"courseindex.min.js","sources":["../../../src/local/courseindex/courseindex.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Course index main component.\n *\n * @module     core_courseformat/local/courseindex/courseindex\n * @class     core_courseformat/local/courseindex/courseindex\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {BaseComponent} from 'core/reactive';\nimport {getCurrentCourseEditor} from 'core_courseformat/courseeditor';\nimport jQuery from 'jquery';\nimport ContentTree from 'core_courseformat/local/courseeditor/contenttree';\n\nexport default class Component extends BaseComponent {\n\n    /**\n     * Constructor hook.\n     */\n    create() {\n        // Optional component name for debugging.\n        this.name = 'courseindex';\n        // Default query selectors.\n        this.selectors = {\n            SECTION: `[data-for='section']`,\n            SECTION_CMLIST: `[data-for='cmlist']`,\n            CM: `[data-for='cm']`,\n            TOGGLER: `[data-action=\"togglecourseindexsection\"]`,\n            COLLAPSE: `[data-toggle=\"collapse\"]`,\n            DRAWER: `.drawer`,\n        };\n        // Default classes to toggle on refresh.\n        this.classes = {\n            SECTIONHIDDEN: 'dimmed',\n            CMHIDDEN: 'dimmed',\n            SECTIONCURRENT: 'current',\n            COLLAPSED: `collapsed`,\n            SHOW: `show`,\n        };\n        // Arrays to keep cms and sections elements.\n        this.sections = {};\n        this.cms = {};\n    }\n\n    /**\n     * Static method to create a component instance form the mustache template.\n     *\n     * @param {element|string} target the DOM main element or its ID\n     * @param {object} selectors optional css selector overrides\n     * @return {Component}\n     */\n    static init(target, selectors) {\n        return new Component({\n            element: document.getElementById(target),\n            reactive: getCurrentCourseEditor(),\n            selectors,\n        });\n    }\n\n    /**\n     * Initial state ready method.\n     *\n     * @param {Object} state the state data\n     */\n    stateReady(state) {\n        // Activate section togglers.\n        this.addEventListener(this.element, 'click', this._sectionTogglers);\n\n        // Get cms and sections elements.\n        const sections = this.getElements(this.selectors.SECTION);\n        sections.forEach((section) => {\n            this.sections[section.dataset.id] = section;\n        });\n        const cms = this.getElements(this.selectors.CM);\n        cms.forEach((cm) => {\n            this.cms[cm.dataset.id] = cm;\n        });\n\n        // Set the page item if any.\n        this._refreshPageItem({element: state.course, state});\n\n        // Configure Aria Tree.\n        this.contentTree = new ContentTree(this.element, this.selectors, this.reactive.isEditing);\n    }\n\n    getWatchers() {\n        return [\n            {watch: `section.indexcollapsed:updated`, handler: this._refreshSectionCollapsed},\n            {watch: `cm:created`, handler: this._createCm},\n            {watch: `cm:deleted`, handler: this._deleteCm},\n            {watch: `section:created`, handler: this._createSection},\n            {watch: `section:deleted`, handler: this._deleteSection},\n            {watch: `course.pageItem:created`, handler: this._refreshPageItem},\n            {watch: `course.pageItem:updated`, handler: this._refreshPageItem},\n            // Sections and cm sorting.\n            {watch: `course.sectionlist:updated`, handler: this._refreshCourseSectionlist},\n            {watch: `section.cmlist:updated`, handler: this._refreshSectionCmlist},\n        ];\n    }\n\n    /**\n     * Setup sections toggler.\n     *\n     * Toggler click is delegated to the main course index element because new sections can\n     * appear at any moment and this way we prevent accidental double bindings.\n     *\n     * @param {Event} event the triggered event\n     */\n    _sectionTogglers(event) {\n        const sectionlink = event.target.closest(this.selectors.TOGGLER);\n        const isChevron = event.target.closest(this.selectors.COLLAPSE);\n\n        if (sectionlink || isChevron) {\n\n            const section = event.target.closest(this.selectors.SECTION);\n            const toggler = section.querySelector(this.selectors.COLLAPSE);\n            const isCollapsed = toggler?.classList.contains(this.classes.COLLAPSED) ?? false;\n\n            if (isChevron || isCollapsed) {\n                // Update the state.\n                const sectionId = section.getAttribute('data-id');\n                this.reactive.dispatch(\n                    'sectionIndexCollapsed',\n                    [sectionId],\n                    !isCollapsed\n                );\n            }\n        }\n    }\n\n    /**\n     * Update section collapsed.\n     *\n     * @param {object} args\n     * @param {object} args.element The leement to be expanded\n     */\n    _refreshSectionCollapsed({element}) {\n        const target = this.getElement(this.selectors.SECTION, element.id);\n        if (!target) {\n            throw new Error(`Unkown section with ID ${element.id}`);\n        }\n        // Check if it is already done.\n        const toggler = target.querySelector(this.selectors.COLLAPSE);\n        const isCollapsed = toggler?.classList.contains(this.classes.COLLAPSED) ?? false;\n\n        if (element.indexcollapsed !== isCollapsed) {\n            this._expandSectionNode(element);\n        }\n    }\n\n    /**\n     * Expand a section node.\n     *\n     * By default the method will use element.indexcollapsed to decide if the\n     * section is opened or closed. However, using forceValue it is possible\n     * to open or close a section independant from the indexcollapsed attribute.\n     *\n     * @param {Object} element the course module state element\n     * @param {boolean} forceValue optional forced expanded value\n     */\n    _expandSectionNode(element, forceValue) {\n        const target = this.getElement(this.selectors.SECTION, element.id);\n        const toggler = target.querySelector(this.selectors.COLLAPSE);\n        let collapsibleId = toggler.dataset.target ?? toggler.getAttribute(\"href\");\n        if (!collapsibleId) {\n            return;\n        }\n        collapsibleId = collapsibleId.replace('#', '');\n        const collapsible = document.getElementById(collapsibleId);\n        if (!collapsible) {\n            return;\n        }\n\n        if (forceValue === undefined) {\n            forceValue = (element.indexcollapsed) ? false : true;\n        }\n\n        // Course index is based on Bootstrap 4 collapsibles. To collapse them we need jQuery to\n        // interact with collapsibles methods. Hopefully, this will change in Bootstrap 5 because\n        // it does not require jQuery anymore (when MDL-71979 is integrated).\n        const togglerValue = (forceValue) ? 'show' : 'hide';\n        jQuery(collapsible).collapse(togglerValue);\n    }\n\n    /**\n     * Handle a page item update.\n     *\n     * @param {Object} details the update details\n     * @param {Object} details.state the state data.\n     * @param {Object} details.element the course state data.\n     */\n    _refreshPageItem({element, state}) {\n        if (!element?.pageItem?.isStatic || element.pageItem.type != 'cm') {\n            return;\n        }\n        // Check if we need to uncollapse the section and scroll to the element.\n        const section = state.section.get(element.pageItem.sectionId);\n        if (section.indexcollapsed) {\n            this._expandSectionNode(section, true);\n            setTimeout(\n                () => this.cms[element.pageItem.id]?.scrollIntoView({block: \"nearest\"}),\n                250\n            );\n        }\n    }\n\n    /**\n     * Create a newcm instance.\n     *\n     * @param {object} param\n     * @param {Object} param.state\n     * @param {Object} param.element\n     */\n    async _createCm({state, element}) {\n        // Create a fake node while the component is loading.\n        const fakeelement = document.createElement('li');\n        fakeelement.classList.add('bg-pulse-grey', 'w-100');\n        fakeelement.innerHTML = '&nbsp;';\n        this.cms[element.id] = fakeelement;\n        // Place the fake node on the correct position.\n        this._refreshSectionCmlist({\n            state,\n            element: state.section.get(element.sectionid),\n        });\n        // Collect render data.\n        const exporter = this.reactive.getExporter();\n        const data = exporter.cm(state, element);\n        // Create the new content.\n        const newcomponent = await this.renderComponent(fakeelement, 'core_courseformat/local/courseindex/cm', data);\n        // Replace the fake node with the real content.\n        const newelement = newcomponent.getElement();\n        this.cms[element.id] = newelement;\n        fakeelement.parentNode.replaceChild(newelement, fakeelement);\n    }\n\n    /**\n     * Create a new section instance.\n     *\n     * @param {Object} details the update details.\n     * @param {Object} details.state the state data.\n     * @param {Object} details.element the element data.\n     */\n    async _createSection({state, element}) {\n        // Create a fake node while the component is loading.\n        const fakeelement = document.createElement('div');\n        fakeelement.classList.add('bg-pulse-grey', 'w-100');\n        fakeelement.innerHTML = '&nbsp;';\n        this.sections[element.id] = fakeelement;\n        // Place the fake node on the correct position.\n        this._refreshCourseSectionlist({\n            state,\n            element: state.course,\n        });\n        // Collect render data.\n        const exporter = this.reactive.getExporter();\n        const data = exporter.section(state, element);\n        // Create the new content.\n        const newcomponent = await this.renderComponent(fakeelement, 'core_courseformat/local/courseindex/section', data);\n        // Replace the fake node with the real content.\n        const newelement = newcomponent.getElement();\n        this.sections[element.id] = newelement;\n        fakeelement.parentNode.replaceChild(newelement, fakeelement);\n    }\n\n    /**\n     * Refresh a section cm list.\n     *\n     * @param {object} param\n     * @param {Object} param.element\n     */\n    _refreshSectionCmlist({element}) {\n        const cmlist = element.cmlist ?? [];\n        const listparent = this.getElement(this.selectors.SECTION_CMLIST, element.id);\n        this._fixOrder(listparent, cmlist, this.cms);\n    }\n\n    /**\n     * Refresh the section list.\n     *\n     * @param {object} param\n     * @param {Object} param.element\n     */\n    _refreshCourseSectionlist({element}) {\n        const sectionlist = element.sectionlist ?? [];\n        this._fixOrder(this.element, sectionlist, this.sections);\n    }\n\n    /**\n     * Fix/reorder the section or cms order.\n     *\n     * @param {Element} container the HTML element to reorder.\n     * @param {Array} neworder an array with the ids order\n     * @param {Array} allitems the list of html elements that can be placed in the container\n     */\n    _fixOrder(container, neworder, allitems) {\n\n        // Empty lists should not be visible.\n        if (!neworder.length) {\n            container.classList.add('hidden');\n            container.innerHTML = '';\n            return;\n        }\n\n        // Grant the list is visible (in case it was empty).\n        container.classList.remove('hidden');\n\n        // Move the elements in order at the beginning of the list.\n        neworder.forEach((itemid, index) => {\n            const item = allitems[itemid];\n            // Get the current element at that position.\n            const currentitem = container.children[index];\n            if (currentitem === undefined) {\n                container.append(item);\n                return;\n            }\n            if (currentitem !== item) {\n                container.insertBefore(item, currentitem);\n            }\n        });\n        // Remove the remaining elements.\n        while (container.children.length > neworder.length) {\n            container.removeChild(container.lastChild);\n        }\n    }\n\n    /**\n     * Remove a cm from the list.\n     *\n     * The actual DOM element removal is delegated to the cm component.\n     *\n     * @param {object} param\n     * @param {Object} param.element\n     */\n    _deleteCm({element}) {\n        delete this.cms[element.id];\n    }\n\n    /**\n     * Remove a section from the list.\n     *\n     * The actual DOM element removal is delegated to the section component.\n     *\n     * @param {Object} details the update details.\n     * @param {Object} details.element the element data.\n     */\n    _deleteSection({element}) {\n        delete this.sections[element.id];\n    }\n}\n"],"names":["_interopRequireDefault","obj","__esModule","default","_jquery","_contenttree","Component","BaseComponent","create","this","name","selectors","SECTION","SECTION_CMLIST","CM","TOGGLER","COLLAPSE","DRAWER","classes","SECTIONHIDDEN","CMHIDDEN","SECTIONCURRENT","COLLAPSED","SHOW","sections","cms","static","target","element","document","getElementById","reactive","getCurrentCourseEditor","stateReady","state","addEventListener","_sectionTogglers","getElements","forEach","section","dataset","id","cm","_refreshPageItem","course","contentTree","ContentTree","isEditing","getWatchers","watch","handler","_refreshSectionCollapsed","_createCm","_deleteCm","_createSection","_deleteSection","_refreshCourseSectionlist","_refreshSectionCmlist","event","sectionlink","closest","isChevron","_toggler$classList$co","toggler","querySelector","isCollapsed","classList","contains","sectionId","getAttribute","dispatch","_ref","_toggler$classList$co2","getElement","Error","concat","indexcollapsed","_expandSectionNode","forceValue","_toggler$dataset$targ","collapsibleId","replace","collapsible","undefined","togglerValue","jQuery","collapse","_ref2","_element$pageItem","pageItem","isStatic","type","get","setTimeout","_this$cms$element$pag","scrollIntoView","block","async","_ref3","fakeelement","createElement","add","innerHTML","sectionid","data","getExporter","newelement","renderComponent","parentNode","replaceChild","_ref4","_ref5","_element$cmlist","cmlist","listparent","_fixOrder","_ref6","_element$sectionlist","sectionlist","container","neworder","allitems","length","remove","itemid","index","item","currentitem","children","insertBefore","append","removeChild","lastChild","_ref7","_ref8","_exports"],"mappings":"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"}