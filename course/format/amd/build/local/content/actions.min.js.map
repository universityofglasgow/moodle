{"version":3,"file":"actions.min.js","sources":["../../../src/local/content/actions.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Course state actions dispatcher.\n *\n * This module captures all data-dispatch links in the course content and dispatch the proper\n * state mutation, including any confirmation and modal required.\n *\n * @module     core_courseformat/local/content/actions\n * @class      core_courseformat/local/content/actions\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {BaseComponent} from 'core/reactive';\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport Templates from 'core/templates';\nimport {prefetchStrings} from 'core/prefetch';\nimport {get_string as getString} from 'core/str';\nimport {getList} from 'core/normalise';\nimport * as CourseEvents from 'core_course/events';\nimport Pending from 'core/pending';\nimport ContentTree from 'core_courseformat/local/courseeditor/contenttree';\n// The jQuery module is only used for interacting with Boostrap 4. It can we removed when MDL-71979 is integrated.\nimport jQuery from 'jquery';\n\n// Load global strings.\nprefetchStrings('core', ['movecoursesection', 'movecoursemodule', 'confirm', 'delete']);\n\n// Mutations are dispatched by the course content actions.\n// Formats can use this module addActions static method to add custom actions.\n// Direct mutations can be simple strings (mutation) name or functions.\nconst directMutations = {\n    sectionHide: 'sectionHide',\n    sectionShow: 'sectionShow',\n    cmHide: 'cmHide',\n    cmShow: 'cmShow',\n    cmStealth: 'cmStealth',\n};\n\nexport default class extends BaseComponent {\n\n    /**\n     * Constructor hook.\n     */\n    create() {\n        // Optional component name for debugging.\n        this.name = 'content_actions';\n        // Default query selectors.\n        this.selectors = {\n            ACTIONLINK: `[data-action]`,\n            // Move modal selectors.\n            SECTIONLINK: `[data-for='section']`,\n            CMLINK: `[data-for='cm']`,\n            SECTIONNODE: `[data-for='sectionnode']`,\n            MODALTOGGLER: `[data-toggle='collapse']`,\n            ADDSECTION: `[data-action='addSection']`,\n            CONTENTTREE: `#destination-selector`,\n            ACTIONMENU: `.action-menu`,\n            ACTIONMENUTOGGLER: `[data-toggle=\"dropdown\"]`,\n        };\n        // Component css classes.\n        this.classes = {\n            DISABLED: `disabled`,\n        };\n    }\n\n    /**\n     * Add extra actions to the module.\n     *\n     * @param {array} actions array of methods to execute\n     */\n    static addActions(actions) {\n        for (const [action, mutationReference] of Object.entries(actions)) {\n            if (typeof mutationReference !== 'function' && typeof mutationReference !== 'string') {\n                throw new Error(`${action} action must be a mutation name or a function`);\n            }\n            directMutations[action] = mutationReference;\n        }\n    }\n\n    /**\n     * Initial state ready method.\n     *\n     * @param {Object} state the state data.\n     *\n     */\n    stateReady(state) {\n        // Delegate dispatch clicks.\n        this.addEventListener(\n            this.element,\n            'click',\n            this._dispatchClick\n        );\n        // Check section limit.\n        this._checkSectionlist({state});\n        // Add an Event listener to recalculate limits it if a section HTML is altered.\n        this.addEventListener(\n            this.element,\n            CourseEvents.sectionRefreshed,\n            () => this._checkSectionlist({state})\n        );\n    }\n\n    /**\n     * Return the component watchers.\n     *\n     * @returns {Array} of watchers\n     */\n    getWatchers() {\n        return [\n            // Check section limit.\n            {watch: `course.sectionlist:updated`, handler: this._checkSectionlist},\n        ];\n    }\n\n    _dispatchClick(event) {\n        const target = event.target.closest(this.selectors.ACTIONLINK);\n        if (!target) {\n            return;\n        }\n        if (target.classList.contains(this.classes.DISABLED)) {\n            event.preventDefault();\n            return;\n        }\n\n        // Invoke proper method.\n        const actionName = target.dataset.action;\n        const methodName = this._actionMethodName(actionName);\n\n        if (this[methodName] !== undefined) {\n            this[methodName](target, event);\n            return;\n        }\n\n        // Check direct mutations or mutations handlers.\n        if (directMutations[actionName] !== undefined) {\n            if (typeof directMutations[actionName] === 'function') {\n                directMutations[actionName](target, event);\n                return;\n            }\n            this._requestMutationAction(target, event, directMutations[actionName]);\n            return;\n        }\n    }\n\n    _actionMethodName(name) {\n        const requestName = name.charAt(0).toUpperCase() + name.slice(1);\n        return `_request${requestName}`;\n    }\n\n    /**\n     * Check the section list and disable some options if needed.\n     *\n     * @param {Object} detail the update details.\n     * @param {Object} detail.state the state object.\n     */\n    _checkSectionlist({state}) {\n        // Disable \"add section\" actions if the course max sections has been exceeded.\n        this._setAddSectionLocked(state.course.sectionlist.length > state.course.maxsections);\n    }\n\n    /**\n     * Handle a move section request.\n     *\n     * @param {Element} target the dispatch action element\n     * @param {Event} event the triggered event\n     */\n    async _requestMoveSection(target, event) {\n        // Check we have an id.\n        const sectionId = target.dataset.id;\n        if (!sectionId) {\n            return;\n        }\n        const sectionInfo = this.reactive.get('section', sectionId);\n\n        event.preventDefault();\n\n        // The section edit menu to refocus on end.\n        const editTools = this._getClosestActionMenuToogler(target);\n\n        // Collect section information from the state.\n        const exporter = this.reactive.getExporter();\n        const data = exporter.course(this.reactive.state);\n\n        // Add the target section id and title.\n        data.sectionid = sectionInfo.id;\n        data.sectiontitle = sectionInfo.title;\n\n        // Build the modal parameters from the event data.\n        const modalParams = {\n            title: getString('movecoursesection', 'core'),\n            body: Templates.render('core_courseformat/local/content/movesection', data),\n        };\n\n        // Create the modal.\n        const modal = await this._modalBodyRenderedPromise(modalParams);\n\n        const modalBody = getList(modal.getBody())[0];\n\n        // Disable current element and section zero.\n        const currentElement = modalBody.querySelector(`${this.selectors.SECTIONLINK}[data-id='${sectionId}']`);\n        this._disableLink(currentElement);\n        const generalSection = modalBody.querySelector(`${this.selectors.SECTIONLINK}[data-number='0']`);\n        this._disableLink(generalSection);\n\n        // Setup keyboard navigation.\n        new ContentTree(\n            modalBody.querySelector(this.selectors.CONTENTTREE),\n            {\n                SECTION: this.selectors.SECTIONNODE,\n                TOGGLER: this.selectors.MODALTOGGLER,\n                COLLAPSE: this.selectors.MODALTOGGLER,\n            },\n            true\n        );\n\n        // Capture click.\n        modalBody.addEventListener('click', (event) => {\n            const target = event.target;\n            if (!target.matches('a') || target.dataset.for != 'section' || target.dataset.id === undefined) {\n                return;\n            }\n            if (target.getAttribute('aria-disabled')) {\n                return;\n            }\n            event.preventDefault();\n            this.reactive.dispatch('sectionMove', [sectionId], target.dataset.id);\n            this._destroyModal(modal, editTools);\n        });\n    }\n\n    /**\n     * Handle a move cm request.\n     *\n     * @param {Element} target the dispatch action element\n     * @param {Event} event the triggered event\n     */\n    async _requestMoveCm(target, event) {\n        // Check we have an id.\n        const cmId = target.dataset.id;\n        if (!cmId) {\n            return;\n        }\n        const cmInfo = this.reactive.get('cm', cmId);\n\n        event.preventDefault();\n\n        // The section edit menu to refocus on end.\n        const editTools = this._getClosestActionMenuToogler(target);\n\n        // Collect section information from the state.\n        const exporter = this.reactive.getExporter();\n        const data = exporter.course(this.reactive.state);\n\n        // Add the target cm info.\n        data.cmid = cmInfo.id;\n        data.cmname = cmInfo.name;\n\n        // Build the modal parameters from the event data.\n        const modalParams = {\n            title: getString('movecoursemodule', 'core'),\n            body: Templates.render('core_courseformat/local/content/movecm', data),\n        };\n\n        // Create the modal.\n        const modal = await this._modalBodyRenderedPromise(modalParams);\n\n        const modalBody = getList(modal.getBody())[0];\n\n        // Disable current element.\n        let currentElement = modalBody.querySelector(`${this.selectors.CMLINK}[data-id='${cmId}']`);\n        this._disableLink(currentElement);\n\n        // Setup keyboard navigation.\n        new ContentTree(\n            modalBody.querySelector(this.selectors.CONTENTTREE),\n            {\n                SECTION: this.selectors.SECTIONNODE,\n                TOGGLER: this.selectors.MODALTOGGLER,\n                COLLAPSE: this.selectors.MODALTOGGLER,\n                ENTER: this.selectors.SECTIONLINK,\n            }\n        );\n\n        // Open the cm section node if possible (Bootstrap 4 uses jQuery to interact with collapsibles).\n        // All jQuery int this code can be replaced when MDL-71979 is integrated.\n        const sectionnode = currentElement.closest(this.selectors.SECTIONNODE);\n        const toggler = jQuery(sectionnode).find(this.selectors.MODALTOGGLER);\n        let collapsibleId = toggler.data('target') ?? toggler.attr('href');\n        if (collapsibleId) {\n            // We cannot be sure we have # in the id element name.\n            collapsibleId = collapsibleId.replace('#', '');\n            jQuery(`#${collapsibleId}`).collapse('toggle');\n        }\n\n        // Capture click.\n        modalBody.addEventListener('click', (event) => {\n            const target = event.target;\n            if (!target.matches('a') || target.dataset.for === undefined || target.dataset.id === undefined) {\n                return;\n            }\n            if (target.getAttribute('aria-disabled')) {\n                return;\n            }\n            event.preventDefault();\n\n            // Get draggable data from cm or section to dispatch.\n            let targetSectionId;\n            let targetCmId;\n            if (target.dataset.for == 'cm') {\n                const dropData = exporter.cmDraggableData(this.reactive.state, target.dataset.id);\n                targetSectionId = dropData.sectionid;\n                targetCmId = dropData.nextcmid;\n            } else {\n                const section = this.reactive.get('section', target.dataset.id);\n                targetSectionId = target.dataset.id;\n                targetCmId = section?.cmlist[0];\n            }\n\n            this.reactive.dispatch('cmMove', [cmId], targetSectionId, targetCmId);\n            this._destroyModal(modal, editTools);\n        });\n    }\n\n    /**\n     * Handle a create section request.\n     *\n     * @param {Element} target the dispatch action element\n     * @param {Event} event the triggered event\n     */\n    async _requestAddSection(target, event) {\n        event.preventDefault();\n        this.reactive.dispatch('addSection', target.dataset.id ?? 0);\n    }\n\n    /**\n     * Handle a delete section request.\n     *\n     * @param {Element} target the dispatch action element\n     * @param {Event} event the triggered event\n     */\n    async _requestDeleteSection(target, event) {\n        // Check we have an id.\n        const sectionId = target.dataset.id;\n\n        if (!sectionId) {\n            return;\n        }\n        const sectionInfo = this.reactive.get('section', sectionId);\n\n        event.preventDefault();\n\n        const cmList = sectionInfo.cmlist ?? [];\n        if (cmList.length || sectionInfo.hassummary || sectionInfo.rawtitle) {\n            // We need confirmation if the section has something.\n            const modalParams = {\n                title: getString('confirm', 'core'),\n                body: getString('confirmdeletesection', 'moodle', sectionInfo.title),\n                saveButtonText: getString('delete', 'core'),\n                type: ModalFactory.types.SAVE_CANCEL,\n            };\n\n            const modal = await this._modalBodyRenderedPromise(modalParams);\n\n            modal.getRoot().on(\n                ModalEvents.save,\n                e => {\n                    // Stop the default save button behaviour which is to close the modal.\n                    e.preventDefault();\n                    modal.destroy();\n                    this.reactive.dispatch('sectionDelete', [sectionId]);\n                }\n            );\n            return;\n        } else {\n            // We don't need confirmation to delete empty sections.\n            this.reactive.dispatch('sectionDelete', [sectionId]);\n        }\n    }\n\n    /**\n     * Basic mutation action helper.\n     *\n     * @param {Element} target the dispatch action element\n     * @param {Event} event the triggered event\n     * @param {string} mutationName the mutation name\n     */\n    async _requestMutationAction(target, event, mutationName) {\n        if (!target.dataset.id) {\n            return;\n        }\n        event.preventDefault();\n        this.reactive.dispatch(mutationName, [target.dataset.id]);\n    }\n\n    /**\n     * Disable all add sections actions.\n     *\n     * @param {boolean} locked the new locked value.\n     */\n    _setAddSectionLocked(locked) {\n        const targets = this.getElements(this.selectors.ADDSECTION);\n        targets.forEach(element => {\n            element.classList.toggle(this.classes.DISABLED, locked);\n            this.setElementLocked(element, locked);\n        });\n    }\n\n    /**\n     * Replace an element with a copy with a different tag name.\n     *\n     * @param {Element} element the original element\n     */\n    _disableLink(element) {\n        if (element) {\n            element.style.pointerEvents = 'none';\n            element.style.userSelect = 'none';\n            element.classList.add(this.classes.DISABLED);\n            element.setAttribute('aria-disabled', true);\n            element.addEventListener('click', event => event.preventDefault());\n        }\n    }\n\n    /**\n     * Render a modal and return a body ready promise.\n     *\n     * @param {object} modalParams the modal params\n     * @return {Promise} the modal body ready promise\n     */\n    _modalBodyRenderedPromise(modalParams) {\n        return new Promise((resolve, reject) => {\n            ModalFactory.create(modalParams).then((modal) => {\n                modal.setRemoveOnClose(true);\n                // Handle body loading event.\n                modal.getRoot().on(ModalEvents.bodyRendered, () => {\n                    resolve(modal);\n                });\n                // Configure some extra modal params.\n                if (modalParams.saveButtonText !== undefined) {\n                    modal.setSaveButtonText(modalParams.saveButtonText);\n                }\n                modal.show();\n                return;\n            }).catch(() => {\n                reject(`Cannot load modal content`);\n            });\n        });\n    }\n\n    /**\n     * Hide and later destroy a modal.\n     *\n     * Behat will fail if we remove the modal while some boostrap collapse is executing.\n     *\n     * @param {Modal} modal\n     * @param {HTMLElement} element the dom element to focus on.\n     */\n    _destroyModal(modal, element) {\n        modal.hide();\n        const pendingDestroy = new Pending(`courseformat/actions:destroyModal`);\n        if (element) {\n            element.focus();\n        }\n        setTimeout(() =>{\n            modal.destroy();\n            pendingDestroy.resolve();\n        }, 500);\n    }\n\n    /**\n     * Get the closest actions menu toggler to an action element.\n     *\n     * @param {HTMLElement} element the action link element\n     * @returns {HTMLElement|undefined}\n     */\n    _getClosestActionMenuToogler(element) {\n        const actionMenu = element.closest(this.selectors.ACTIONMENU);\n        if (!actionMenu) {\n            return undefined;\n        }\n        return actionMenu.querySelector(this.selectors.ACTIONMENUTOGGLER);\n    }\n}\n"],"names":["_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","_interopRequireDefault","obj","__esModule","default","_modal_factory","_modal_events","_templates","CourseEvents","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_interopRequireWildcard","_pending","_contenttree","_jquery","prefetchStrings","directMutations","sectionHide","sectionShow","cmHide","cmShow","cmStealth","_default","BaseComponent","create","this","name","selectors","ACTIONLINK","SECTIONLINK","CMLINK","SECTIONNODE","MODALTOGGLER","ADDSECTION","CONTENTTREE","ACTIONMENU","ACTIONMENUTOGGLER","classes","DISABLED","static","actions","action","mutationReference","entries","Error","concat","stateReady","state","addEventListener","element","_dispatchClick","_checkSectionlist","sectionRefreshed","getWatchers","watch","handler","event","target","closest","classList","contains","preventDefault","actionName","dataset","methodName","_actionMethodName","undefined","_requestMutationAction","requestName","charAt","toUpperCase","slice","_ref","_setAddSectionLocked","course","sectionlist","length","maxsections","async","sectionId","id","sectionInfo","reactive","editTools","_getClosestActionMenuToogler","data","getExporter","sectionid","sectiontitle","title","modalParams","getString","body","Templates","render","modal","_modalBodyRenderedPromise","modalBody","getList","getBody","currentElement","querySelector","_disableLink","generalSection","ContentTree","SECTION","TOGGLER","COLLAPSE","matches","for","getAttribute","dispatch","_destroyModal","_toggler$data","cmId","cmInfo","exporter","cmid","cmname","ENTER","sectionnode","toggler","jQuery","find","collapsibleId","attr","replace","collapse","targetSectionId","targetCmId","dropData","cmDraggableData","nextcmid","section","cmlist","_target$dataset$id","_sectionInfo$cmlist","hassummary","rawtitle","saveButtonText","type","ModalFactory","types","SAVE_CANCEL","getRoot","on","ModalEvents","save","e","destroy","mutationName","locked","getElements","forEach","toggle","setElementLocked","style","pointerEvents","userSelect","add","setAttribute","Promise","resolve","reject","then","setRemoveOnClose","bodyRendered","setSaveButtonText","show","catch","hide","pendingDestroy","Pending","focus","setTimeout","actionMenu","_exports"],"mappings":"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"}