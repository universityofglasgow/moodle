{"version":3,"file":"selectors.min.js","sources":["../../src/datafilter/selectors.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Module containing the selectors for user filters.\n *\n * @module     core/datafilter/selectors\n * @copyright  2020 Michael Hawkins <michaelh@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nconst getFilterRegion = region => `[data-filterregion=\"${region}\"]`;\nconst getFilterAction = action => `[data-filteraction=\"${action}\"]`;\nconst getFilterField = field => `[data-filterfield=\"${field}\"]`;\n\nexport default {\n    filter: {\n        region: getFilterRegion('filter'),\n        actions: {\n            remove: getFilterAction('remove'),\n        },\n        fields: {\n            join: getFilterField('join'),\n            type: getFilterField('type'),\n        },\n        regions: {\n            values: getFilterRegion('value'),\n        },\n        byName: name => `${getFilterRegion('filter')}[data-filter-type=\"${name}\"]`,\n    },\n    filterset: {\n        region: getFilterRegion('actions'),\n        actions: {\n            addRow: getFilterAction('add'),\n            applyFilters: getFilterAction('apply'),\n            resetFilters: getFilterAction('reset'),\n        },\n        regions: {\n            filtermatch: getFilterRegion('filtermatch'),\n            filterlist: getFilterRegion('filters'),\n            datasource: getFilterRegion('filtertypedata'),\n        },\n        fields: {\n            join: `${getFilterRegion('filtermatch')} ${getFilterField('join')}`,\n        },\n    },\n    data: {\n        fields: {\n            byName: name => `[data-field-name=\"${name}\"]`,\n            all: `${getFilterRegion('filtertypedata')} [data-field-name]`,\n        },\n        typeList: getFilterRegion('filtertypelist'),\n        typeListSelect: `select${getFilterRegion('filtertypelist')}`,\n    },\n};\n"],"names":["getFilterRegion","region","concat","getFilterAction","action","getFilterField","field","_default","filter","actions","remove","fields","join","type","regions","values","byName","name","filterset","addRow","applyFilters","resetFilters","filtermatch","filterlist","datasource","data","all","typeList","typeListSelect","_exports","default"],"mappings":";;;;;;;;AAuBA,MAAMA,gBAAkBC,+BAAMC,OAA2BD,OAAU,MAC7DE,gBAAkBC,+BAAMF,OAA2BE,OAAU,MAC7DC,eAAiBC,6BAAKJ,OAA0BI,MAAS,MAAC,IAAAC,SAEjD,CACXC,OAAQ,CACJP,OAAQD,gBAAgB,UACxBS,QAAS,CACLC,OAAQP,gBAAgB,WAE5BQ,OAAQ,CACJC,KAAMP,eAAe,QACrBQ,KAAMR,eAAe,SAEzBS,QAAS,CACLC,OAAQf,gBAAgB,UAE5BgB,OAAQC,MAAIf,GAAAA,OAAOF,gBAAgB,UAAS,uBAAAE,OAAsBe,KAAI,OAE1EC,UAAW,CACPjB,OAAQD,gBAAgB,WACxBS,QAAS,CACLU,OAAQhB,gBAAgB,OACxBiB,aAAcjB,gBAAgB,SAC9BkB,aAAclB,gBAAgB,UAElCW,QAAS,CACLQ,YAAatB,gBAAgB,eAC7BuB,WAAYvB,gBAAgB,WAC5BwB,WAAYxB,gBAAgB,mBAEhCW,OAAQ,CACJC,KAAIV,GAAAA,OAAKF,gBAAgB,eAAc,KAAAE,OAAIG,eAAe,WAGlEoB,KAAM,CACFd,OAAQ,CACJK,OAAQC,MAAI,qBAAAf,OAAyBe,KAAQ,MAC7CS,OAAGxB,OAAKF,gBAAgB,kBAAiB,uBAE7C2B,SAAU3B,gBAAgB,kBAC1B4B,wBAAc1B,OAAWF,gBAAgB,qBAEhD,OAAA6B,SAAAC,QAAAvB,SAAAsB,SAAAC,OAAA"}