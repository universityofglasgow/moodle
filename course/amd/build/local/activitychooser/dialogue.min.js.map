{"version":3,"file":"dialogue.min.js","sources":["../../../src/local/activitychooser/dialogue.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * A type of dialogue used as for choosing options.\n *\n * @module     core_course/local/chooser/dialogue\n * @copyright  2019 Mihail Geshoski <mihail@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport $ from 'jquery';\nimport * as ModalEvents from 'core/modal_events';\nimport selectors from 'core_course/local/activitychooser/selectors';\nimport * as Templates from 'core/templates';\nimport {end, arrowLeft, arrowRight, home, enter, space} from 'core/key_codes';\nimport {addIconToContainer} from 'core/loadingicon';\nimport * as Repository from 'core_course/local/activitychooser/repository';\nimport Notification from 'core/notification';\nimport {debounce} from 'core/utils';\nconst getPlugin = pluginName => import(pluginName);\n\n/**\n * Given an event from the main module 'page' navigate to it's help section via a carousel.\n *\n * @method showModuleHelp\n * @param {jQuery} carousel Our initialized carousel to manipulate\n * @param {Object} moduleData Data of the module to carousel to\n * @param {jQuery} modal We need to figure out if the current modal has a footer.\n */\nconst showModuleHelp = (carousel, moduleData, modal = null) => {\n    // If we have a real footer then we need to change temporarily.\n    if (modal !== null && moduleData.showFooter === true) {\n        modal.setFooter(Templates.render('core_course/local/activitychooser/footer_partial', moduleData));\n    }\n    const help = carousel.find(selectors.regions.help)[0];\n    help.innerHTML = '';\n    help.classList.add('m-auto');\n\n    // Add a spinner.\n    const spinnerPromise = addIconToContainer(help);\n\n    // Used later...\n    let transitionPromiseResolver = null;\n    const transitionPromise = new Promise(resolve => {\n        transitionPromiseResolver = resolve;\n    });\n\n    // Build up the html & js ready to place into the help section.\n    const contentPromise = Templates.renderForPromise('core_course/local/activitychooser/help', moduleData);\n\n    // Wait for the content to be ready, and for the transition to be complet.\n    Promise.all([contentPromise, spinnerPromise, transitionPromise])\n        .then(([{html, js}]) => Templates.replaceNodeContents(help, html, js))\n        .then(() => {\n            help.querySelector(selectors.regions.chooserSummary.header).focus();\n            return help;\n        })\n        .catch(Notification.exception);\n\n    // Move to the next slide, and resolve the transition promise when it's done.\n    carousel.one('slid.bs.carousel', () => {\n        transitionPromiseResolver();\n    });\n    // Trigger the transition between 'pages'.\n    carousel.carousel('next');\n};\n\n/**\n * Given a user wants to change the favourite state of a module we either add or remove the status.\n * We also propergate this change across our map of modals.\n *\n * @method manageFavouriteState\n * @param {HTMLElement} modalBody The DOM node of the modal to manipulate\n * @param {HTMLElement} caller\n * @param {Function} partialFavourite Partially applied function we need to manage favourite status\n */\nconst manageFavouriteState = async(modalBody, caller, partialFavourite) => {\n    const isFavourite = caller.dataset.favourited;\n    const id = caller.dataset.id;\n    const name = caller.dataset.name;\n    const internal = caller.dataset.internal;\n    // Switch on fave or not.\n    if (isFavourite === 'true') {\n        await Repository.unfavouriteModule(name, id);\n\n        partialFavourite(internal, false, modalBody);\n    } else {\n        await Repository.favouriteModule(name, id);\n\n        partialFavourite(internal, true, modalBody);\n    }\n\n};\n\n/**\n * Register chooser related event listeners.\n *\n * @method registerListenerEvents\n * @param {Promise} modal Our modal that we are working with\n * @param {Map} mappedModules A map of all of the modules we are working with with K: mod_name V: {Object}\n * @param {Function} partialFavourite Partially applied function we need to manage favourite status\n * @param {Object} footerData Our base footer object.\n */\nconst registerListenerEvents = (modal, mappedModules, partialFavourite, footerData) => {\n    const bodyClickListener = async(e) => {\n        if (e.target.closest(selectors.actions.optionActions.showSummary)) {\n            const carousel = $(modal.getBody()[0].querySelector(selectors.regions.carousel));\n\n            const module = e.target.closest(selectors.regions.chooserOption.container);\n            const moduleName = module.dataset.modname;\n            const moduleData = mappedModules.get(moduleName);\n            // We need to know if the overall modal has a footer so we know when to show a real / vs fake footer.\n            moduleData.showFooter = modal.hasFooterContent();\n            showModuleHelp(carousel, moduleData, modal);\n        }\n\n        if (e.target.closest(selectors.actions.optionActions.manageFavourite)) {\n            const caller = e.target.closest(selectors.actions.optionActions.manageFavourite);\n            await manageFavouriteState(modal.getBody()[0], caller, partialFavourite);\n            const activeSectionId = modal.getBody()[0].querySelector(selectors.elements.activetab).getAttribute(\"href\");\n            const sectionChooserOptions = modal.getBody()[0]\n                .querySelector(selectors.regions.getSectionChooserOptions(activeSectionId));\n            const firstChooserOption = sectionChooserOptions\n                .querySelector(selectors.regions.chooserOption.container);\n            toggleFocusableChooserOption(firstChooserOption, true);\n            initChooserOptionsKeyboardNavigation(modal.getBody()[0], mappedModules, sectionChooserOptions, modal);\n        }\n\n        // From the help screen go back to the module overview.\n        if (e.target.matches(selectors.actions.closeOption)) {\n            const carousel = $(modal.getBody()[0].querySelector(selectors.regions.carousel));\n\n            // Trigger the transition between 'pages'.\n            carousel.carousel('prev');\n            carousel.on('slid.bs.carousel', () => {\n                const allModules = modal.getBody()[0].querySelector(selectors.regions.modules);\n                const caller = allModules.querySelector(selectors.regions.getModuleSelector(e.target.dataset.modname));\n                caller.focus();\n            });\n        }\n\n        // The \"clear search\" button is triggered.\n        if (e.target.closest(selectors.actions.clearSearch)) {\n            // Clear the entered search query in the search bar and hide the search results container.\n            const searchInput = modal.getBody()[0].querySelector(selectors.actions.search);\n            searchInput.value = \"\";\n            searchInput.focus();\n            toggleSearchResultsView(modal, mappedModules, searchInput.value);\n        }\n    };\n\n    // We essentially have two types of footer.\n    // A fake one that is handled within the template for chooser_help and then all of the stuff for\n    // modal.footer. We need to ensure we know exactly what type of footer we are using so we know what we\n    // need to manage. The below code handles a real footer going to a mnet carousel item.\n    const footerClickListener = async(e) => {\n        if (footerData.footer === true) {\n            const footerjs = await getPlugin(footerData.customfooterjs);\n            await footerjs.footerClickListener(e, footerData, modal);\n        }\n    };\n\n    modal.getBodyPromise()\n\n    // The return value of getBodyPromise is a jquery object containing the body NodeElement.\n    .then(body => body[0])\n\n    // Set up the carousel.\n    .then(body => {\n        $(body.querySelector(selectors.regions.carousel))\n            .carousel({\n                interval: false,\n                pause: true,\n                keyboard: false\n            });\n\n        return body;\n    })\n\n    // Add the listener for clicks on the body.\n    .then(body => {\n        body.addEventListener('click', bodyClickListener);\n        return body;\n    })\n\n    // Add a listener for an input change in the activity chooser's search bar.\n    .then(body => {\n        const searchInput = body.querySelector(selectors.actions.search);\n        // The search input is triggered.\n        searchInput.addEventListener('input', debounce(() => {\n            // Display the search results.\n            toggleSearchResultsView(modal, mappedModules, searchInput.value);\n        }, 300));\n        return body;\n    })\n\n    // Register event listeners related to the keyboard navigation controls.\n    .then(body => {\n        // Get the active chooser options section.\n        const activeSectionId = body.querySelector(selectors.elements.activetab).getAttribute(\"href\");\n        const sectionChooserOptions = body.querySelector(selectors.regions.getSectionChooserOptions(activeSectionId));\n        const firstChooserOption = sectionChooserOptions.querySelector(selectors.regions.chooserOption.container);\n\n        toggleFocusableChooserOption(firstChooserOption, true);\n        initChooserOptionsKeyboardNavigation(body, mappedModules, sectionChooserOptions, modal);\n\n        return body;\n    })\n    .catch();\n\n    modal.getFooterPromise()\n\n    // The return value of getBodyPromise is a jquery object containing the body NodeElement.\n    .then(footer => footer[0])\n    // Add the listener for clicks on the footer.\n    .then(footer => {\n        footer.addEventListener('click', footerClickListener);\n        return footer;\n    })\n    .catch();\n};\n\n/**\n * Initialise the keyboard navigation controls for the chooser options.\n *\n * @method initChooserOptionsKeyboardNavigation\n * @param {HTMLElement} body Our modal that we are working with\n * @param {Map} mappedModules A map of all of the modules we are working with with K: mod_name V: {Object}\n * @param {HTMLElement} chooserOptionsContainer The section that contains the chooser items\n * @param {Object} modal Our created modal for the section\n */\nconst initChooserOptionsKeyboardNavigation = (body, mappedModules, chooserOptionsContainer, modal = null) => {\n    const chooserOptions = chooserOptionsContainer.querySelectorAll(selectors.regions.chooserOption.container);\n\n    Array.from(chooserOptions).forEach((element) => {\n        return element.addEventListener('keydown', (e) => {\n\n            // Check for enter/ space triggers for showing the help.\n            if (e.keyCode === enter || e.keyCode === space) {\n                if (e.target.matches(selectors.actions.optionActions.showSummary)) {\n                    e.preventDefault();\n                    const module = e.target.closest(selectors.regions.chooserOption.container);\n                    const moduleName = module.dataset.modname;\n                    const moduleData = mappedModules.get(moduleName);\n                    const carousel = $(body.querySelector(selectors.regions.carousel));\n                    carousel.carousel({\n                        interval: false,\n                        pause: true,\n                        keyboard: false\n                    });\n\n                    // We need to know if the overall modal has a footer so we know when to show a real / vs fake footer.\n                    moduleData.showFooter = modal.hasFooterContent();\n                    showModuleHelp(carousel, moduleData, modal);\n                }\n            }\n\n            // Next.\n            if (e.keyCode === arrowRight) {\n                e.preventDefault();\n                const currentOption = e.target.closest(selectors.regions.chooserOption.container);\n                const nextOption = currentOption.nextElementSibling;\n                const firstOption = chooserOptionsContainer.firstElementChild;\n                const toFocusOption = clickErrorHandler(nextOption, firstOption);\n                focusChooserOption(toFocusOption, currentOption);\n            }\n\n            // Previous.\n            if (e.keyCode === arrowLeft) {\n                e.preventDefault();\n                const currentOption = e.target.closest(selectors.regions.chooserOption.container);\n                const previousOption = currentOption.previousElementSibling;\n                const lastOption = chooserOptionsContainer.lastElementChild;\n                const toFocusOption = clickErrorHandler(previousOption, lastOption);\n                focusChooserOption(toFocusOption, currentOption);\n            }\n\n            if (e.keyCode === home) {\n                e.preventDefault();\n                const currentOption = e.target.closest(selectors.regions.chooserOption.container);\n                const firstOption = chooserOptionsContainer.firstElementChild;\n                focusChooserOption(firstOption, currentOption);\n            }\n\n            if (e.keyCode === end) {\n                e.preventDefault();\n                const currentOption = e.target.closest(selectors.regions.chooserOption.container);\n                const lastOption = chooserOptionsContainer.lastElementChild;\n                focusChooserOption(lastOption, currentOption);\n            }\n        });\n    });\n};\n\n/**\n * Focus on a chooser option element and remove the previous chooser element from the focus order\n *\n * @method focusChooserOption\n * @param {HTMLElement} currentChooserOption The current chooser option element that we want to focus\n * @param {HTMLElement|null} previousChooserOption The previous focused option element\n */\nconst focusChooserOption = (currentChooserOption, previousChooserOption = null) => {\n    if (previousChooserOption !== null) {\n        toggleFocusableChooserOption(previousChooserOption, false);\n    }\n\n    toggleFocusableChooserOption(currentChooserOption, true);\n    currentChooserOption.focus();\n};\n\n/**\n * Add or remove a chooser option from the focus order.\n *\n * @method toggleFocusableChooserOption\n * @param {HTMLElement} chooserOption The chooser option element which should be added or removed from the focus order\n * @param {Boolean} isFocusable Whether the chooser element is focusable or not\n */\nconst toggleFocusableChooserOption = (chooserOption, isFocusable) => {\n    const chooserOptionLink = chooserOption.querySelector(selectors.actions.addChooser);\n    const chooserOptionHelp = chooserOption.querySelector(selectors.actions.optionActions.showSummary);\n    const chooserOptionFavourite = chooserOption.querySelector(selectors.actions.optionActions.manageFavourite);\n\n    if (isFocusable) {\n        // Set tabindex to 0 to add current chooser option element to the focus order.\n        chooserOption.tabIndex = 0;\n        chooserOptionLink.tabIndex = 0;\n        chooserOptionHelp.tabIndex = 0;\n        chooserOptionFavourite.tabIndex = 0;\n    } else {\n        // Set tabindex to -1 to remove the previous chooser option element from the focus order.\n        chooserOption.tabIndex = -1;\n        chooserOptionLink.tabIndex = -1;\n        chooserOptionHelp.tabIndex = -1;\n        chooserOptionFavourite.tabIndex = -1;\n    }\n};\n\n/**\n * Small error handling function to make sure the navigated to object exists\n *\n * @method clickErrorHandler\n * @param {HTMLElement} item What we want to check exists\n * @param {HTMLElement} fallback If we dont match anything fallback the focus\n * @return {HTMLElement}\n */\nconst clickErrorHandler = (item, fallback) => {\n    if (item !== null) {\n        return item;\n    } else {\n        return fallback;\n    }\n};\n\n/**\n * Render the search results in a defined container\n *\n * @method renderSearchResults\n * @param {HTMLElement} searchResultsContainer The container where the data should be rendered\n * @param {Object} searchResultsData Data containing the module items that satisfy the search criteria\n */\nconst renderSearchResults = async(searchResultsContainer, searchResultsData) => {\n    const templateData = {\n        'searchresultsnumber': searchResultsData.length,\n        'searchresults': searchResultsData\n    };\n    // Build up the html & js ready to place into the help section.\n    const {html, js} = await Templates.renderForPromise('core_course/local/activitychooser/search_results', templateData);\n    await Templates.replaceNodeContents(searchResultsContainer, html, js);\n};\n\n/**\n * Toggle (display/hide) the search results depending on the value of the search query\n *\n * @method toggleSearchResultsView\n * @param {Object} modal Our created modal for the section\n * @param {Map} mappedModules A map of all of the modules we are working with with K: mod_name V: {Object}\n * @param {String} searchQuery The search query\n */\nconst toggleSearchResultsView = async(modal, mappedModules, searchQuery) => {\n    const modalBody = modal.getBody()[0];\n    const searchResultsContainer = modalBody.querySelector(selectors.regions.searchResults);\n    const chooserContainer = modalBody.querySelector(selectors.regions.chooser);\n    const clearSearchButton = modalBody.querySelector(selectors.actions.clearSearch);\n\n    if (searchQuery.length > 0) { // Search query is present.\n        const searchResultsData = searchModules(mappedModules, searchQuery);\n        await renderSearchResults(searchResultsContainer, searchResultsData);\n        const searchResultItemsContainer = searchResultsContainer.querySelector(selectors.regions.searchResultItems);\n        const firstSearchResultItem = searchResultItemsContainer.querySelector(selectors.regions.chooserOption.container);\n        if (firstSearchResultItem) {\n            // Set the first result item to be focusable.\n            toggleFocusableChooserOption(firstSearchResultItem, true);\n            // Register keyboard events on the created search result items.\n            initChooserOptionsKeyboardNavigation(modalBody, mappedModules, searchResultItemsContainer, modal);\n        }\n        // Display the \"clear\" search button in the activity chooser search bar.\n        clearSearchButton.classList.remove('d-none');\n        // Hide the default chooser options container.\n        chooserContainer.setAttribute('hidden', 'hidden');\n        // Display the search results container.\n        searchResultsContainer.removeAttribute('hidden');\n    } else { // Search query is not present.\n        // Hide the \"clear\" search button in the activity chooser search bar.\n        clearSearchButton.classList.add('d-none');\n        // Hide the search results container.\n        searchResultsContainer.setAttribute('hidden', 'hidden');\n        // Display the default chooser options container.\n        chooserContainer.removeAttribute('hidden');\n    }\n};\n\n/**\n * Return the list of modules which have a name or description that matches the given search term.\n *\n * @method searchModules\n * @param {Array} modules List of available modules\n * @param {String} searchTerm The search term to match\n * @return {Array}\n */\nconst searchModules = (modules, searchTerm) => {\n    if (searchTerm === '') {\n        return modules;\n    }\n    searchTerm = searchTerm.toLowerCase();\n    const searchResults = [];\n    modules.forEach((activity) => {\n        const activityName = activity.title.toLowerCase();\n        const activityDesc = activity.help.toLowerCase();\n        if (activityName.includes(searchTerm) || activityDesc.includes(searchTerm)) {\n            searchResults.push(activity);\n        }\n    });\n\n    return searchResults;\n};\n\n/**\n * Set up our tabindex information across the chooser.\n *\n * @method setupKeyboardAccessibility\n * @param {Promise} modal Our created modal for the section\n * @param {Map} mappedModules A map of all of the built module information\n */\nconst setupKeyboardAccessibility = (modal, mappedModules) => {\n    modal.getModal()[0].tabIndex = -1;\n\n    modal.getBodyPromise().then(body => {\n        $(selectors.elements.tab).on('shown.bs.tab', (e) => {\n            const activeSectionId = e.target.getAttribute(\"href\");\n            const activeSectionChooserOptions = body[0]\n                .querySelector(selectors.regions.getSectionChooserOptions(activeSectionId));\n            const firstChooserOption = activeSectionChooserOptions\n                .querySelector(selectors.regions.chooserOption.container);\n            const prevActiveSectionId = e.relatedTarget.getAttribute(\"href\");\n            const prevActiveSectionChooserOptions = body[0]\n                .querySelector(selectors.regions.getSectionChooserOptions(prevActiveSectionId));\n\n            // Disable the focus of every chooser option in the previous active section.\n            disableFocusAllChooserOptions(prevActiveSectionChooserOptions);\n            // Enable the focus of the first chooser option in the current active section.\n            toggleFocusableChooserOption(firstChooserOption, true);\n            initChooserOptionsKeyboardNavigation(body[0], mappedModules, activeSectionChooserOptions, modal);\n        });\n        return;\n    }).catch(Notification.exception);\n};\n\n/**\n * Disable the focus of all chooser options in a specific container (section).\n *\n * @method disableFocusAllChooserOptions\n * @param {HTMLElement} sectionChooserOptions The section that contains the chooser items\n */\nconst disableFocusAllChooserOptions = (sectionChooserOptions) => {\n    const allChooserOptions = sectionChooserOptions.querySelectorAll(selectors.regions.chooserOption.container);\n    allChooserOptions.forEach((chooserOption) => {\n        toggleFocusableChooserOption(chooserOption, false);\n    });\n};\n\n/**\n * Display the module chooser.\n *\n * @method displayChooser\n * @param {Promise} modalPromise Our created modal for the section\n * @param {Array} sectionModules An array of all of the built module information\n * @param {Function} partialFavourite Partially applied function we need to manage favourite status\n * @param {Object} footerData Our base footer object.\n */\nexport const displayChooser = (modalPromise, sectionModules, partialFavourite, footerData) => {\n    // Make a map so we can quickly fetch a specific module's object for either rendering or searching.\n    const mappedModules = new Map();\n    sectionModules.forEach((module) => {\n        mappedModules.set(module.componentname + '_' + module.link, module);\n    });\n\n    // Register event listeners.\n    modalPromise.then(modal => {\n        registerListenerEvents(modal, mappedModules, partialFavourite, footerData);\n\n        // We want to focus on the first chooser option element as soon as the modal is opened.\n        setupKeyboardAccessibility(modal, mappedModules);\n\n        // We want to focus on the action select when the dialog is closed.\n        modal.getRoot().on(ModalEvents.hidden, () => {\n            modal.destroy();\n        });\n\n        return modal;\n    }).catch();\n};\n"],"names":["_jquery","_interopRequireDefault","ModalEvents","_interopRequireWildcard","_selectors","Templates","Repository","_notification","_systemImportTransformerGlobalIdentifier","window","self","global","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","showModuleHelp","carousel","moduleData","modal","arguments","length","undefined","showFooter","setFooter","render","help","find","selectors","regions","innerHTML","classList","add","spinnerPromise","addIconToContainer","transitionPromiseResolver","transitionPromise","Promise","resolve","contentPromise","renderForPromise","all","then","_ref","html","js","replaceNodeContents","querySelector","chooserSummary","header","focus","catch","Notification","exception","one","registerListenerEvents","mappedModules","partialFavourite","footerData","bodyClickListener","async","e","target","closest","actions","optionActions","showSummary","$","getBody","moduleName","chooserOption","container","dataset","modname","hasFooterContent","manageFavourite","caller","modalBody","isFavourite","favourited","id","name","internal","unfavouriteModule","favouriteModule","manageFavouriteState","activeSectionId","elements","activetab","getAttribute","sectionChooserOptions","getSectionChooserOptions","firstChooserOption","toggleFocusableChooserOption","initChooserOptionsKeyboardNavigation","matches","closeOption","on","modules","getModuleSelector","clearSearch","searchInput","search","value","toggleSearchResultsView","footerClickListener","footer","footerjs","pluginName","customfooterjs","define","amd","reject","require","module","exports","component","loader","getBodyPromise","body","interval","pause","keyboard","addEventListener","debounce","getFooterPromise","chooserOptionsContainer","chooserOptions","querySelectorAll","Array","from","forEach","element","keyCode","enter","space","preventDefault","arrowRight","currentOption","nextOption","nextElementSibling","firstOption","firstElementChild","toFocusOption","clickErrorHandler","focusChooserOption","arrowLeft","previousOption","previousElementSibling","lastOption","lastElementChild","home","end","currentChooserOption","previousChooserOption","isFocusable","chooserOptionLink","addChooser","chooserOptionHelp","chooserOptionFavourite","tabIndex","item","fallback","searchQuery","searchResultsContainer","searchResults","chooserContainer","chooser","clearSearchButton","searchResultsData","searchModules","templateData","searchresultsnumber","searchresults","renderSearchResults","searchResultItemsContainer","searchResultItems","firstSearchResultItem","remove","setAttribute","removeAttribute","searchTerm","toLowerCase","activity","activityName","title","activityDesc","includes","push","disableFocusAllChooserOptions","_exports","displayChooser","modalPromise","sectionModules","Map","componentname","link","setupKeyboardAccessibility","getModal","tab","activeSectionChooserOptions","prevActiveSectionId","relatedTarget","prevActiveSectionChooserOptions","getRoot","hidden","destroy"],"mappings":"4dAuBAA,QAAAC,uBAAAD,SACAE,YAAAC,wBAAAD,aACAE,WAAAH,uBAAAG,YACAC,UAAAF,wBAAAE,WAGAC,WAAAH,wBAAAG,YACAC,cAAAN,uBAAAM,eAA6C,IAAAC,yCAAA,oBAAAC,OAAAA,OAAA,oBAAAC,KAAAA,KAAA,oBAAAC,OAAAA,OAAA,CAAA,EAAA,SAAAC,yBAAAC,aAAA,GAAA,mBAAAC,QAAA,OAAA,KAAA,IAAAC,kBAAAD,IAAAA,QAAAE,iBAAAF,IAAAA,eAAAF,yBAAA,SAAAC,aAAAA,OAAAA,YAAAG,iBAAAD,oBAAAF,YAAA,CAAA,SAAAV,wBAAAc,IAAAJ,aAAAA,IAAAA,aAAAI,KAAAA,IAAAC,WAAAD,OAAAA,IAAAA,GAAAA,OAAAA,KAAAA,iBAAAA,KAAAE,mBAAAF,IAAAE,MAAAA,CAAAA,QAAAF,KAAAG,IAAAA,MAAAR,yBAAAC,aAAA,GAAAO,OAAAA,MAAAC,IAAAJ,KAAA,OAAAG,MAAAE,IAAAL,KAAA,IAAAM,OAAAC,GAAAA,sBAAAC,OAAAC,gBAAAD,OAAAE,yBAAAC,IAAAA,IAAAA,OAAAX,IAAAW,eAAAA,KAAAH,OAAAI,UAAAC,eAAAC,KAAAd,IAAAW,KAAA,CAAA,IAAAI,KAAAR,sBAAAC,OAAAE,yBAAAV,IAAAW,KAAAI,KAAAA,OAAAA,KAAAV,KAAAU,KAAAC,KAAAR,OAAAC,eAAAH,OAAAK,IAAAI,MAAAT,OAAAK,KAAAX,IAAAW,IAAAL,QAAAA,OAAAJ,QAAAF,IAAAG,OAAAA,MAAAa,IAAAhB,IAAAM,QAAAA,MAAA,CAAA,SAAAtB,uBAAAgB,KAAAA,OAAAA,KAAAA,IAAAC,WAAAD,IAAAE,CAAAA,QAAAF,IAAA,CAE7C,MAUMiB,eAAiB,SAACC,SAAUC,YAA6B,IAAjBC,MAAKC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,KAEpC,OAAVD,QAA4C,IAA1BD,WAAWK,YAC7BJ,MAAMK,UAAUrC,UAAUsC,OAAO,mDAAoDP,aAEzF,MAAMQ,KAAOT,SAASU,KAAKC,WAAAA,QAAUC,QAAQH,MAAM,GACnDA,KAAKI,UAAY,GACjBJ,KAAKK,UAAUC,IAAI,UAGnB,MAAMC,gBAAiB,EAAAC,aAAkBA,oBAACR,MAG1C,IAAIS,0BAA4B,KAChC,MAAMC,kBAAoB,IAAIC,SAAQC,UAClCH,0BAA4BG,OAAO,IAIjCC,eAAiBpD,UAAUqD,iBAAiB,yCAA0CtB,YAG5FmB,QAAQI,IAAI,CAACF,eAAgBN,eAAgBG,oBACxCM,MAAKC,OAAA,KAAEC,KAACA,KAAIC,GAAEA,KAAIF,KAAA,OAAKxD,UAAU2D,oBAAoBpB,KAAMkB,KAAMC,GAAG,IACpEH,MAAK,KACFhB,KAAKqB,cAAcnB,WAAAA,QAAUC,QAAQmB,eAAeC,QAAQC,QACrDxB,QAEVyB,MAAMC,cAAYnD,QAACoD,WAGxBpC,SAASqC,IAAI,oBAAoB,KAC7BnB,2BAA2B,IAG/BlB,SAASA,SAAS,SAuChBsC,uBAAyBA,CAACpC,MAAOqC,cAAeC,iBAAkBC,cACpE,MAAMC,kBAAoBC,UACtB,GAAIC,EAAEC,OAAOC,QAAQnC,WAAAA,QAAUoC,QAAQC,cAAcC,aAAc,CAC/D,MAAMjD,UAAW,EAAAkD,QAAAA,SAAEhD,MAAMiD,UAAU,GAAGrB,cAAcnB,WAAAA,QAAUC,QAAQZ,WAGhEoD,WADSR,EAAEC,OAAOC,QAAQnC,WAAAA,QAAUC,QAAQyC,cAAcC,WACtCC,QAAQC,QAC5BvD,WAAasC,cAAcpD,IAAIiE,YAErCnD,WAAWK,WAAaJ,MAAMuD,mBAC9B1D,eAAeC,SAAUC,WAAYC,MACzC,CAEA,GAAI0C,EAAEC,OAAOC,QAAQnC,WAAAA,QAAUoC,QAAQC,cAAcU,iBAAkB,CACnE,MAAMC,OAASf,EAAEC,OAAOC,QAAQnC,WAAAA,QAAUoC,QAAQC,cAAcU,sBAzC/Cf,OAAMiB,UAAWD,OAAQnB,oBAClD,MAAMqB,YAAcF,OAAOJ,QAAQO,WAC7BC,GAAKJ,OAAOJ,QAAQQ,GACpBC,KAAOL,OAAOJ,QAAQS,KACtBC,SAAWN,OAAOJ,QAAQU,SAEZ,SAAhBJ,mBACM1F,WAAW+F,kBAAkBF,KAAMD,IAEzCvB,iBAAiByB,UAAU,EAAOL,mBAE5BzF,WAAWgG,gBAAgBH,KAAMD,IAEvCvB,iBAAiByB,UAAU,EAAML,WACrC,EA4BcQ,CAAqBlE,MAAMiD,UAAU,GAAIQ,OAAQnB,kBACvD,MAAM6B,gBAAkBnE,MAAMiD,UAAU,GAAGrB,cAAcnB,WAAS3B,QAACsF,SAASC,WAAWC,aAAa,QAC9FC,sBAAwBvE,MAAMiD,UAAU,GACzCrB,cAAcnB,WAAAA,QAAUC,QAAQ8D,yBAAyBL,kBACxDM,mBAAqBF,sBACtB3C,cAAcnB,WAAS3B,QAAC4B,QAAQyC,cAAcC,WACnDsB,6BAA6BD,oBAAoB,GACjDE,qCAAqC3E,MAAMiD,UAAU,GAAIZ,cAAekC,sBAAuBvE,MACnG,CAGA,GAAI0C,EAAEC,OAAOiC,QAAQnE,WAAS3B,QAAC+D,QAAQgC,aAAc,CACjD,MAAM/E,UAAW,EAAAkD,QAAAA,SAAEhD,MAAMiD,UAAU,GAAGrB,cAAcnB,WAAAA,QAAUC,QAAQZ,WAGtEA,SAASA,SAAS,QAClBA,SAASgF,GAAG,oBAAoB,KACT9E,MAAMiD,UAAU,GAAGrB,cAAcnB,WAAAA,QAAUC,QAAQqE,SAC5CnD,cAAcnB,WAAAA,QAAUC,QAAQsE,kBAAkBtC,EAAEC,OAAOU,QAAQC,UACtFvB,OAAO,GAEtB,CAGA,GAAIW,EAAEC,OAAOC,QAAQnC,WAAS3B,QAAC+D,QAAQoC,aAAc,CAEjD,MAAMC,YAAclF,MAAMiD,UAAU,GAAGrB,cAAcnB,WAAAA,QAAUoC,QAAQsC,QACvED,YAAYE,MAAQ,GACpBF,YAAYnD,QACZsD,wBAAwBrF,MAAOqC,cAAe6C,YAAYE,MAC9D,GAOEE,oBAAsB7C,UACxB,IAA0B,IAAtBF,WAAWgD,OAAiB,CAC5B,MAAMC,eA1IAC,WA0I2BlD,WAAWmD,eA1I5BvH,mBAAAA,yCAAAwH,QAAAxH,yCAAAwH,OAAAC,IAAA,IAAA1E,SAAAC,SAAAA,QAAA0E,QAAA1H,yCAAA2H,QAAA,CAAWL,YAAUtE,QAAA0E,OAAA,IAAAE,oBAAAA,QAAAA,OAAAC,SAAA,oBAAAF,SAAA,oBAAAC,QAAAA,OAAAE,WAAA9H,yCAAA2H,SAAA,cAAA3H,yCAAA2H,QAAAI,OAAAhF,QAAAC,QAAA2E,QAAA,aAAA5E,QAAAC,QAAAhD,yCAAVsH,oBA2IrBD,SAASF,oBAAoB5C,EAAGH,WAAYvC,MACtD,CA5IUyF,cA4IV,EAGJzF,MAAMmG,iBAGL5E,MAAK6E,MAAQA,KAAK,KAGlB7E,MAAK6E,QACF,EAAApD,QAAClE,SAACsH,KAAKxE,cAAcnB,WAAAA,QAAUC,QAAQZ,WAClCA,SAAS,CACNuG,UAAU,EACVC,OAAO,EACPC,UAAU,IAGXH,QAIV7E,MAAK6E,OACFA,KAAKI,iBAAiB,QAAShE,mBACxB4D,QAIV7E,MAAK6E,OACF,MAAMlB,YAAckB,KAAKxE,cAAcnB,WAAAA,QAAUoC,QAAQsC,QAMzD,OAJAD,YAAYsB,iBAAiB,SAAS,EAAAC,OAAAA,WAAS,KAE3CpB,wBAAwBrF,MAAOqC,cAAe6C,YAAYE,MAAM,GACjE,MACIgB,IAAI,IAId7E,MAAK6E,OAEF,MAAMjC,gBAAkBiC,KAAKxE,cAAcnB,WAAS3B,QAACsF,SAASC,WAAWC,aAAa,QAChFC,sBAAwB6B,KAAKxE,cAAcnB,WAAAA,QAAUC,QAAQ8D,yBAAyBL,kBACtFM,mBAAqBF,sBAAsB3C,cAAcnB,WAAS3B,QAAC4B,QAAQyC,cAAcC,WAK/F,OAHAsB,6BAA6BD,oBAAoB,GACjDE,qCAAqCyB,KAAM/D,cAAekC,sBAAuBvE,OAE1EoG,IAAI,IAEdpE,QAEDhC,MAAM0G,mBAGLnF,MAAKgE,QAAUA,OAAO,KAEtBhE,MAAKgE,SACFA,OAAOiB,iBAAiB,QAASlB,qBAC1BC,UAEVvD,OAAO,EAYN2C,qCAAuC,SAACyB,KAAM/D,cAAesE,yBAA0C,IAAjB3G,MAAKC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,KAChG,MAAM2G,eAAiBD,wBAAwBE,iBAAiBpG,WAAS3B,QAAC4B,QAAQyC,cAAcC,WAEhG0D,MAAMC,KAAKH,gBAAgBI,SAASC,SACzBA,QAAQT,iBAAiB,WAAY9D,IAGxC,IAAIA,EAAEwE,UAAYC,WAAAA,OAASzE,EAAEwE,UAAYE,WAAAA,QACjC1E,EAAEC,OAAOiC,QAAQnE,WAAAA,QAAUoC,QAAQC,cAAcC,aAAc,CAC/DL,EAAE2E,iBACF,MACMnE,WADSR,EAAEC,OAAOC,QAAQnC,WAAAA,QAAUC,QAAQyC,cAAcC,WACtCC,QAAQC,QAC5BvD,WAAasC,cAAcpD,IAAIiE,YAC/BpD,UAAW,EAAAkD,QAAAA,SAAEoD,KAAKxE,cAAcnB,mBAAUC,QAAQZ,WACxDA,SAASA,SAAS,CACduG,UAAU,EACVC,OAAO,EACPC,UAAU,IAIdxG,WAAWK,WAAaJ,MAAMuD,mBAC9B1D,eAAeC,SAAUC,WAAYC,MACzC,CAIJ,GAAI0C,EAAEwE,UAAYI,sBAAY,CAC1B5E,EAAE2E,iBACF,MAAME,cAAgB7E,EAAEC,OAAOC,QAAQnC,WAAAA,QAAUC,QAAQyC,cAAcC,WACjEoE,WAAaD,cAAcE,mBAC3BC,YAAcf,wBAAwBgB,kBACtCC,cAAgBC,kBAAkBL,WAAYE,aACpDI,mBAAmBF,cAAeL,cACtC,CAGA,GAAI7E,EAAEwE,UAAYa,qBAAW,CACzBrF,EAAE2E,iBACF,MAAME,cAAgB7E,EAAEC,OAAOC,QAAQnC,WAAAA,QAAUC,QAAQyC,cAAcC,WACjE4E,eAAiBT,cAAcU,uBAC/BC,WAAavB,wBAAwBwB,iBACrCP,cAAgBC,kBAAkBG,eAAgBE,YACxDJ,mBAAmBF,cAAeL,cACtC,CAEA,GAAI7E,EAAEwE,UAAYkB,gBAAM,CACpB1F,EAAE2E,iBACF,MAAME,cAAgB7E,EAAEC,OAAOC,QAAQnC,WAAAA,QAAUC,QAAQyC,cAAcC,WACjEsE,YAAcf,wBAAwBgB,kBAC5CG,mBAAmBJ,YAAaH,cACpC,CAEA,GAAI7E,EAAEwE,UAAYmB,eAAK,CACnB3F,EAAE2E,iBACF,MAAME,cAAgB7E,EAAEC,OAAOC,QAAQnC,WAAAA,QAAUC,QAAQyC,cAAcC,WACjE8E,WAAavB,wBAAwBwB,iBAC3CL,mBAAmBI,WAAYX,cACnC,QAYNO,mBAAqB,SAACQ,sBAAuD,IAAjCC,sBAAqBtI,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,KACxC,OAA1BsI,uBACA7D,6BAA6B6D,uBAAuB,GAGxD7D,6BAA6B4D,sBAAsB,GACnDA,qBAAqBvG,SAUnB2C,6BAA+BA,CAACvB,cAAeqF,eACjD,MAAMC,kBAAoBtF,cAAcvB,cAAcnB,WAAAA,QAAUoC,QAAQ6F,YAClEC,kBAAoBxF,cAAcvB,cAAcnB,WAAS3B,QAAC+D,QAAQC,cAAcC,aAChF6F,uBAAyBzF,cAAcvB,cAAcnB,WAAS3B,QAAC+D,QAAQC,cAAcU,iBAEvFgF,aAEArF,cAAc0F,SAAW,EACzBJ,kBAAkBI,SAAW,EAC7BF,kBAAkBE,SAAW,EAC7BD,uBAAuBC,SAAW,IAGlC1F,cAAc0F,UAAY,EAC1BJ,kBAAkBI,UAAY,EAC9BF,kBAAkBE,UAAY,EAC9BD,uBAAuBC,UAAY,EACvC,EAWEhB,kBAAoBA,CAACiB,KAAMC,WAChB,OAATD,KACOA,KAEAC,SA6BT1D,wBAA0B5C,MAAMzC,MAAOqC,cAAe2G,eACxD,MAAMtF,UAAY1D,MAAMiD,UAAU,GAC5BgG,uBAAyBvF,UAAU9B,cAAcnB,WAAAA,QAAUC,QAAQwI,eACnEC,iBAAmBzF,UAAU9B,cAAcnB,WAAAA,QAAUC,QAAQ0I,SAC7DC,kBAAoB3F,UAAU9B,cAAcnB,WAAAA,QAAUoC,QAAQoC,aAEpE,GAAI+D,YAAY9I,OAAS,EAAG,CACxB,MAAMoJ,kBAAoBC,cAAclH,cAAe2G,kBAzBnCvG,OAAMwG,uBAAwBK,qBACtD,MAAME,aAAe,CACjBC,oBAAuBH,kBAAkBpJ,OACzCwJ,cAAiBJ,oBAGf7H,KAACA,KAAIC,GAAEA,UAAY1D,UAAUqD,iBAAiB,mDAAoDmI,oBAClGxL,UAAU2D,oBAAoBsH,uBAAwBxH,KAAMC,GAAG,EAmB3DiI,CAAoBV,uBAAwBK,mBAClD,MAAMM,2BAA6BX,uBAAuBrH,cAAcnB,WAAAA,QAAUC,QAAQmJ,mBACpFC,sBAAwBF,2BAA2BhI,cAAcnB,WAAS3B,QAAC4B,QAAQyC,cAAcC,WACnG0G,wBAEApF,6BAA6BoF,uBAAuB,GAEpDnF,qCAAqCjB,UAAWrB,cAAeuH,2BAA4B5J,QAG/FqJ,kBAAkBzI,UAAUmJ,OAAO,UAEnCZ,iBAAiBa,aAAa,SAAU,UAExCf,uBAAuBgB,gBAAgB,SAC3C,MAEIZ,kBAAkBzI,UAAUC,IAAI,UAEhCoI,uBAAuBe,aAAa,SAAU,UAE9Cb,iBAAiBc,gBAAgB,SACrC,EAWEV,cAAgBA,CAACxE,QAASmF,cAC5B,GAAmB,KAAfA,WACA,OAAOnF,QAEXmF,WAAaA,WAAWC,cACxB,MAAMjB,cAAgB,GAStB,OARAnE,QAAQiC,SAASoD,WACb,MAAMC,aAAeD,SAASE,MAAMH,cAC9BI,aAAeH,SAAS7J,KAAK4J,eAC/BE,aAAaG,SAASN,aAAeK,aAAaC,SAASN,cAC3DhB,cAAcuB,KAAKL,SACvB,IAGGlB,aAAa,EAwClBwB,8BAAiCnG,wBACTA,sBAAsBsC,iBAAiBpG,WAAS3B,QAAC4B,QAAQyC,cAAcC,WAC/E4D,SAAS7D,gBACvBuB,6BAA6BvB,eAAe,EAAM,GACpD,EAiCJwH,SAAAC,eArB4BA,CAACC,aAAcC,eAAgBxI,iBAAkBC,cAE3E,MAAMF,cAAgB,IAAI0I,IAC1BD,eAAe9D,SAASjB,SACpB1D,cAAczC,IAAImG,OAAOiF,cAAgB,IAAMjF,OAAOkF,KAAMlF,OAAO,IAIvE8E,aAAatJ,MAAKvB,QACdoC,uBAAuBpC,MAAOqC,cAAeC,iBAAkBC,YAvDpC2I,EAAClL,MAAOqC,iBACvCrC,MAAMmL,WAAW,GAAGtC,UAAY,EAEhC7I,MAAMmG,iBAAiB5E,MAAK6E,QACxB,EAAApD,QAAClE,SAAC2B,WAAS3B,QAACsF,SAASgH,KAAKtG,GAAG,gBAAiBpC,IAC1C,MAAMyB,gBAAkBzB,EAAEC,OAAO2B,aAAa,QACxC+G,4BAA8BjF,KAAK,GACpCxE,cAAcnB,WAAAA,QAAUC,QAAQ8D,yBAAyBL,kBACxDM,mBAAqB4G,4BACtBzJ,cAAcnB,WAAS3B,QAAC4B,QAAQyC,cAAcC,WAC7CkI,oBAAsB5I,EAAE6I,cAAcjH,aAAa,QACnDkH,gCAAkCpF,KAAK,GACxCxE,cAAcnB,WAAAA,QAAUC,QAAQ8D,yBAAyB8G,sBAG9DZ,8BAA8Bc,iCAE9B9G,6BAA6BD,oBAAoB,GACjDE,qCAAqCyB,KAAK,GAAI/D,cAAegJ,4BAA6BrL,MAAM,GAEpG,IACDgC,MAAMC,cAAYnD,QAACoD,UAAU,EAqC5BgJ,CAA2BlL,MAAOqC,eAGlCrC,MAAMyL,UAAU3G,GAAGjH,YAAY6N,QAAQ,KACnC1L,MAAM2L,SAAS,IAGZ3L,SACRgC,OAAO,CACZ"}