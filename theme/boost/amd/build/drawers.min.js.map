{"version":3,"file":"drawers.min.js","sources":["../src/drawers.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Toggling the visibility of the secondary navigation on mobile.\n *\n * @module     theme_boost/drawers\n * @copyright  2021 Bas Brands\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport ModalBackdrop from 'core/modal_backdrop';\nimport Templates from 'core/templates';\nimport * as Aria from 'core/aria';\nimport {dispatchEvent} from 'core/event_dispatcher';\nimport {debounce} from 'core/utils';\nimport Pending from 'core/pending';\n// The jQuery module is only used for interacting with Boostrap 4. It can we removed when MDL-71979 is integrated.\nimport jQuery from 'jquery';\n\nlet backdropPromise = null;\n\nconst drawerMap = new Map();\n\nconst SELECTORS = {\n    BUTTONS: '[data-toggler=\"drawers\"]',\n    CLOSEBTN: '[data-toggler=\"drawers\"][data-action=\"closedrawer\"]',\n    OPENBTN: '[data-toggler=\"drawers\"][data-action=\"opendrawer\"]',\n    TOGGLEBTN: '[data-toggler=\"drawers\"][data-action=\"toggle\"]',\n    DRAWERS: '[data-region=\"fixed-drawer\"]',\n    CONTAINER: '#page.drawers',\n    DRAWERCONTENT: '.drawercontent',\n};\n\nconst CLASSES = {\n    SCROLLED: 'scrolled',\n    SHOW: 'show',\n    NOTINITIALISED: 'not-initialized',\n};\n\n/**\n * Maximum sizes for breakpoints. This needs to correspond with Bootstrap\n * Breakpoints\n *\n * @private\n */\nconst sizes = {\n    medium: 991,\n    large: 1400\n};\n\n/**\n * Get the current body width.\n *\n * @returns {number} the current body width.\n * @private\n */\nconst getCurrentWidth = () => {\n    const DomRect = document.body.getBoundingClientRect();\n    return DomRect.x + DomRect.width;\n};\n\n/**\n * Check if the user uses a small size browser.\n *\n * @returns {boolean} true if the body is smaller than sizes.medium max size.\n * @private\n */\nconst isSmall = () => {\n    const browserWidth = getCurrentWidth();\n    return browserWidth < sizes.medium;\n};\n\n/**\n * Check if the user uses a large size browser.\n *\n * @returns {boolean} true if the body is smaller than sizes.large max size.\n * @private\n */\nconst isLarge = () => {\n    const browserWidth = getCurrentWidth();\n    return browserWidth >= sizes.large;\n};\n\n/**\n * Add a backdrop to the page.\n *\n * @returns {Promise} rendering of modal backdrop.\n * @private\n */\nconst getBackdrop = () => {\n    if (!backdropPromise) {\n        backdropPromise = Templates.render('core/modal_backdrop', {})\n        .then(html => new ModalBackdrop(html))\n        .then(modalBackdrop => {\n            modalBackdrop.getAttachmentPoint().get(0).addEventListener('click', e => {\n                e.preventDefault();\n                Drawers.closeAllDrawers();\n            });\n            return modalBackdrop;\n        })\n        .catch();\n    }\n    return backdropPromise;\n};\n\n/**\n * Get the button element to open a specific drawer.\n *\n * @param {String} drawerId the drawer element Id\n * @return {HTMLElement|undefined} the open button element\n * @private\n */\nconst getDrawerOpenButton = (drawerId) => {\n    let openButton = document.querySelector(`${SELECTORS.OPENBTN}[data-target=\"${drawerId}\"]`);\n    if (!openButton) {\n        openButton = document.querySelector(`${SELECTORS.TOGGLEBTN}[data-target=\"${drawerId}\"]`);\n    }\n    return openButton;\n};\n\n/**\n * Disable drawer tooltips.\n *\n * @param {HTMLElement} drawerNode the drawer main node\n * @private\n */\nconst disableDrawerTooltips = (drawerNode) => {\n    const buttons = [\n        drawerNode.querySelector(SELECTORS.CLOSEBTN),\n        getDrawerOpenButton(drawerNode.id),\n    ];\n    buttons.forEach(button => {\n        if (!button) {\n            return;\n        }\n        disableButtonTooltip(button);\n    });\n};\n\n/**\n * Disable the button tooltips.\n *\n * @param {HTMLElement} button the button element\n * @param {boolean} enableOnBlur if the tooltip must be re-enabled on blur.\n * @private\n */\nconst disableButtonTooltip = (button, enableOnBlur) => {\n    if (button.hasAttribute('data-original-title')) {\n        // The jQuery is still used in Boostrap 4. It can we removed when MDL-71979 is integrated.\n        jQuery(button).tooltip('disable');\n        button.setAttribute('title', button.dataset.originalTitle);\n    } else {\n        button.dataset.disabledToggle = button.dataset.toggle;\n        button.removeAttribute('data-toggle');\n    }\n    if (enableOnBlur) {\n        button.dataset.restoreTooltipOnBlur = true;\n    }\n};\n\n/**\n * Enable drawer tooltips.\n *\n * @param {HTMLElement} drawerNode the drawer main node\n * @private\n */\nconst enableDrawerTooltips = (drawerNode) => {\n    const buttons = [\n        drawerNode.querySelector(SELECTORS.CLOSEBTN),\n        getDrawerOpenButton(drawerNode.id),\n    ];\n    buttons.forEach(button => {\n        if (!button) {\n            return;\n        }\n        enableButtonTooltip(button);\n    });\n};\n\n/**\n * Enable the button tooltips.\n *\n * @param {HTMLElement} button the button element\n * @private\n */\nconst enableButtonTooltip = (button) => {\n    // The jQuery is still used in Boostrap 4. It can we removed when MDL-71979 is integrated.\n    if (button.hasAttribute('data-original-title')) {\n        jQuery(button).tooltip('enable');\n        button.removeAttribute('title');\n    } else if (button.dataset.disabledToggle) {\n        button.dataset.toggle = button.dataset.disabledToggle;\n        jQuery(button).tooltip();\n    }\n    delete button.dataset.restoreTooltipOnBlur;\n};\n\n/**\n * Add scroll listeners to a drawer element.\n *\n * @param {HTMLElement} drawerNode the drawer main node\n * @private\n */\nconst addInnerScrollListener = (drawerNode) => {\n    const content = drawerNode.querySelector(SELECTORS.DRAWERCONTENT);\n    if (!content) {\n        return;\n    }\n    content.addEventListener(\"scroll\", () => {\n        drawerNode.classList.toggle(\n            CLASSES.SCROLLED,\n            content.scrollTop != 0\n        );\n    });\n};\n\n/**\n * The Drawers class is used to control on-screen drawer elements.\n *\n * It handles opening, and closing of drawer elements, as well as more detailed behaviours such as closing a drawer when\n * another drawer is opened, and supports closing a drawer when the screen is resized.\n *\n * Drawers are instantiated on page load, and can also be toggled lazily when toggling any drawer toggle, open button,\n * or close button.\n *\n * A range of show and hide events are also dispatched as detailed in the class\n * {@link module:theme_boost/drawers#eventTypes eventTypes} object.\n *\n * @example <caption>Standard usage</caption>\n *\n * // The module just needs to be included to add drawer support.\n * import 'theme_boost/drawers';\n *\n * @example <caption>Manually open or close any drawer</caption>\n *\n * import Drawers from 'theme_boost/drawers';\n *\n * const myDrawer = Drawers.getDrawerInstanceForNode(document.querySelector('.myDrawerNode');\n * myDrawer.closeDrawer();\n *\n * @example <caption>Listen to the before show event and cancel it</caption>\n *\n * import Drawers from 'theme_boost/drawers';\n *\n * document.addEventListener(Drawers.eventTypes.drawerShow, e => {\n *     // The drawer which will be shown.\n *     window.console.log(e.target);\n *\n *     // The instance of the Drawers class for this drawer.\n *     window.console.log(e.detail.drawerInstance);\n *\n *     // Prevent this drawer from being shown.\n *     e.preventDefault();\n * });\n *\n * @example <caption>Listen to the shown event</caption>\n *\n * document.addEventListener(Drawers.eventTypes.drawerShown, e => {\n *     // The drawer which was shown.\n *     window.console.log(e.target);\n *\n *     // The instance of the Drawers class for this drawer.\n *     window.console.log(e.detail.drawerInstance);\n * });\n */\nexport default class Drawers {\n    /**\n     * The underlying HTMLElement which is controlled.\n     */\n    drawerNode = null;\n\n    constructor(drawerNode) {\n        this.drawerNode = drawerNode;\n\n        if (isSmall()) {\n            this.closeDrawer({focusOnOpenButton: false, updatePreferences: false});\n        }\n\n        if (this.drawerNode.classList.contains(CLASSES.SHOW)) {\n            this.openDrawer({focusOnCloseButton: false});\n        } else if (this.drawerNode.dataset.forceopen == 1) {\n            if (!isSmall()) {\n                this.openDrawer({focusOnCloseButton: false});\n            }\n        } else {\n            Aria.hide(this.drawerNode);\n        }\n\n        // Disable tooltips in small screens.\n        if (isSmall()) {\n            disableDrawerTooltips(this.drawerNode);\n        }\n\n        addInnerScrollListener(this.drawerNode);\n\n        drawerMap.set(drawerNode, this);\n\n        drawerNode.classList.remove(CLASSES.NOTINITIALISED);\n    }\n\n    /**\n     * Whether the drawer is open.\n     *\n     * @returns {boolean}\n     */\n    get isOpen() {\n        return this.drawerNode.classList.contains(CLASSES.SHOW);\n    }\n\n    /**\n     * Whether the drawer should close when the window is resized\n     *\n     * @returns {boolean}\n     */\n    get closeOnResize() {\n        return !!parseInt(this.drawerNode.dataset.closeOnResize);\n    }\n\n    /**\n     * The list of event types.\n     *\n     * @static\n     * @property {String} drawerShow See {@link event:theme_boost/drawers:show}\n     * @property {String} drawerShown See {@link event:theme_boost/drawers:shown}\n     * @property {String} drawerHide See {@link event:theme_boost/drawers:hide}\n     * @property {String} drawerHidden See {@link event:theme_boost/drawers:hidden}\n     */\n    static eventTypes = {\n        /**\n         * An event triggered before a drawer is shown.\n         *\n         * @event theme_boost/drawers:show\n         * @type {CustomEvent}\n         * @property {HTMLElement} target The drawer that will be opened.\n         */\n        drawerShow: 'theme_boost/drawers:show',\n\n        /**\n         * An event triggered after a drawer is shown.\n         *\n         * @event theme_boost/drawers:shown\n         * @type {CustomEvent}\n         * @property {HTMLElement} target The drawer that was be opened.\n         */\n        drawerShown: 'theme_boost/drawers:shown',\n\n        /**\n         * An event triggered before a drawer is hidden.\n         *\n         * @event theme_boost/drawers:hide\n         * @type {CustomEvent}\n         * @property {HTMLElement} target The drawer that will be hidden.\n         */\n        drawerHide: 'theme_boost/drawers:hide',\n\n        /**\n         * An event triggered after a drawer is hidden.\n         *\n         * @event theme_boost/drawers:hidden\n         * @type {CustomEvent}\n         * @property {HTMLElement} target The drawer that was be hidden.\n         */\n        drawerHidden: 'theme_boost/drawers:hidden',\n    };\n\n\n    /**\n     * Get the drawer instance for the specified node\n     *\n     * @param {HTMLElement} drawerNode\n     * @returns {module:theme_boost/drawers}\n     */\n    static getDrawerInstanceForNode(drawerNode) {\n        if (!drawerMap.has(drawerNode)) {\n            new Drawers(drawerNode);\n        }\n\n        return drawerMap.get(drawerNode);\n    }\n\n    /**\n     * Dispatch a drawer event.\n     *\n     * @param {string} eventname the event name\n     * @param {boolean} cancelable if the event is cancelable\n     * @returns {CustomEvent} the resulting custom event\n     */\n    dispatchEvent(eventname, cancelable = false) {\n        return dispatchEvent(\n            eventname,\n            {\n                drawerInstance: this,\n            },\n            this.drawerNode,\n            {\n                cancelable,\n            }\n        );\n    }\n\n    /**\n     * Open the drawer.\n     *\n     * By default, openDrawer sets the page focus to the close drawer button. However, when a drawer is open at page\n     * load, this represents an accessibility problem as the initial focus changes without any user interaction. The\n     * focusOnCloseButton parameter can be set to false to prevent this behaviour.\n     *\n     * @param {object} args\n     * @param {boolean} [args.focusOnCloseButton=true] Whether to alter page focus when opening the drawer\n     */\n    openDrawer({focusOnCloseButton = true} = {}) {\n\n        const pendingPromise = new Pending('theme_boost/drawers:open');\n        const showEvent = this.dispatchEvent(Drawers.eventTypes.drawerShow, true);\n        if (showEvent.defaultPrevented) {\n            return;\n        }\n\n        // Hide close button while the drawer is showing to prevent glitchy effects.\n        this.drawerNode.querySelector(SELECTORS.CLOSEBTN)?.classList.toggle('hidden', true);\n\n        // Remove open tooltip if still visible.\n        let openButton = getDrawerOpenButton(this.drawerNode.id);\n        if (openButton && openButton.hasAttribute('data-original-title')) {\n            // The jQuery is still used in Boostrap 4. It can we removed when MDL-71979 is integrated.\n            jQuery(openButton)?.tooltip('hide');\n        }\n\n        Aria.unhide(this.drawerNode);\n        this.drawerNode.classList.add(CLASSES.SHOW);\n\n        const preference = this.drawerNode.dataset.preference;\n        if (preference && !isSmall() && (this.drawerNode.dataset.forceopen != 1)) {\n            M.util.set_user_preference(preference, true);\n        }\n\n        const state = this.drawerNode.dataset.state;\n        if (state) {\n            const page = document.getElementById('page');\n            page.classList.add(state);\n        }\n\n        if (isSmall()) {\n            getBackdrop().then(backdrop => {\n                backdrop.show();\n\n                const pageWrapper = document.getElementById('page');\n                pageWrapper.style.overflow = 'hidden';\n                return backdrop;\n            })\n            .catch();\n        }\n\n        // Show close button once the drawer is fully opened.\n        const closeButton = this.drawerNode.querySelector(SELECTORS.CLOSEBTN);\n        if (focusOnCloseButton && closeButton) {\n            disableButtonTooltip(closeButton, true);\n        }\n        setTimeout(() => {\n            closeButton.classList.toggle('hidden', false);\n            if (focusOnCloseButton) {\n                closeButton.focus();\n            }\n            pendingPromise.resolve();\n        }, 300);\n\n        this.dispatchEvent(Drawers.eventTypes.drawerShown);\n    }\n\n    /**\n     * Close the drawer.\n     *\n     * @param {object} args\n     * @param {boolean} [args.focusOnOpenButton=true] Whether to alter page focus when opening the drawer\n     * @param {boolean} [args.updatePreferences=true] Whether to update the user prewference\n     */\n    closeDrawer({focusOnOpenButton = true, updatePreferences = true} = {}) {\n\n        const pendingPromise = new Pending('theme_boost/drawers:close');\n\n        const hideEvent = this.dispatchEvent(Drawers.eventTypes.drawerHide, true);\n        if (hideEvent.defaultPrevented) {\n            return;\n        }\n\n        // Hide close button while the drawer is hiding to prevent glitchy effects.\n        const closeButton = this.drawerNode.querySelector(SELECTORS.CLOSEBTN);\n        closeButton?.classList.toggle('hidden', true);\n        // Remove the close button tooltip if visible.\n        if (closeButton.hasAttribute('data-original-title')) {\n            // The jQuery is still used in Boostrap 4. It can we removed when MDL-71979 is integrated.\n            jQuery(closeButton)?.tooltip('hide');\n        }\n\n        const preference = this.drawerNode.dataset.preference;\n        if (preference && updatePreferences && !isSmall()) {\n            M.util.set_user_preference(preference, false);\n        }\n\n        const state = this.drawerNode.dataset.state;\n        if (state) {\n            const page = document.getElementById('page');\n            page.classList.remove(state);\n        }\n\n        Aria.hide(this.drawerNode);\n        this.drawerNode.classList.remove(CLASSES.SHOW);\n\n        getBackdrop().then(backdrop => {\n            backdrop.hide();\n\n            if (isSmall()) {\n                const pageWrapper = document.getElementById('page');\n                pageWrapper.style.overflow = 'auto';\n            }\n            return backdrop;\n        })\n        .catch();\n\n        // Move focus to the open drawer (or toggler) button once the drawer is hidden.\n        let openButton = getDrawerOpenButton(this.drawerNode.id);\n        if (openButton) {\n            disableButtonTooltip(openButton, true);\n        }\n        setTimeout(() => {\n            if (openButton && focusOnOpenButton) {\n                openButton.focus();\n            }\n            pendingPromise.resolve();\n        }, 300);\n\n        this.dispatchEvent(Drawers.eventTypes.drawerHidden);\n    }\n\n    /**\n     * Toggle visibility of the drawer.\n     */\n    toggleVisibility() {\n        if (this.drawerNode.classList.contains(CLASSES.SHOW)) {\n            this.closeDrawer();\n        } else {\n            this.openDrawer();\n        }\n    }\n\n    /**\n     * Close all drawers.\n     */\n    static closeAllDrawers() {\n        drawerMap.forEach(drawerInstance => {\n            drawerInstance.closeDrawer();\n        });\n    }\n\n    /**\n     * Close all drawers except for the specified drawer.\n     *\n     * @param {module:theme_boost/drawers} comparisonInstance\n     */\n    static closeOtherDrawers(comparisonInstance) {\n        drawerMap.forEach(drawerInstance => {\n            if (drawerInstance === comparisonInstance) {\n                return;\n            }\n\n            drawerInstance.closeDrawer();\n        });\n    }\n}\n\n/**\n * Activate the scroller helper for the drawer layout.\n *\n * @private\n */\nconst scroller = () => {\n    const body = document.querySelector('body');\n    const drawerLayout = document.querySelector(SELECTORS.CONTAINER);\n    if (drawerLayout) {\n        drawerLayout.addEventListener(\"scroll\", () => {\n            if (drawerLayout.scrollTop >= window.innerHeight) {\n                body.classList.add(CLASSES.SCROLLED);\n            } else {\n                body.classList.remove(CLASSES.SCROLLED);\n            }\n        });\n    }\n};\n\n/**\n * Set the last used attribute for the last used toggle button for a drawer.\n *\n * @param {object} toggleButton The clicked button.\n */\nconst setLastUsedToggle = (toggleButton) => {\n    if (toggleButton.dataset.target) {\n        document.querySelectorAll(`${SELECTORS.BUTTONS}[data-target=\"${toggleButton.dataset.target}\"]`)\n        .forEach(btn => {\n            btn.dataset.lastused = false;\n        });\n        toggleButton.dataset.lastused = true;\n    }\n};\n\n/**\n * Set the focus to the last used button to open this drawer.\n * @param {string} target The drawer target.\n */\nconst focusLastUsedToggle = (target) => {\n    const lastUsedButton = document.querySelector(`${SELECTORS.BUTTONS}[data-target=\"${target}\"][data-lastused=\"true\"`);\n    if (lastUsedButton) {\n        lastUsedButton.focus();\n    }\n};\n\n/**\n * Register the event listeners for the drawer.\n *\n * @private\n */\nconst registerListeners = () => {\n    // Listen for show/hide events.\n    document.addEventListener('click', e => {\n        const toggleButton = e.target.closest(SELECTORS.TOGGLEBTN);\n        if (toggleButton && toggleButton.dataset.target) {\n            e.preventDefault();\n            const targetDrawer = document.getElementById(toggleButton.dataset.target);\n            const drawerInstance = Drawers.getDrawerInstanceForNode(targetDrawer);\n            setLastUsedToggle(toggleButton);\n\n            drawerInstance.toggleVisibility();\n        }\n\n        const openDrawerButton = e.target.closest(SELECTORS.OPENBTN);\n        if (openDrawerButton && openDrawerButton.dataset.target) {\n            e.preventDefault();\n            const targetDrawer = document.getElementById(openDrawerButton.dataset.target);\n            const drawerInstance = Drawers.getDrawerInstanceForNode(targetDrawer);\n            setLastUsedToggle(toggleButton);\n\n            drawerInstance.openDrawer();\n        }\n\n        const closeDrawerButton = e.target.closest(SELECTORS.CLOSEBTN);\n        if (closeDrawerButton && closeDrawerButton.dataset.target) {\n            e.preventDefault();\n            const targetDrawer = document.getElementById(closeDrawerButton.dataset.target);\n            const drawerInstance = Drawers.getDrawerInstanceForNode(targetDrawer);\n\n            drawerInstance.closeDrawer();\n            focusLastUsedToggle(closeDrawerButton.dataset.target);\n        }\n    });\n\n    // Close drawer when another drawer opens.\n    document.addEventListener(Drawers.eventTypes.drawerShow, e => {\n        if (isLarge()) {\n            return;\n        }\n        Drawers.closeOtherDrawers(e.detail.drawerInstance);\n    });\n\n    // Tooglers and openers blur listeners.\n    const btnSelector = `${SELECTORS.TOGGLEBTN}, ${SELECTORS.OPENBTN}, ${SELECTORS.CLOSEBTN}`;\n    document.addEventListener('focusout', (e) => {\n        const button = e.target.closest(btnSelector);\n        if (button?.dataset.restoreTooltipOnBlur !== undefined) {\n            enableButtonTooltip(button);\n        }\n    });\n\n    const closeOnResizeListener = () => {\n        if (isSmall()) {\n            let anyOpen = false;\n            drawerMap.forEach(drawerInstance => {\n                disableDrawerTooltips(drawerInstance.drawerNode);\n                if (drawerInstance.isOpen) {\n                    if (drawerInstance.closeOnResize) {\n                        drawerInstance.closeDrawer();\n                    } else {\n                        anyOpen = true;\n                    }\n                }\n            });\n\n            if (anyOpen) {\n                getBackdrop().then(backdrop => backdrop.show()).catch();\n            }\n        } else {\n            drawerMap.forEach(drawerInstance => {\n                enableDrawerTooltips(drawerInstance.drawerNode);\n            });\n            getBackdrop().then(backdrop => backdrop.hide()).catch();\n        }\n    };\n\n    window.addEventListener('resize', debounce(closeOnResizeListener, 400));\n};\n\nscroller();\nregisterListeners();\n\nconst drawers = document.querySelectorAll(SELECTORS.DRAWERS);\ndrawers.forEach(drawerNode => Drawers.getDrawerInstanceForNode(drawerNode));\n"],"names":["_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","_interopRequireDefault","obj","__esModule","default","_defineProperty","key","value","arg","input","hint","prim","Symbol","toPrimitive","undefined","res","call","TypeError","String","Number","_toPrimitive","_toPropertyKey","Object","defineProperty","enumerable","configurable","writable","_modal_backdrop","_templates","Aria","cache","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","prototype","hasOwnProperty","desc","set","_interopRequireWildcard","_pending","_jquery","backdropPromise","drawerMap","Map","SELECTORS","CLASSES","sizes","getCurrentWidth","DomRect","document","body","getBoundingClientRect","x","width","isSmall","getBackdrop","Templates","render","then","html","ModalBackdrop","modalBackdrop","getAttachmentPoint","addEventListener","e","preventDefault","Drawers","closeAllDrawers","catch","getDrawerOpenButton","drawerId","openButton","querySelector","concat","disableDrawerTooltips","drawerNode","id","forEach","button","disableButtonTooltip","enableOnBlur","hasAttribute","jQuery","tooltip","setAttribute","dataset","originalTitle","disabledToggle","toggle","removeAttribute","restoreTooltipOnBlur","enableButtonTooltip","constructor","this","closeDrawer","focusOnOpenButton","updatePreferences","classList","contains","openDrawer","focusOnCloseButton","forceopen","hide","content","scrollTop","addInnerScrollListener","remove","isOpen","closeOnResize","parseInt","static","dispatchEvent","eventname","cancelable","arguments","length","drawerInstance","_this$drawerNode$quer","pendingPromise","Pending","eventTypes","drawerShow","defaultPrevented","_jQuery","unhide","add","preference","M","util","set_user_preference","state","getElementById","backdrop","show","style","overflow","closeButton","setTimeout","focus","resolve","drawerShown","drawerHide","_jQuery2","drawerHidden","toggleVisibility","comparisonInstance","_exports","setLastUsedToggle","toggleButton","target","querySelectorAll","btn","lastused","scroller","drawerLayout","window","innerHeight","registerListeners","closest","targetDrawer","getDrawerInstanceForNode","openDrawerButton","closeDrawerButton","lastUsedButton","focusLastUsedToggle","closeOtherDrawers","detail","btnSelector","debounce","closeOnResizeListener","anyOpen"],"mappings":"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"}