define("theme_hillhead40/courseindex",["exports","core/log"],(function(_exports,Log){function _getRequireWildcardCache(nodeInterop){if("function"!=typeof WeakMap)return null;var cacheBabelInterop=new WeakMap,cacheNodeInterop=new WeakMap;return(_getRequireWildcardCache=function(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop})(nodeInterop)}Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.init=void 0,Log=function(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule)return obj;if(null===obj||"object"!=typeof obj&&"function"!=typeof obj)return{default:obj};var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj))return cache.get(obj);var newObj={},hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj)if("default"!==key&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;desc&&(desc.get||desc.set)?Object.defineProperty(newObj,key,desc):newObj[key]=obj[key]}newObj.default=obj,cache&&cache.set(obj,newObj);return newObj}
/**
   * End users have asked that course indexes be collapsed by default.
   * Because of the mechanisms involved, this script accepts an argument
   * from the drawers.mustache template that determines if the course
   * indexes should be collapsed initially, or expanded by what has been
   * stored in mdl_user_preferences and local storage.
   *
   * @module     theme_hillhead40/courseindex
   * @author     Greg Pedder <greg.pedder@glasgow.ac.uk>
   * @copyright  2023 University of Glasgow
   * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */(Log);const Selectors_COURSE_INDEX='[aria-controls^="courseindexcollapse"]:not([aria-controls="courseindexcollapse0"])',CourseIndex=coursindexcollapsed=>{let params=new URL(location.href).searchParams,courseindexcollapsed=coursindexcollapsed;Log.debug("CourseIndex! called with params:"+params+" coursindexcollapsed is:"+coursindexcollapsed),params.get("id")>1&&courseindexcollapsed&&(Log.debug("CourseIndex called with params:"+params+" coursindexcollapsed is:"+coursindexcollapsed),async function(selector,selectorId){let timeout=arguments.length>2&&void 0!==arguments[2]?arguments[2]:15e3;Log.debug("waitForElement called...");const start=Date.now();for(;Date.now()-start<timeout;){Log.debug("searching for selector:"+selector);if(document.querySelector(selector))return Log.debug("Calling setCourseIndexState with selector:"+selector),setCourseIndexState(selector,selectorId);await new Promise((resolve=>setTimeout(resolve,1e3)))}}(Selectors_COURSE_INDEX,params.get("id")))};const setCourseIndexState=(element,courseId)=>{if(Log.debug("setCourseIndexState was called with element ".concat(element," and courseId ").concat(courseId,".")),0==document.querySelectorAll(element).length)return Log.debug("Page is missing the course index section, no need to continue."),!1;const courseIndexSectionItems=document.querySelectorAll(Selectors_COURSE_INDEX);Log.debug("Collapsing all course indexes except index 0..."),courseIndexSectionItems.forEach((indexSectionItem=>{indexSectionItem.click()}))};_exports.init=coursindexcollapsed=>{CourseIndex(coursindexcollapsed)}}));

//# sourceMappingURL=courseindex.min.js.map