{"version":3,"file":"bulkactions.min.js","sources":["../../../src/local/participants/bulkactions.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Bulk actions for lists of participants.\n *\n * @module     core_user/local/participants/bulkactions\n * @copyright  2020 Andrew Nicols <andrew@nicols.co.uk>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport * as Repository from 'core_user/repository';\nimport * as Str from 'core/str';\nimport ModalEvents from 'core/modal_events';\nimport ModalFactory from 'core/modal_factory';\nimport Notification from 'core/notification';\nimport Templates from 'core/templates';\nimport {add as notifyUser} from 'core/toast';\n\n/**\n * Show the add note popup\n *\n * @param {Number} courseid\n * @param {Number[]} users\n * @param {String[]} noteStateNames\n * @param {HTMLElement} stateHelpIcon\n * @return {Promise}\n */\nexport const showAddNote = (courseid, users, noteStateNames, stateHelpIcon) => {\n    if (!users.length) {\n        // No users were selected.\n        return Promise.resolve();\n    }\n\n    const states = [];\n    for (let key in noteStateNames) {\n        switch (key) {\n            case 'draft':\n                states.push({value: 'personal', label: noteStateNames[key]});\n                break;\n            case 'public':\n                states.push({value: 'course', label: noteStateNames[key], selected: 1});\n                break;\n            case 'site':\n                states.push({value: key, label: noteStateNames[key]});\n                break;\n        }\n    }\n\n    const context = {\n        stateNames: states,\n        stateHelpIcon: stateHelpIcon.innerHTML,\n    };\n\n    let titlePromise = null;\n    if (users.length === 1) {\n        titlePromise = Str.get_string('addbulknotesingle', 'core_notes');\n    } else {\n        titlePromise = Str.get_string('addbulknote', 'core_notes', users.length);\n    }\n\n    return ModalFactory.create({\n        type: ModalFactory.types.SAVE_CANCEL,\n        body: Templates.render('core_user/add_bulk_note', context),\n        title: titlePromise,\n        buttons: {\n            save: titlePromise,\n        },\n        removeOnClose: true,\n    })\n    .then(modal => {\n        modal.getRoot().on(ModalEvents.save, () => submitAddNote(courseid, users, modal));\n\n        modal.show();\n\n        return modal;\n    });\n};\n\n/**\n * Add a note to this list of users.\n *\n * @param {Number} courseid\n * @param {Number[]} users\n * @param {Modal} modal\n * @return {Promise}\n */\nconst submitAddNote = (courseid, users, modal) => {\n    const text = modal.getRoot().find('form textarea').val();\n    const publishstate = modal.getRoot().find('form select').val();\n\n    const notes = users.map(userid => {\n        return {\n            userid,\n            text,\n            courseid,\n            publishstate,\n        };\n    });\n\n    return Repository.createNotesForUsers(notes)\n    .then(noteIds => {\n        if (noteIds.length === 1) {\n            return Str.get_string('addbulknotedonesingle', 'core_notes');\n        } else {\n            return Str.get_string('addbulknotedone', 'core_notes', noteIds.length);\n        }\n    })\n    .then(msg => notifyUser(msg))\n    .catch(Notification.exception);\n};\n\n/**\n * Show the send message popup.\n *\n * @param {Number[]} users\n * @return {Promise}\n */\nexport const showSendMessage = users => {\n    if (!users.length) {\n        // Nothing to do.\n        return Promise.resolve();\n    }\n\n    let titlePromise;\n    if (users.length === 1) {\n        titlePromise = Str.get_string('sendbulkmessagesingle', 'core_message');\n    } else {\n        titlePromise = Str.get_string('sendbulkmessage', 'core_message', users.length);\n    }\n\n    return ModalFactory.create({\n        type: ModalFactory.types.SAVE_CANCEL,\n        body: Templates.render('core_user/send_bulk_message', {}),\n        title: titlePromise,\n        buttons: {\n            save: titlePromise,\n        },\n        removeOnClose: true,\n    })\n    .then(modal => {\n        modal.getRoot().on(ModalEvents.save, (e) => {\n            const text = modal.getRoot().find('form textarea').val();\n            if (text.trim() === '') {\n                modal.getRoot().find('[data-role=\"messagetextrequired\"]').removeAttr('hidden');\n                e.preventDefault();\n                return;\n            }\n\n            submitSendMessage(modal, users, text);\n        });\n\n        modal.show();\n\n        return modal;\n    });\n};\n\n/**\n * Send a message to these users.\n *\n * @param {Modal} modal\n * @param {Number[]} users\n * @param {String} text\n * @return {Promise}\n */\nconst submitSendMessage = (modal, users, text) => {\n    const messages = users.map(touserid => {\n        return {\n            touserid,\n            text,\n        };\n    });\n\n    return Repository.sendMessagesToUsers(messages)\n    .then(messageIds => {\n        if (messageIds.length == 1) {\n            return Str.get_string('sendbulkmessagesentsingle', 'core_message');\n        } else {\n            return Str.get_string('sendbulkmessagesent', 'core_message', messageIds.length);\n        }\n    })\n    .then(msg => notifyUser(msg))\n    .catch(Notification.exception);\n};\n"],"names":["_interopRequireDefault","obj","__esModule","default","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","_interopRequireWildcard","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","Repository","Str","_modal_events","_modal_factory","_notification","_templates","_exports","showAddNote","courseid","users","noteStateNames","stateHelpIcon","length","Promise","resolve","states","push","value","label","selected","context","stateNames","innerHTML","titlePromise","get_string","ModalFactory","create","type","types","SAVE_CANCEL","body","Templates","render","title","buttons","save","removeOnClose","then","modal","getRoot","on","ModalEvents","submitAddNote","show","text","find","val","publishstate","notes","map","userid","createNotesForUsers","noteIds","msg","notifyUser","add","catch","Notification","exception","showSendMessage","e","trim","removeAttr","preventDefault","submitSendMessage","messages","touserid","sendMessagesToUsers","messageIds"],"mappings":"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"}