{"version":3,"file":"utils.min.js","sources":["../src/utils.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Utility functions.\n *\n * @module core/utils\n * @copyright  2019 Ryan Wyllie <ryan@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n /**\n  * Create a wrapper function to throttle the execution of the given\n  *\n  * function to at most once every specified period.\n  *\n  * If the function is attempted to be executed while it's in cooldown\n  * (during the wait period) then it'll immediately execute again as\n  * soon as the cooldown is over.\n  *\n  * @method\n  * @param {Function} func The function to throttle\n  * @param {Number} wait The number of milliseconds to wait between executions\n  * @return {Function}\n  */\nexport const throttle = (func, wait) => {\n    let onCooldown = false;\n    let runAgain = null;\n    const run = function(...args) {\n        if (runAgain === null) {\n            // This is the first time the function has been called.\n            runAgain = false;\n        } else {\n            // This function has been called a second time during the wait period\n            // so re-run it once the wait period is over.\n            runAgain = true;\n        }\n\n        if (onCooldown) {\n            // Function has already run for this wait period.\n            return;\n        }\n\n        func.apply(this, args);\n        onCooldown = true;\n\n        setTimeout(() => {\n            const recurse = runAgain;\n            onCooldown = false;\n            runAgain = null;\n\n            if (recurse) {\n                run(args);\n            }\n        }, wait);\n    };\n\n    return run;\n};\n\n/**\n * Create a wrapper function to debounce the execution of the given\n * function. Each attempt to execute the function will reset the cooldown\n * period.\n *\n * @method\n * @param {Function} func The function to debounce\n * @param {Number} wait The number of milliseconds to wait after the final attempt to execute\n * @return {Function}\n */\nexport const debounce = (func, wait) => {\n    let timeout = null;\n    return function(...args) {\n        clearTimeout(timeout);\n        timeout = setTimeout(() => {\n            func.apply(this, args);\n        }, wait);\n    };\n};\n"],"names":["_exports","throttle","func","wait","onCooldown","runAgain","run","_len","arguments","length","args","Array","_key","apply","this","setTimeout","recurse","debounce","timeout","_len2","_key2","clearTimeout"],"mappings":"uJAsEEA,SAAAC,SAjCsBA,CAACC,KAAMC,QAC3B,IAAIC,YAAa,EACbC,SAAW,KACf,MAAMC,IAAM,WAAkB,IAAA,IAAAC,KAAAC,UAAAC,OAANC,KAAIC,IAAAA,MAAAJ,MAAAK,KAAA,EAAAA,KAAAL,KAAAK,OAAJF,KAAIE,MAAAJ,UAAAI,MAGpBP,SAFa,OAAbA,SASAD,aAKJF,KAAKW,MAAMC,KAAMJ,MACjBN,YAAa,EAEbW,YAAW,KACP,MAAMC,QAAUX,SAChBD,YAAa,EACbC,SAAW,KAEPW,SACAV,IAAII,KACR,GACDP,QAGP,OAAOG,GAAG,EAqBZN,SAAAiB,SARsBA,CAACf,KAAMC,QAC3B,IAAIe,QAAU,KACd,OAAO,WAAkB,IAAA,IAAAC,MAAAX,UAAAC,OAANC,KAAIC,IAAAA,MAAAQ,OAAAC,MAAA,EAAAA,MAAAD,MAAAC,QAAJV,KAAIU,OAAAZ,UAAAY,OACnBC,aAAaH,SACbA,QAAUH,YAAW,KACjBb,KAAKW,MAAMC,KAAMJ,KAAK,GACvBP,MACN,CACH"}