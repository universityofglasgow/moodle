{"version":3,"file":"participants_filter.min.js","sources":["../src/participants_filter.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Participants filter management.\n *\n * @module     core_user/participants_filter\n * @copyright  2021 Tomo Tsuyuki <tomotsuyuki@catalyst-au.net>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport CoreFilter from 'core/datafilter';\nimport * as DynamicTable from 'core_table/dynamic';\nimport Selectors from 'core/datafilter/selectors';\nimport Notification from 'core/notification';\nimport Pending from 'core/pending';\n\n/**\n * Initialise the participants filter on the element with the given id.\n *\n * @param {String} filterRegionId The id for the filter element.\n */\nexport const init = filterRegionId => {\n\n    const filterSet = document.getElementById(filterRegionId);\n\n    // Create and initialize filter.\n    const coreFilter = new CoreFilter(filterSet, function(filters, pendingPromise) {\n        DynamicTable.setFilters(\n            DynamicTable.getTableFromId(filterSet.dataset.tableRegion),\n            {\n                jointype: parseInt(filterSet.querySelector(Selectors.filterset.fields.join).value, 10),\n                filters,\n            }\n        )\n            .then(result => {\n                pendingPromise.resolve();\n\n                return result;\n            })\n            .catch(Notification.exception);\n    });\n    coreFilter.init();\n\n    /**\n     * Set the current filter options based on a provided configuration.\n     *\n     * @param {Object} config\n     * @param {Number} config.jointype\n     * @param {Object} config.filters\n     * @returns {Promise}\n     */\n    const setFilterFromConfig = config => {\n        const filterConfig = Object.entries(config.filters);\n\n        if (!filterConfig.length) {\n            // There are no filters to set from.\n            return Promise.resolve();\n        }\n\n        // Set the main join type.\n        filterSet.querySelector(Selectors.filterset.fields.join).value = config.jointype;\n\n        const filterPromises = filterConfig.map(([filterType, filterData]) => {\n            if (filterType === 'courseid') {\n                // The courseid is a special case.\n                return false;\n            }\n\n            const filterValues = filterData.values;\n\n            if (!filterValues.length) {\n                // There are no values for this filter.\n                // Skip it.\n                return false;\n            }\n            return coreFilter.addFilterRow()\n                .then(([filterRow]) => {\n                    coreFilter.addFilter(filterRow, filterType, filterValues);\n                    return;\n                });\n        }).filter(promise => promise);\n\n        if (!filterPromises.length) {\n            return Promise.resolve();\n        }\n\n        return Promise.all(filterPromises)\n            .then(() => {\n                return coreFilter.removeEmptyFilters();\n            })\n            .then(() => {\n                coreFilter.updateFiltersOptions();\n                return;\n            })\n            .then(() => {\n                coreFilter.updateTableFromFilter();\n                return;\n            });\n    };\n\n    // Initialize DynamicTable for showing result.\n    const tableRoot = DynamicTable.getTableFromId(filterSet.dataset.tableRegion);\n    const initialFilters = DynamicTable.getFilters(tableRoot);\n    if (initialFilters) {\n        const initialFilterPromise = new Pending('core/filter:setFilterFromConfig');\n        // Apply the initial filter configuration.\n        setFilterFromConfig(initialFilters)\n            .then(() => initialFilterPromise.resolve())\n            .catch();\n    }\n};\n\n"],"names":["_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","_interopRequireDefault","obj","__esModule","default","_datafilter","DynamicTable","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_interopRequireWildcard","_selectors","_notification","_pending","_exports","init","filterRegionId","filterSet","document","getElementById","coreFilter","CoreFilter","filters","pendingPromise","setFilters","getTableFromId","dataset","tableRegion","jointype","parseInt","querySelector","Selectors","filterset","fields","join","value","then","result","resolve","catch","Notification","exception","tableRoot","initialFilters","getFilters","initialFilterPromise","Pending","config","filterConfig","entries","length","Promise","filterPromises","map","_ref","filterType","filterData","filterValues","values","addFilterRow","_ref2","filterRow","addFilter","filter","promise","all","removeEmptyFilters","updateFiltersOptions","updateTableFromFilter","setFilterFromConfig"],"mappings":"wOA2BmC,SAAAA,yBAAAC,aAAA,GAAA,mBAAAC,QAAA,OAAA,KAAA,IAAAC,kBAAAD,IAAAA,QAAAE,iBAAAF,IAAAA,eAAAF,yBAAA,SAAAC,aAAAA,OAAAA,YAAAG,iBAAAD,oBAAAF,YAAA,CAAA,SAAAI,uBAAAC,KAAAA,OAAAA,KAAAA,IAAAC,WAAAD,IAAAE,CAAAA,QAAAF,IAAA;;;;;;;kFAJnCG,YAAAJ,uBAAAI,aACAC,aAGmC,SAAAJ,IAAAL,aAAAA,IAAAA,aAAAK,KAAAA,IAAAC,WAAAD,OAAAA,IAAAA,GAAAA,OAAAA,KAAAA,iBAAAA,KAAAE,mBAAAF,IAAAE,MAAAA,CAAAA,QAAAF,KAAAK,IAAAA,MAAAX,yBAAAC,aAAA,GAAAU,OAAAA,MAAAC,IAAAN,KAAA,OAAAK,MAAAE,IAAAP,KAAA,IAAAQ,OAAAC,GAAAA,sBAAAC,OAAAC,gBAAAD,OAAAE,yBAAAC,IAAAA,IAAAA,OAAAb,IAAAa,eAAAA,KAAAH,OAAAI,UAAAC,eAAAC,KAAAhB,IAAAa,KAAA,CAAA,IAAAI,KAAAR,sBAAAC,OAAAE,yBAAAZ,IAAAa,KAAAI,KAAAA,OAAAA,KAAAV,KAAAU,KAAAC,KAAAR,OAAAC,eAAAH,OAAAK,IAAAI,MAAAT,OAAAK,KAAAb,IAAAa,IAAAL,CAAAA,OAAAN,QAAAF,IAAAK,OAAAA,MAAAa,IAAAlB,IAAAQ,eAAAA,MAAA,CAHnCW,CAAAf,cACAgB,WAAArB,uBAAAqB,YACAC,cAAAtB,uBAAAsB,eACAC,SAAAvB,uBAAAuB,UAgGEC,SAAAC,KAzFkBC,iBAEhB,MAAMC,UAAYC,SAASC,eAAeH,gBAGpCI,WAAa,IAAIC,YAAU5B,QAACwB,WAAW,SAASK,QAASC,gBAC3D5B,aAAa6B,WACT7B,aAAa8B,eAAeR,UAAUS,QAAQC,aAC9C,CACIC,SAAUC,SAASZ,UAAUa,cAAcC,WAAStC,QAACuC,UAAUC,OAAOC,MAAMC,MAAO,IACnFb,kBAGHc,MAAKC,SACFd,eAAee,UAERD,UAEVE,MAAMC,cAAY/C,QAACgD,UAC5B,IACArB,WAAWL,OAUX,MAkDM2B,UAAY/C,aAAa8B,eAAeR,UAAUS,QAAQC,aAC1DgB,eAAiBhD,aAAaiD,WAAWF,WAC/C,GAAIC,eAAgB,CAChB,MAAME,qBAAuB,IAAIC,SAAOrD,QAAC,mCArDjBsD,UACxB,MAAMC,aAAe/C,OAAOgD,QAAQF,OAAOzB,SAE3C,IAAK0B,aAAaE,OAEd,OAAOC,QAAQb,UAInBrB,UAAUa,cAAcC,WAAStC,QAACuC,UAAUC,OAAOC,MAAMC,MAAQY,OAAOnB,SAExE,MAAMwB,eAAiBJ,aAAaK,KAAIC,OAA8B,IAA5BC,WAAYC,YAAWF,KAC7D,GAAmB,aAAfC,WAEA,OAAO,EAGX,MAAME,aAAeD,WAAWE,OAEhC,QAAKD,aAAaP,QAKX9B,WAAWuC,eACbvB,MAAKwB,QAAiB,IAAfC,WAAUD,MACdxC,WAAW0C,UAAUD,UAAWN,WAAYE,aAC5C,GACF,IACPM,QAAOC,SAAWA,UAErB,OAAKZ,eAAeF,OAIbC,QAAQc,IAAIb,gBACdhB,MAAK,IACKhB,WAAW8C,uBAErB9B,MAAK,KACFhB,WAAW+C,sBACX,IAEH/B,MAAK,KACFhB,WAAWgD,uBACX,IAbGjB,QAAQb,SAcb,EASN+B,CAAoB1B,gBACfP,MAAK,IAAMS,qBAAqBP,YAChCC,OACT,EACF"}