{"version":3,"file":"debugpanel.min.js","sources":["../../../src/local/reactive/debugpanel.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Reactive module debug panel.\n *\n * This module contains all the UI components for the reactive debug tools.\n * Those tools are only available if the debug is enables and could be used\n * from the footer.\n *\n * @module     core/local/reactive/debugpanel\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {BaseComponent, DragDrop, debug} from 'core/reactive';\nimport log from 'core/log';\nimport {debounce} from 'core/utils';\n\n/**\n * Init the main reactive panel.\n *\n * @param {element|string} target the DOM main element or its ID\n * @param {object} selectors optional css selector overrides\n */\nexport const init = (target, selectors) => {\n    const element = document.getElementById(target);\n    // Check if the debug reactive module is available.\n    if (debug === undefined) {\n        element.remove();\n        return;\n    }\n    // Create the main component.\n    new GlobalDebugPanel({\n        element,\n        reactive: debug,\n        selectors,\n    });\n};\n\n/**\n * Init an instance reactive subpanel.\n *\n * @param {element|string} target the DOM main element or its ID\n * @param {object} selectors optional css selector overrides\n */\nexport const initsubpanel = (target, selectors) => {\n    const element = document.getElementById(target);\n    // Check if the debug reactive module is available.\n    if (debug === undefined) {\n        element.remove();\n        return;\n    }\n    // Create the main component.\n    new DebugInstanceSubpanel({\n        element,\n        reactive: debug,\n        selectors,\n    });\n};\n\n/**\n * Component for the main reactive dev panel.\n *\n * This component shows the list of reactive instances and handle the buttons\n * to open a specific instance panel.\n */\nclass GlobalDebugPanel extends BaseComponent {\n\n    /**\n     * Constructor hook.\n     */\n    create() {\n        // Optional component name for debugging.\n        this.name = 'GlobalDebugPanel';\n        // Default query selectors.\n        this.selectors = {\n            LOADERS: `[data-for='loaders']`,\n            SUBPANEL: `[data-for='subpanel']`,\n            NOINSTANCES: `[data-for='noinstances']`,\n            LOG: `[data-for='log']`,\n        };\n        this.classes = {\n            HIDE: `d-none`,\n        };\n        // The list of loaded debuggers.\n        this.subPanels = new Set();\n    }\n\n    /**\n     * Initial state ready method.\n     *\n     * @param {object} state the initial state\n     */\n    stateReady(state) {\n        this._updateReactivesPanels({state});\n        // Remove loading wheel.\n        this.getElement(this.selectors.SUBPANEL).innerHTML = '';\n    }\n\n    /**\n     * Component watchers.\n     *\n     * @returns {Array} of watchers\n     */\n    getWatchers() {\n        return [\n            {watch: `reactives:created`, handler: this._updateReactivesPanels},\n        ];\n    }\n\n    /**\n     * Update the list of reactive instances.\n     * @param {Object} args\n     * @param {Object} args.state the current state\n     */\n    _updateReactivesPanels({state}) {\n        this.getElement(this.selectors.NOINSTANCES)?.classList?.toggle(\n            this.classes.HIDE,\n            state.reactives.size > 0\n        );\n        // Generate loading buttons.\n        state.reactives.forEach(\n            instance => {\n                this._createLoader(instance);\n            }\n        );\n    }\n\n    /**\n     * Create a debug panel button for a specific reactive instance.\n     *\n     * @param {object} instance hte instance data\n     */\n    _createLoader(instance) {\n        if (this.subPanels.has(instance.id)) {\n            return;\n        }\n        this.subPanels.add(instance.id);\n        const loaders = this.getElement(this.selectors.LOADERS);\n        const btn = document.createElement(\"button\");\n        btn.innerHTML = instance.id;\n        btn.dataset.id = instance.id;\n        loaders.appendChild(btn);\n        // Add click event.\n        this.addEventListener(btn, 'click', () => this._openPanel(btn, instance));\n    }\n\n    /**\n     * Open a debug panel.\n     *\n     * @param {Element} btn the button element\n     * @param {object} instance the instance data\n     */\n    async _openPanel(btn, instance) {\n        try {\n            const target = this.getElement(this.selectors.SUBPANEL);\n            const data = {...instance};\n            await this.renderComponent(target, 'core/local/reactive/debuginstancepanel', data);\n        } catch (error) {\n            log.error('Cannot load reactive debug subpanel');\n            throw error;\n        }\n    }\n}\n\n/**\n * Component for the main reactive dev panel.\n *\n * This component shows the list of reactive instances and handle the buttons\n * to open a specific instance panel.\n */\nclass DebugInstanceSubpanel extends BaseComponent {\n\n    /**\n     * Constructor hook.\n     */\n    create() {\n        // Optional component name for debugging.\n        this.name = 'DebugInstanceSubpanel';\n        // Default query selectors.\n        this.selectors = {\n            NAME: `[data-for='name']`,\n            CLOSE: `[data-for='close']`,\n            READMODE: `[data-for='readmode']`,\n            HIGHLIGHT: `[data-for='highlight']`,\n            LOG: `[data-for='log']`,\n            STATE: `[data-for='state']`,\n            CLEAN: `[data-for='clean']`,\n            PIN: `[data-for='pin']`,\n            SAVE: `[data-for='save']`,\n            INVALID: `[data-for='invalid']`,\n        };\n        this.id = this.element.dataset.id;\n        this.controller = M.reactive[this.id];\n\n        // The component is created always pinned.\n        this.draggable = false;\n        // We want the element to be dragged like modal.\n        this.relativeDrag = true;\n        // Save warning (will be loaded when state is ready.\n        this.strings = {\n            savewarning: '',\n        };\n    }\n\n    /**\n     * Initial state ready method.\n     *\n     */\n    stateReady() {\n        // Enable drag and drop.\n        this.dragdrop = new DragDrop(this);\n\n        // Close button.\n        this.addEventListener(\n            this.getElement(this.selectors.CLOSE),\n            'click',\n            this.remove\n        );\n        // Highlight button.\n        if (this.controller.highlight) {\n            this._toggleButtonText(this.getElement(this.selectors.HIGHLIGHT));\n        }\n        this.addEventListener(\n            this.getElement(this.selectors.HIGHLIGHT),\n            'click',\n            () => {\n                this.controller.highlight = !this.controller.highlight;\n                this._toggleButtonText(this.getElement(this.selectors.HIGHLIGHT));\n            }\n        );\n        // Edit mode button.\n        this.addEventListener(\n            this.getElement(this.selectors.READMODE),\n            'click',\n            this._toggleEditMode\n        );\n        // Clean log and state.\n        this.addEventListener(\n            this.getElement(this.selectors.CLEAN),\n            'click',\n            this._cleanAreas\n        );\n        // Unpin panel butotn.\n        this.addEventListener(\n            this.getElement(this.selectors.PIN),\n            'click',\n            this._togglePin\n        );\n        // Save button, state format error message and state textarea.\n        this.getElement(this.selectors.SAVE).disabled = true;\n\n        this.addEventListener(\n            this.getElement(this.selectors.STATE),\n            'keyup',\n            debounce(this._checkJSON, 500)\n        );\n\n        this.addEventListener(\n            this.getElement(this.selectors.SAVE),\n            'click',\n            this._saveState\n        );\n        // Save the default save warning message.\n        this.strings.savewarning = this.getElement(this.selectors.INVALID)?.innerHTML ?? '';\n        // Add current state.\n        this._refreshState();\n    }\n\n    /**\n     * Remove all subcomponents dependencies.\n     */\n    destroy() {\n        if (this.dragdrop !== undefined) {\n            this.dragdrop.unregister();\n        }\n    }\n\n    /**\n     * Component watchers.\n     *\n     * @returns {Array} of watchers\n     */\n    getWatchers() {\n        return [\n            {watch: `reactives[${this.id}].lastChanges:updated`, handler: this._refreshLog},\n            {watch: `reactives[${this.id}].modified:updated`, handler: this._refreshState},\n            {watch: `reactives[${this.id}].readOnly:updated`, handler: this._refreshReadOnly},\n        ];\n    }\n\n    /**\n     * Wtacher method to refresh the log panel.\n     *\n     * @param {object} args\n     * @param {HTMLElement} args.element\n     */\n    _refreshLog({element}) {\n        const list = element?.lastChanges ?? [];\n\n        const logContent = list.join(\"\\n\");\n        // Append last log.\n        const target = this.getElement(this.selectors.LOG);\n        target.value += `\\n\\n= Transaction =\\n ${logContent}`;\n        target.scrollTop = target.scrollHeight;\n    }\n\n    /**\n     * Listener method to clean the log area.\n     */\n    _cleanAreas() {\n        let target = this.getElement(this.selectors.LOG);\n        target.value = '';\n\n        this._refreshState();\n    }\n\n    /**\n     * Watcher to refresh the state information.\n     */\n    _refreshState() {\n        const target = this.getElement(this.selectors.STATE);\n        target.value = JSON.stringify(this.controller.state, null, 4);\n    }\n\n    /**\n     * Watcher to update the read only information.\n     */\n    _refreshReadOnly() {\n        // Toggle the read mode button.\n        const target = this.getElement(this.selectors.READMODE);\n        if (target.dataset.readonly === undefined) {\n            target.dataset.readonly = target.innerHTML;\n        }\n        if (this.controller.readOnly) {\n            target.innerHTML = target.dataset.readonly;\n        } else {\n            target.innerHTML = target.dataset.alt;\n        }\n    }\n\n    /**\n     * Listener to toggle the edit mode of the component.\n     */\n    _toggleEditMode() {\n        this.controller.readOnly = !this.controller.readOnly;\n    }\n\n    /**\n     * Check that the edited state JSON is valid.\n     *\n     * Not all valid JSON are suitable for transforming the state. For example,\n     * the first level attributes cannot change the type.\n     *\n     * @return {undefined|array} Array of state updates.\n     */\n    _checkJSON() {\n        const invalid = this.getElement(this.selectors.INVALID);\n        const save = this.getElement(this.selectors.SAVE);\n\n        const edited = this.getElement(this.selectors.STATE).value;\n\n        const currentStateData = this.controller.stateData;\n\n        // Check if the json is tha same as state.\n        if (edited == JSON.stringify(this.controller.state, null, 4)) {\n            invalid.style.color = '';\n            invalid.innerHTML = '';\n            save.disabled = true;\n            return undefined;\n        }\n\n        // Check if the json format is valid.\n        try {\n            const newState = JSON.parse(edited);\n            // Check the first level did not change types.\n            const result = this._generateStateUpdates(currentStateData, newState);\n            // Enable save button.\n            invalid.style.color = '';\n            invalid.innerHTML = this.strings.savewarning;\n            save.disabled = false;\n            return result;\n        } catch (error) {\n            invalid.style.color = 'red';\n            invalid.innerHTML = error.message ?? 'Invalid JSON sctructure';\n            save.disabled = true;\n            return undefined;\n        }\n    }\n\n    /**\n     * Listener to save the current edited state into the real state.\n     */\n    _saveState() {\n        const updates = this._checkJSON();\n        if (!updates) {\n            return;\n        }\n        // Sent the updates to the state manager.\n        this.controller.processUpdates(updates);\n    }\n\n    /**\n     * Check that the edited state JSON is valid.\n     *\n     * Not all valid JSON are suitable for transforming the state. For example,\n     * the first level attributes cannot change the type. This method do a two\n     * steps comparison between the current state data and the new state data.\n     *\n     * A reactive state cannot be overridden like any other variable. To keep\n     * the watchers updated is necessary to transform the current state into\n     * the new one. As a result, this method generates all the necessary state\n     * updates to convert the state into the new state.\n     *\n     * @param {object} currentStateData\n     * @param {object} newStateData\n     * @return {array} Array of state updates.\n     * @throws {Error} is the structure is not compatible\n     */\n    _generateStateUpdates(currentStateData, newStateData) {\n\n        const updates = [];\n\n        const ids = {};\n\n        // Step 1: Add all overrides newStateData.\n        for (const [key, newValue] of Object.entries(newStateData)) {\n            // Check is it is new.\n            if (Array.isArray(newValue)) {\n                ids[key] = {};\n                newValue.forEach(element => {\n                    if (element.id === undefined) {\n                        throw Error(`Array ${key} element without id attribute`);\n                    }\n                    updates.push({\n                        name: key,\n                        action: 'override',\n                        fields: element,\n                    });\n                    const index = String(element.id).valueOf();\n                    ids[key][index] = true;\n                });\n            } else {\n                updates.push({\n                    name: key,\n                    action: 'override',\n                    fields: newValue,\n                });\n            }\n        }\n        // Step 2: delete unnecesary data from currentStateData.\n        for (const [key, oldValue] of Object.entries(currentStateData)) {\n            let deleteField = false;\n            // Check if the attribute is still there.\n            if (newStateData[key] === undefined) {\n                deleteField = true;\n            }\n            if (Array.isArray(oldValue)) {\n                if (!deleteField && ids[key] === undefined) {\n                    throw Error(`Array ${key} cannot change to object.`);\n                }\n                oldValue.forEach(element => {\n                    const index = String(element.id).valueOf();\n                    let deleteEntry = deleteField;\n                    // Check if the id is there.\n                    if (!deleteEntry && ids[key][index] === undefined) {\n                        deleteEntry = true;\n                    }\n                    if (deleteEntry) {\n                        updates.push({\n                            name: key,\n                            action: 'delete',\n                            fields: element,\n                        });\n                    }\n                });\n            } else {\n                if (!deleteField && ids[key] !== undefined) {\n                    throw Error(`Object ${key} cannot change to array.`);\n                }\n                if (deleteField) {\n                    updates.push({\n                        name: key,\n                        action: 'delete',\n                        fields: oldValue,\n                    });\n                }\n            }\n        }\n        // Delete all elements without action.\n        return updates;\n    }\n\n    // Drag and drop methods.\n\n    /**\n     * Get the draggable data of this component.\n     *\n     * @returns {Object} exported course module drop data\n     */\n    getDraggableData() {\n        return this.draggable;\n    }\n\n    /**\n     * The element drop end hook.\n     *\n     * @param {Object} dropdata the dropdata\n     * @param {Event} event the dropdata\n     */\n    dragEnd(dropdata, event) {\n        this.element.style.top = `${event.newFixedTop}px`;\n        this.element.style.left = `${event.newFixedLeft}px`;\n    }\n\n    /**\n     * Pin and unpin the panel.\n     */\n    _togglePin() {\n        this.draggable = !this.draggable;\n        this.dragdrop.setDraggable(this.draggable);\n        if (this.draggable) {\n            this._unpin();\n        } else {\n            this._pin();\n        }\n    }\n\n    /**\n     * Unpin the panel form the footer.\n     */\n    _unpin() {\n        // Find the initial spot.\n        const pageCenterY = window.innerHeight / 2;\n        const pageCenterX = window.innerWidth / 2;\n        // Put the element in the middle of the screen\n        const style = {\n            position: 'fixed',\n            resize: 'both',\n            overflow: 'auto',\n            height: '400px',\n            width: '400px',\n            top: `${pageCenterY - 200}px`,\n            left: `${pageCenterX - 200}px`,\n        };\n        Object.assign(this.element.style, style);\n        // Small also the text areas.\n        this.getElement(this.selectors.STATE).style.height = '50px';\n        this.getElement(this.selectors.LOG).style.height = '50px';\n\n        this._toggleButtonText(this.getElement(this.selectors.PIN));\n    }\n\n    /**\n     * Pin the panel into the footer.\n     */\n    _pin() {\n        const props = [\n            'position',\n            'resize',\n            'overflow',\n            'top',\n            'left',\n            'height',\n            'width',\n        ];\n        props.forEach(\n            prop => this.element.style.removeProperty(prop)\n        );\n        this._toggleButtonText(this.getElement(this.selectors.PIN));\n    }\n\n    /**\n     * Toogle the button text with the data-alt value.\n     *\n     * @param {Element} element the button element\n     */\n    _toggleButtonText(element) {\n        [element.innerHTML, element.dataset.alt] = [element.dataset.alt, element.innerHTML];\n    }\n\n}\n"],"names":["obj","_log","__esModule","default","_exports","init","target","selectors","element","document","getElementById","undefined","debug","GlobalDebugPanel","reactive","remove","initsubpanel","DebugInstanceSubpanel","BaseComponent","create","this","name","LOADERS","SUBPANEL","NOINSTANCES","LOG","classes","HIDE","subPanels","Set","stateReady","state","_updateReactivesPanels","getElement","innerHTML","getWatchers","watch","handler","_ref","_this$getElement","_this$getElement$clas","classList","toggle","reactives","size","forEach","instance","_createLoader","has","id","add","loaders","btn","createElement","dataset","appendChild","addEventListener","_openPanel","async","data","renderComponent","error","log","NAME","CLOSE","READMODE","HIGHLIGHT","STATE","CLEAN","PIN","SAVE","INVALID","controller","M","draggable","relativeDrag","strings","savewarning","_this$getElement$inne","_this$getElement2","dragdrop","DragDrop","highlight","_toggleButtonText","_toggleEditMode","_cleanAreas","_togglePin","disabled","debounce","_checkJSON","_saveState","_refreshState","destroy","unregister","concat","_refreshLog","_refreshReadOnly","_ref2","_element$lastChanges","logContent","lastChanges","join","value","scrollTop","scrollHeight","JSON","stringify","readonly","readOnly","alt","invalid","save","edited","currentStateData","stateData","style","color","newState","parse","result","_generateStateUpdates","_error$message","message","updates","processUpdates","newStateData","ids","key","newValue","Object","entries","Array","isArray","Error","push","action","fields","index","String","valueOf","oldValue","deleteField","deleteEntry","getDraggableData","dragEnd","dropdata","event","top","newFixedTop","left","newFixedLeft","setDraggable","_unpin","_pin","pageCenterY","window","innerHeight","pageCenterX","innerWidth","position","resize","overflow","height","width","assign","prop","removeProperty"],"mappings":"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"}