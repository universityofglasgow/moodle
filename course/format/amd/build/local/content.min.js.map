{"version":3,"file":"content.min.js","sources":["../../src/local/content.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Course index main component.\n *\n * @module     core_courseformat/local/content\n * @class      core_courseformat/local/content\n * @copyright  2020 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {BaseComponent} from 'core/reactive';\nimport {getCurrentCourseEditor} from 'core_courseformat/courseeditor';\nimport inplaceeditable from 'core/inplace_editable';\nimport Section from 'core_courseformat/local/content/section';\nimport CmItem from 'core_courseformat/local/content/section/cmitem';\n// Course actions is needed for actions that are not migrated to components.\nimport courseActions from 'core_course/actions';\nimport DispatchActions from 'core_courseformat/local/content/actions';\nimport * as CourseEvents from 'core_course/events';\n// The jQuery module is only used for interacting with Boostrap 4. It can we removed when MDL-71979 is integrated.\nimport jQuery from 'jquery';\n\nexport default class Component extends BaseComponent {\n\n    /**\n     * Constructor hook.\n     *\n     * @param {Object} descriptor the component descriptor\n     */\n    create(descriptor) {\n        // Optional component name for debugging.\n        this.name = 'course_format';\n        // Default query selectors.\n        this.selectors = {\n            SECTION: `[data-for='section']`,\n            SECTION_ITEM: `[data-for='section_title']`,\n            SECTION_CMLIST: `[data-for='cmlist']`,\n            COURSE_SECTIONLIST: `[data-for='course_sectionlist']`,\n            CM: `[data-for='cmitem']`,\n            PAGE: `#page`,\n            TOGGLER: `[data-action=\"togglecoursecontentsection\"]`,\n            COLLAPSE: `[data-toggle=\"collapse\"]`,\n            TOGGLEALL: `[data-toggle=\"toggleall\"]`,\n            // Formats can override the activity tag but a default one is needed to create new elements.\n            ACTIVITYTAG: 'li',\n            SECTIONTAG: 'li',\n        };\n        // Default classes to toggle on refresh.\n        this.classes = {\n            COLLAPSED: `collapsed`,\n            // Course content classes.\n            ACTIVITY: `activity`,\n            STATEDREADY: `stateready`,\n            SECTION: `section`,\n        };\n        // Array to save dettached elements during element resorting.\n        this.dettachedCms = {};\n        this.dettachedSections = {};\n        // Index of sections and cms components.\n        this.sections = {};\n        this.cms = {};\n        // The page section return.\n        this.sectionReturn = descriptor.sectionReturn ?? 0;\n    }\n\n    /**\n     * Static method to create a component instance form the mustahce template.\n     *\n     * @param {string} target the DOM main element or its ID\n     * @param {object} selectors optional css selector overrides\n     * @param {number} sectionReturn the content section return\n     * @return {Component}\n     */\n    static init(target, selectors, sectionReturn) {\n        return new Component({\n            element: document.getElementById(target),\n            reactive: getCurrentCourseEditor(),\n            selectors,\n            sectionReturn,\n        });\n    }\n\n    /**\n     * Initial state ready method.\n     *\n     * @param {Object} state the state data\n     */\n    stateReady(state) {\n        this._indexContents();\n        // Activate section togglers.\n        this.addEventListener(this.element, 'click', this._sectionTogglers);\n\n        // Collapse/Expand all sections button.\n        const toogleAll = this.getElement(this.selectors.TOGGLEALL);\n        if (toogleAll) {\n\n            // Ensure collapse menu button adds aria-controls attribute referring to each collapsible element.\n            const collapseElements = this.getElements(this.selectors.COLLAPSE);\n            const collapseElementIds = [...collapseElements].map(element => element.id);\n            toogleAll.setAttribute('aria-controls', collapseElementIds.join(' '));\n\n            this.addEventListener(toogleAll, 'click', this._allSectionToggler);\n            this.addEventListener(toogleAll, 'keydown', e => {\n                // Collapse/expand all sections when Space key is pressed on the toggle button.\n                if (e.key === ' ') {\n                    this._allSectionToggler(e);\n                }\n            });\n            this._refreshAllSectionsToggler(state);\n        }\n\n        if (this.reactive.supportComponents) {\n            // Actions are only available in edit mode.\n            if (this.reactive.isEditing) {\n                new DispatchActions(this);\n            }\n\n            // Mark content as state ready.\n            this.element.classList.add(this.classes.STATEDREADY);\n        }\n\n        // Capture completion events.\n        this.addEventListener(\n            this.element,\n            CourseEvents.manualCompletionToggled,\n            this._completionHandler\n        );\n\n        // Capture page scroll to update page item.\n        this.addEventListener(\n            document.querySelector(this.selectors.PAGE),\n            \"scroll\",\n            this._scrollHandler\n        );\n    }\n\n    /**\n     * Setup sections toggler.\n     *\n     * Toggler click is delegated to the main course content element because new sections can\n     * appear at any moment and this way we prevent accidental double bindings.\n     *\n     * @param {Event} event the triggered event\n     */\n    _sectionTogglers(event) {\n        const sectionlink = event.target.closest(this.selectors.TOGGLER);\n        const closestCollapse = event.target.closest(this.selectors.COLLAPSE);\n        // Assume that chevron is the only collapse toggler in a section heading;\n        // I think this is the most efficient way to verify at the moment.\n        const isChevron = closestCollapse?.closest(this.selectors.SECTION_ITEM);\n\n        if (sectionlink || isChevron) {\n\n            const section = event.target.closest(this.selectors.SECTION);\n            const toggler = section.querySelector(this.selectors.COLLAPSE);\n            const isCollapsed = toggler?.classList.contains(this.classes.COLLAPSED) ?? false;\n\n            if (isChevron || isCollapsed) {\n                // Update the state.\n                const sectionId = section.getAttribute('data-id');\n                this.reactive.dispatch(\n                    'sectionContentCollapsed',\n                    [sectionId],\n                    !isCollapsed\n                );\n            }\n        }\n    }\n\n    /**\n     * Handle the collapse/expand all sections button.\n     *\n     * Toggler click is delegated to the main course content element because new sections can\n     * appear at any moment and this way we prevent accidental double bindings.\n     *\n     * @param {Event} event the triggered event\n     */\n    _allSectionToggler(event) {\n        event.preventDefault();\n\n        const target = event.target.closest(this.selectors.TOGGLEALL);\n        const isAllCollapsed = target.classList.contains(this.classes.COLLAPSED);\n\n        const course = this.reactive.get('course');\n        this.reactive.dispatch(\n            'sectionContentCollapsed',\n            course.sectionlist ?? [],\n            !isAllCollapsed\n        );\n    }\n\n    /**\n     * Return the component watchers.\n     *\n     * @returns {Array} of watchers\n     */\n    getWatchers() {\n        // Section return is a global page variable but most formats define it just before start printing\n        // the course content. This is the reason why we define this page setting here.\n        this.reactive.sectionReturn = this.sectionReturn;\n\n        // Check if the course format is compatible with reactive components.\n        if (!this.reactive.supportComponents) {\n            return [];\n        }\n        return [\n            // State changes that require to reload some course modules.\n            {watch: `cm.visible:updated`, handler: this._reloadCm},\n            {watch: `cm.stealth:updated`, handler: this._reloadCm},\n            // Update section number and title.\n            {watch: `section.number:updated`, handler: this._refreshSectionNumber},\n            // Collapse and expand sections.\n            {watch: `section.contentcollapsed:updated`, handler: this._refreshSectionCollapsed},\n            // Sections and cm sorting.\n            {watch: `transaction:start`, handler: this._startProcessing},\n            {watch: `course.sectionlist:updated`, handler: this._refreshCourseSectionlist},\n            {watch: `section.cmlist:updated`, handler: this._refreshSectionCmlist},\n            // Reindex sections and cms.\n            {watch: `state:updated`, handler: this._indexContents},\n            // State changes thaty require to reload course modules.\n            {watch: `cm.visible:updated`, handler: this._reloadCm},\n            {watch: `cm.sectionid:updated`, handler: this._reloadCm},\n        ];\n    }\n\n    /**\n     * Update section collapsed state via bootstrap 4 if necessary.\n     *\n     * Formats that do not use bootstrap 4 must override this method in order to keep the section\n     * toggling working.\n     *\n     * @param {object} args\n     * @param {Object} args.state The state data\n     * @param {Object} args.element The element to update\n     */\n    _refreshSectionCollapsed({state, element}) {\n        const target = this.getElement(this.selectors.SECTION, element.id);\n        if (!target) {\n            throw new Error(`Unknown section with ID ${element.id}`);\n        }\n        // Check if it is already done.\n        const toggler = target.querySelector(this.selectors.COLLAPSE);\n        const isCollapsed = toggler?.classList.contains(this.classes.COLLAPSED) ?? false;\n\n        if (element.contentcollapsed !== isCollapsed) {\n            let collapsibleId = toggler.dataset.target ?? toggler.getAttribute(\"href\");\n            if (!collapsibleId) {\n                return;\n            }\n            collapsibleId = collapsibleId.replace('#', '');\n            const collapsible = document.getElementById(collapsibleId);\n            if (!collapsible) {\n                return;\n            }\n\n            // Course index is based on Bootstrap 4 collapsibles. To collapse them we need jQuery to\n            // interact with collapsibles methods. Hopefully, this will change in Bootstrap 5 because\n            // it does not require jQuery anymore (when MDL-71979 is integrated).\n            jQuery(collapsible).collapse(element.contentcollapsed ? 'hide' : 'show');\n        }\n\n        this._refreshAllSectionsToggler(state);\n    }\n\n    /**\n     * Refresh the collapse/expand all sections element.\n     *\n     * @param {Object} state The state data\n     */\n    _refreshAllSectionsToggler(state) {\n        const target = this.getElement(this.selectors.TOGGLEALL);\n        if (!target) {\n            return;\n        }\n        // Check if we have all sections collapsed/expanded.\n        let allcollapsed = true;\n        let allexpanded = true;\n        state.section.forEach(\n            section => {\n                allcollapsed = allcollapsed && section.contentcollapsed;\n                allexpanded = allexpanded && !section.contentcollapsed;\n            }\n        );\n        if (allcollapsed) {\n            target.classList.add(this.classes.COLLAPSED);\n            target.setAttribute('aria-expanded', false);\n        }\n        if (allexpanded) {\n            target.classList.remove(this.classes.COLLAPSED);\n            target.setAttribute('aria-expanded', true);\n        }\n    }\n\n    /**\n     * Setup the component to start a transaction.\n     *\n     * Some of the course actions replaces the current DOM element with a new one before updating the\n     * course state. This means the component cannot preload any index properly until the transaction starts.\n     *\n     */\n    _startProcessing() {\n        // During a section or cm sorting, some elements could be dettached from the DOM and we\n        // need to store somewhare in case they are needed later.\n        this.dettachedCms = {};\n        this.dettachedSections = {};\n    }\n\n    /**\n     * Activity manual completion listener.\n     *\n     * @param {Event} event the custom ecent\n     */\n    _completionHandler({detail}) {\n        if (detail === undefined) {\n            return;\n        }\n        this.reactive.dispatch('cmCompletion', [detail.cmid], detail.completed);\n    }\n\n    /**\n     * Check the current page scroll and update the active element if necessary.\n     */\n    _scrollHandler() {\n        const pageOffset = document.querySelector(this.selectors.PAGE).scrollTop;\n        const items = this.reactive.getExporter().allItemsArray(this.reactive.state);\n        // Check what is the active element now.\n        let pageItem = null;\n        items.every(item => {\n            const index = (item.type === 'section') ? this.sections : this.cms;\n            if (index[item.id] === undefined) {\n                return true;\n            }\n\n            const element = index[item.id].element;\n            // Activities without url can only be page items in edit mode.\n            if (item.type === 'cm' && !item.url && !this.reactive.isEditing) {\n                return pageOffset >= element.offsetTop;\n            }\n            pageItem = item;\n            return pageOffset >= element.offsetTop;\n        });\n        if (pageItem) {\n            this.reactive.dispatch('setPageItem', pageItem.type, pageItem.id);\n        }\n    }\n\n    /**\n     * Update a course section when the section number changes.\n     *\n     * The courseActions module used for most course section tools still depends on css classes and\n     * section numbers (not id). To prevent inconsistencies when a section is moved, we need to refresh\n     * the\n     *\n     * Course formats can override the section title rendering so the frontend depends heavily on backend\n     * rendering. Luckily in edit mode we can trigger a title update using the inplace_editable module.\n     *\n     * @param {Object} param\n     * @param {Object} param.element details the update details.\n     */\n    _refreshSectionNumber({element}) {\n        // Find the element.\n        const target = this.getElement(this.selectors.SECTION, element.id);\n        if (!target) {\n            // Job done. Nothing to refresh.\n            return;\n        }\n        // Update section numbers in all data, css and YUI attributes.\n        target.id = `section-${element.number}`;\n        // YUI uses section number as section id in data-sectionid, in principle if a format use components\n        // don't need this sectionid attribute anymore, but we keep the compatibility in case some plugin\n        // use it for legacy purposes.\n        target.dataset.sectionid = element.number;\n        // The data-number is the attribute used by components to store the section number.\n        target.dataset.number = element.number;\n\n        // Update title and title inplace editable, if any.\n        const inplace = inplaceeditable.getInplaceEditable(target.querySelector(this.selectors.SECTION_ITEM));\n        if (inplace) {\n            // The course content HTML can be modified at any moment, so the function need to do some checkings\n            // to make sure the inplace editable still represents the same itemid.\n            const currentvalue = inplace.getValue();\n            const currentitemid = inplace.getItemId();\n            // Unnamed sections must be recalculated.\n            if (inplace.getValue() === '') {\n                // The value to send can be an empty value if it is a default name.\n                if (currentitemid == element.id && (currentvalue != element.rawtitle || element.rawtitle == '')) {\n                    inplace.setValue(element.rawtitle);\n                }\n            }\n        }\n    }\n\n    /**\n     * Refresh a section cm list.\n     *\n     * @param {Object} param\n     * @param {Object} param.element details the update details.\n     */\n    _refreshSectionCmlist({element}) {\n        const cmlist = element.cmlist ?? [];\n        const section = this.getElement(this.selectors.SECTION, element.id);\n        const listparent = section?.querySelector(this.selectors.SECTION_CMLIST);\n        // A method to create a fake element to be replaced when the item is ready.\n        const createCm = this._createCmItem.bind(this);\n        if (listparent) {\n            this._fixOrder(listparent, cmlist, this.selectors.CM, this.dettachedCms, createCm);\n        }\n    }\n\n    /**\n     * Refresh the section list.\n     *\n     * @param {Object} param\n     * @param {Object} param.element details the update details.\n     */\n    _refreshCourseSectionlist({element}) {\n        // If we have a section return means we only show a single section so no need to fix order.\n        if (this.reactive.sectionReturn != 0) {\n            return;\n        }\n        const sectionlist = element.sectionlist ?? [];\n        const listparent = this.getElement(this.selectors.COURSE_SECTIONLIST);\n        // For now section cannot be created at a frontend level.\n        const createSection = this._createSectionItem.bind(this);\n        if (listparent) {\n            this._fixOrder(listparent, sectionlist, this.selectors.SECTION, this.dettachedSections, createSection);\n        }\n    }\n\n    /**\n     * Regenerate content indexes.\n     *\n     * This method is used when a legacy action refresh some content element.\n     */\n    _indexContents() {\n        // Find unindexed sections.\n        this._scanIndex(\n            this.selectors.SECTION,\n            this.sections,\n            (item) => {\n                return new Section(item);\n            }\n        );\n\n        // Find unindexed cms.\n        this._scanIndex(\n            this.selectors.CM,\n            this.cms,\n            (item) => {\n                return new CmItem(item);\n            }\n        );\n    }\n\n    /**\n     * Reindex a content (section or cm) of the course content.\n     *\n     * This method is used internally by _indexContents.\n     *\n     * @param {string} selector the DOM selector to scan\n     * @param {*} index the index attribute to update\n     * @param {*} creationhandler method to create a new indexed element\n     */\n    _scanIndex(selector, index, creationhandler) {\n        const items = this.getElements(`${selector}:not([data-indexed])`);\n        items.forEach((item) => {\n            if (!item?.dataset?.id) {\n                return;\n            }\n            // Delete previous item component.\n            if (index[item.dataset.id] !== undefined) {\n                index[item.dataset.id].unregister();\n            }\n            // Create the new component.\n            index[item.dataset.id] = creationhandler({\n                ...this,\n                element: item,\n            });\n            // Mark as indexed.\n            item.dataset.indexed = true;\n        });\n    }\n\n    /**\n     * Reload a course module contents.\n     *\n     * Most course module HTML is still strongly backend dependant.\n     * Some changes require to get a new version of the module.\n     *\n     * @param {object} param0 the watcher details\n     * @param {object} param0.element the state object\n     */\n    _reloadCm({element}) {\n        const cmitem = this.getElement(this.selectors.CM, element.id);\n        if (cmitem) {\n            const promise = courseActions.refreshModule(cmitem, element.id);\n            promise.then(() => {\n                this._indexContents();\n                return;\n            }).catch();\n        }\n    }\n\n    /**\n     * Reload a course section contents.\n     *\n     * Section HTML is still strongly backend dependant.\n     * Some changes require to get a new version of the section.\n     *\n     * @param {details} param0 the watcher details\n     * @param {object} param0.element the state object\n     */\n    _reloadSection({element}) {\n        const sectionitem = this.getElement(this.selectors.SECTION, element.id);\n        if (sectionitem) {\n            const promise = courseActions.refreshSection(sectionitem, element.id);\n            promise.then(() => {\n                this._indexContents();\n                return;\n            }).catch();\n        }\n    }\n\n    /**\n     * Create a new course module item in a section.\n     *\n     * Thos method will append a fake item in the container and trigger an ajax request to\n     * replace the fake element by the real content.\n     *\n     * @param {Element} container the container element (section)\n     * @param {Number} cmid the course-module ID\n     * @returns {Element} the created element\n     */\n    _createCmItem(container, cmid) {\n        const newItem = document.createElement(this.selectors.ACTIVITYTAG);\n        newItem.dataset.for = 'cmitem';\n        newItem.dataset.id = cmid;\n        // The legacy actions.js requires a specific ID and class to refresh the CM.\n        newItem.id = `module-${cmid}`;\n        newItem.classList.add(this.classes.ACTIVITY);\n        container.append(newItem);\n        this._reloadCm({\n            element: this.reactive.get('cm', cmid),\n        });\n        return newItem;\n    }\n\n    /**\n     * Create a new section item.\n     *\n     * This method will append a fake item in the container and trigger an ajax request to\n     * replace the fake element by the real content.\n     *\n     * @param {Element} container the container element (section)\n     * @param {Number} sectionid the course-module ID\n     * @returns {Element} the created element\n     */\n    _createSectionItem(container, sectionid) {\n        const section = this.reactive.get('section', sectionid);\n        const newItem = document.createElement(this.selectors.SECTIONTAG);\n        newItem.dataset.for = 'section';\n        newItem.dataset.id = sectionid;\n        newItem.dataset.number = section.number;\n        // The legacy actions.js requires a specific ID and class to refresh the section.\n        newItem.id = `section-${sectionid}`;\n        newItem.classList.add(this.classes.SECTION);\n        container.append(newItem);\n        this._reloadSection({\n            element: section,\n        });\n        return newItem;\n    }\n\n    /**\n     * Fix/reorder the section or cms order.\n     *\n     * @param {Element} container the HTML element to reorder.\n     * @param {Array} neworder an array with the ids order\n     * @param {string} selector the element selector\n     * @param {Object} dettachedelements a list of dettached elements\n     * @param {function} createMethod method to create missing elements\n     */\n    async _fixOrder(container, neworder, selector, dettachedelements, createMethod) {\n        if (container === undefined) {\n            return;\n        }\n\n        // Empty lists should not be visible.\n        if (!neworder.length) {\n            container.classList.add('hidden');\n            container.innerHTML = '';\n            return;\n        }\n\n        // Grant the list is visible (in case it was empty).\n        container.classList.remove('hidden');\n\n        // Move the elements in order at the beginning of the list.\n        neworder.forEach((itemid, index) => {\n            let item = this.getElement(selector, itemid) ?? dettachedelements[itemid] ?? createMethod(container, itemid);\n            if (item === undefined) {\n                // Missing elements cannot be sorted.\n                return;\n            }\n            // Get the current elemnt at that position.\n            const currentitem = container.children[index];\n            if (currentitem === undefined) {\n                container.append(item);\n                return;\n            }\n            if (currentitem !== item) {\n                container.insertBefore(item, currentitem);\n            }\n        });\n\n        // Dndupload add a fake element we need to keep.\n        let dndFakeActivity;\n\n        // Remove the remaining elements.\n        while (container.children.length > neworder.length) {\n            const lastchild = container.lastChild;\n            if (lastchild?.classList?.contains('dndupload-preview')) {\n                dndFakeActivity = lastchild;\n            } else {\n                dettachedelements[lastchild?.dataset?.id ?? 0] = lastchild;\n            }\n            container.removeChild(lastchild);\n        }\n        // Restore dndupload fake element.\n        if (dndFakeActivity) {\n            container.append(dndFakeActivity);\n        }\n    }\n}\n"],"names":["_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","_interopRequireDefault","obj","__esModule","default","_inplace_editable","_section","_cmitem","_actions","_actions2","CourseEvents","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_interopRequireWildcard","_jquery","Component","BaseComponent","create","descriptor","_descriptor$sectionRe","this","name","selectors","SECTION","SECTION_ITEM","SECTION_CMLIST","COURSE_SECTIONLIST","CM","PAGE","TOGGLER","COLLAPSE","TOGGLEALL","ACTIVITYTAG","SECTIONTAG","classes","COLLAPSED","ACTIVITY","STATEDREADY","dettachedCms","dettachedSections","sections","cms","sectionReturn","static","target","element","document","getElementById","reactive","getCurrentCourseEditor","stateReady","state","_indexContents","addEventListener","_sectionTogglers","toogleAll","getElement","collapseElementIds","getElements","map","id","setAttribute","join","_allSectionToggler","e","_refreshAllSectionsToggler","supportComponents","isEditing","DispatchActions","classList","add","manualCompletionToggled","_completionHandler","querySelector","_scrollHandler","event","sectionlink","closest","closestCollapse","isChevron","_toggler$classList$co","section","toggler","isCollapsed","contains","sectionId","getAttribute","dispatch","_course$sectionlist","preventDefault","isAllCollapsed","course","sectionlist","getWatchers","watch","handler","_reloadCm","_refreshSectionNumber","_refreshSectionCollapsed","_startProcessing","_refreshCourseSectionlist","_refreshSectionCmlist","_ref","_toggler$classList$co2","Error","concat","contentcollapsed","_toggler$dataset$targ","collapsibleId","dataset","replace","collapsible","jQuery","collapse","allcollapsed","allexpanded","forEach","remove","_ref2","detail","undefined","cmid","completed","pageOffset","scrollTop","items","getExporter","allItemsArray","pageItem","every","item","index","type","url","offsetTop","_ref3","number","sectionid","inplace","inplaceeditable","getInplaceEditable","currentvalue","getValue","currentitemid","getItemId","rawtitle","setValue","_ref4","_element$cmlist","cmlist","listparent","createCm","_createCmItem","bind","_fixOrder","_ref5","_element$sectionlist","createSection","_createSectionItem","_scanIndex","Section","CmItem","selector","creationhandler","_item$dataset","unregister","indexed","_ref6","cmitem","courseActions","refreshModule","then","catch","_reloadSection","_ref7","sectionitem","refreshSection","container","newItem","createElement","for","append","async","neworder","dettachedelements","createMethod","length","innerHTML","dndFakeActivity","itemid","_ref8","_this$getElement","currentitem","children","insertBefore","_lastchild$classList","lastchild","lastChild","_lastchild$dataset$id","_lastchild$dataset","removeChild","_exports"],"mappings":"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"}