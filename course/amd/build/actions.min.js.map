{"version":3,"file":"actions.min.js","sources":["../src/actions.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Various actions on modules and sections in the editing mode - hiding, duplicating, deleting, etc.\n *\n * @module     core_course/actions\n * @copyright  2016 Marina Glancy\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since      3.3\n */\ndefine(\n    [\n        'jquery',\n        'core/ajax',\n        'core/templates',\n        'core/notification',\n        'core/str',\n        'core/url',\n        'core/yui',\n        'core/modal_factory',\n        'core/modal_events',\n        'core/key_codes',\n        'core/log',\n        'core_courseformat/courseeditor',\n        'core/event_dispatcher',\n        'core_course/events'\n    ],\n    function(\n        $,\n        ajax,\n        templates,\n        notification,\n        str,\n        url,\n        Y,\n        ModalFactory,\n        ModalEvents,\n        KeyCodes,\n        log,\n        editor,\n        EventDispatcher,\n        CourseEvents\n    ) {\n\n        // Eventually, core_courseformat/local/content/actions will handle all actions for\n        // component compatible formats and the default actions.js won't be necessary anymore.\n        // Meanwhile, we filter the migrated actions.\n        const componentActions = [\n            'moveSection', 'moveCm', 'addSection', 'deleteSection', 'sectionHide', 'sectionShow',\n            'cmHide', 'cmShow', 'cmStealth',\n        ];\n\n        // The course reactive instance.\n        const courseeditor = editor.getCurrentCourseEditor();\n\n        // The current course format name (loaded on init).\n        let formatname;\n\n        var CSS = {\n            EDITINPROGRESS: 'editinprogress',\n            SECTIONDRAGGABLE: 'sectiondraggable',\n            EDITINGMOVE: 'editing_move'\n        };\n        var SELECTOR = {\n            ACTIVITYLI: 'li.activity',\n            ACTIONAREA: '.actions',\n            ACTIVITYACTION: 'a.cm-edit-action',\n            MENU: '.moodle-actionmenu[data-enhance=moodle-core-actionmenu]',\n            TOGGLE: '.toggle-display,.dropdown-toggle',\n            SECTIONLI: 'li.section',\n            SECTIONACTIONMENU: '.section_action_menu',\n            ADDSECTIONS: '.changenumsections [data-add-sections]',\n            SECTIONBADGES: '[data-region=\"sectionbadges\"]',\n        };\n\n        Y.use('moodle-course-coursebase', function() {\n            var courseformatselector = M.course.format.get_section_selector();\n            if (courseformatselector) {\n                SELECTOR.SECTIONLI = courseformatselector;\n            }\n        });\n\n        /**\n         * Dispatch event wrapper.\n         *\n         * Old jQuery events will be replaced by native events gradually.\n         *\n         * @method dispatchEvent\n         * @param {String} eventName The name of the event\n         * @param {Object} detail Any additional details to pass into the eveent\n         * @param {Node|HTMLElement} container The point at which to dispatch the event\n         * @param {Object} options\n         * @param {Boolean} options.bubbles Whether to bubble up the DOM\n         * @param {Boolean} options.cancelable Whether preventDefault() can be called\n         * @param {Boolean} options.composed Whether the event can bubble across the ShadowDOM boundary\n         * @returns {CustomEvent}\n         */\n        const dispatchEvent = function(eventName, detail, container, options) {\n            // Most actions still uses jQuery node instead of regular HTMLElement.\n            if (!(container instanceof Element) && container.get !== undefined) {\n                container = container.get(0);\n            }\n            return EventDispatcher.dispatchEvent(eventName, detail, container, options);\n        };\n\n        /**\n         * Wrapper for Y.Moodle.core_course.util.cm.getId\n         *\n         * @param {JQuery} element\n         * @returns {Integer}\n         */\n        var getModuleId = function(element) {\n            // Check if we have a data-id first.\n            const item = element.get(0);\n            if (item.dataset.id) {\n                return item.dataset.id;\n            }\n            // Use YUI way if data-id is not present.\n            let id;\n            Y.use('moodle-course-util', function(Y) {\n                id = Y.Moodle.core_course.util.cm.getId(Y.Node(item));\n            });\n            return id;\n        };\n\n        /**\n         * Wrapper for Y.Moodle.core_course.util.cm.getName\n         *\n         * @param {JQuery} element\n         * @returns {String}\n         */\n        var getModuleName = function(element) {\n            var name;\n            Y.use('moodle-course-util', function(Y) {\n                name = Y.Moodle.core_course.util.cm.getName(Y.Node(element.get(0)));\n            });\n            // Check if we have the name in the course state.\n            const state = courseeditor.state;\n            const cmid = getModuleId(element);\n            if (!name && state && cmid) {\n                name = state.cm.get(cmid)?.name;\n            }\n            return name;\n        };\n\n        /**\n         * Wrapper for M.util.add_spinner for an activity\n         *\n         * @param {JQuery} activity\n         * @returns {Node}\n         */\n        var addActivitySpinner = function(activity) {\n            activity.addClass(CSS.EDITINPROGRESS);\n            var actionarea = activity.find(SELECTOR.ACTIONAREA).get(0);\n            if (actionarea) {\n                var spinner = M.util.add_spinner(Y, Y.Node(actionarea));\n                spinner.show();\n                // Lock the activity state element.\n                if (activity.data('id') !== undefined) {\n                    courseeditor.dispatch('cmLock', [activity.data('id')], true);\n                }\n                return spinner;\n            }\n            return null;\n        };\n\n        /**\n         * Wrapper for M.util.add_spinner for a section\n         *\n         * @param {JQuery} sectionelement\n         * @returns {Node}\n         */\n        var addSectionSpinner = function(sectionelement) {\n            sectionelement.addClass(CSS.EDITINPROGRESS);\n            var actionarea = sectionelement.find(SELECTOR.SECTIONACTIONMENU).get(0);\n            if (actionarea) {\n                var spinner = M.util.add_spinner(Y, Y.Node(actionarea));\n                spinner.show();\n                // Lock the section state element.\n                if (sectionelement.data('id') !== undefined) {\n                    courseeditor.dispatch('sectionLock', [sectionelement.data('id')], true);\n                }\n                return spinner;\n            }\n            return null;\n        };\n\n        /**\n         * Wrapper for M.util.add_lightbox\n         *\n         * @param {JQuery} sectionelement\n         * @returns {Node}\n         */\n        var addSectionLightbox = function(sectionelement) {\n            const item = sectionelement.get(0);\n            var lightbox = M.util.add_lightbox(Y, Y.Node(item));\n            if (item.dataset.for == 'section' && item.dataset.id) {\n                courseeditor.dispatch('sectionLock', [item.dataset.id], true);\n                lightbox.setAttribute('data-state', 'section');\n                lightbox.setAttribute('data-state-id', item.dataset.id);\n            }\n            lightbox.show();\n            return lightbox;\n        };\n\n        /**\n         * Removes the spinner element\n         *\n         * @param {JQuery} element\n         * @param {Node} spinner\n         * @param {Number} delay\n         */\n        var removeSpinner = function(element, spinner, delay) {\n            window.setTimeout(function() {\n                element.removeClass(CSS.EDITINPROGRESS);\n                if (spinner) {\n                    spinner.hide();\n                }\n                // Unlock the state element.\n                if (element.data('id') !== undefined) {\n                    const mutation = (element.data('for') === 'section') ? 'sectionLock' : 'cmLock';\n                    courseeditor.dispatch(mutation, [element.data('id')], false);\n                }\n            }, delay);\n        };\n\n        /**\n         * Removes the lightbox element\n         *\n         * @param {Node} lightbox lighbox YUI element returned by addSectionLightbox\n         * @param {Number} delay\n         */\n        var removeLightbox = function(lightbox, delay) {\n            if (lightbox) {\n                window.setTimeout(function() {\n                    lightbox.hide();\n                    // Unlock state if necessary.\n                    if (lightbox.getAttribute('data-state')) {\n                        courseeditor.dispatch(\n                            `${lightbox.getAttribute('data-state')}Lock`,\n                            [lightbox.getAttribute('data-state-id')],\n                            false\n                        );\n                    }\n                }, delay);\n            }\n        };\n\n        /**\n         * Initialise action menu for the element (section or module)\n         *\n         * @param {String} elementid CSS id attribute of the element\n         */\n        var initActionMenu = function(elementid) {\n            // Initialise action menu in the new activity.\n            Y.use('moodle-course-coursebase', function() {\n                M.course.coursebase.invoke_function('setup_for_resource', '#' + elementid);\n            });\n            if (M.core.actionmenu && M.core.actionmenu.newDOMNode) {\n                M.core.actionmenu.newDOMNode(Y.one('#' + elementid));\n            }\n        };\n\n        /**\n         * Returns focus to the element that was clicked or \"Edit\" link if element is no longer visible.\n         *\n         * @param {String} elementId CSS id attribute of the element\n         * @param {String} action data-action property of the element that was clicked\n         */\n        var focusActionItem = function(elementId, action) {\n            var mainelement = $('#' + elementId);\n            var selector = '[data-action=' + action + ']';\n            if (action === 'groupsseparate' || action === 'groupsvisible' || action === 'groupsnone') {\n                // New element will have different data-action.\n                selector = '[data-action=groupsseparate],[data-action=groupsvisible],[data-action=groupsnone]';\n            }\n            if (mainelement.find(selector).is(':visible')) {\n                mainelement.find(selector).focus();\n            } else {\n                // Element not visible, focus the \"Edit\" link.\n                mainelement.find(SELECTOR.MENU).find(SELECTOR.TOGGLE).focus();\n            }\n        };\n\n        /**\n         * Find next <a> after the element\n         *\n         * @param {JQuery} mainElement element that is about to be deleted\n         * @returns {JQuery}\n         */\n        var findNextFocusable = function(mainElement) {\n            var tabables = $(\"a:visible\");\n            var isInside = false;\n            var foundElement = null;\n            tabables.each(function() {\n                if ($.contains(mainElement[0], this)) {\n                    isInside = true;\n                } else if (isInside) {\n                    foundElement = this;\n                    return false; // Returning false in .each() is equivalent to \"break;\" inside the loop in php.\n                }\n                return true;\n            });\n            return foundElement;\n        };\n\n        /**\n         * Performs an action on a module (moving, deleting, duplicating, hiding, etc.)\n         *\n         * @param {JQuery} moduleElement activity element we perform action on\n         * @param {Number} cmid\n         * @param {JQuery} target the element (menu item) that was clicked\n         */\n        var editModule = function(moduleElement, cmid, target) {\n            var action = target.attr('data-action');\n            var spinner = addActivitySpinner(moduleElement);\n            var promises = ajax.call([{\n                methodname: 'core_course_edit_module',\n                args: {id: cmid,\n                    action: action,\n                    sectionreturn: target.attr('data-sectionreturn') ? target.attr('data-sectionreturn') : 0\n                }\n            }], true);\n\n            var lightbox;\n            if (action === 'duplicate') {\n                lightbox = addSectionLightbox(target.closest(SELECTOR.SECTIONLI));\n            }\n            $.when.apply($, promises)\n                .done(function(data) {\n                    var elementToFocus = findNextFocusable(moduleElement);\n                    moduleElement.replaceWith(data);\n                    let affectedids = [];\n                    // Initialise action menu for activity(ies) added as a result of this.\n                    $('<div>' + data + '</div>').find(SELECTOR.ACTIVITYLI).each(function(index) {\n                        initActionMenu($(this).attr('id'));\n                        if (index === 0) {\n                            focusActionItem($(this).attr('id'), action);\n                            elementToFocus = null;\n                        }\n                        // Save any activity id in cmids.\n                        affectedids.push(getModuleId($(this)));\n                    });\n                    // In case of activity deletion focus the next focusable element.\n                    if (elementToFocus) {\n                        elementToFocus.focus();\n                    }\n                    // Remove spinner and lightbox with a delay.\n                    removeSpinner(moduleElement, spinner, 400);\n                    removeLightbox(lightbox, 400);\n                    // Trigger event that can be observed by course formats.\n                    moduleElement.trigger($.Event('coursemoduleedited', {ajaxreturn: data, action: action}));\n\n                    // Modify cm state.\n                    courseeditor.dispatch('legacyActivityAction', action, cmid, affectedids);\n\n                }).fail(function(ex) {\n                    // Remove spinner and lightbox.\n                    removeSpinner(moduleElement, spinner);\n                    removeLightbox(lightbox);\n                    // Trigger event that can be observed by course formats.\n                    var e = $.Event('coursemoduleeditfailed', {exception: ex, action: action});\n                    moduleElement.trigger(e);\n                    if (!e.isDefaultPrevented()) {\n                        notification.exception(ex);\n                    }\n                });\n        };\n\n        /**\n         * Requests html for the module via WS core_course_get_module and updates the module on the course page\n         *\n         * Used after d&d of the module to another section\n         *\n         * @param {JQuery|Element} element\n         * @param {Number} cmid\n         * @param {Number} sectionreturn\n         * @return {Promise} the refresh promise\n         */\n        var refreshModule = function(element, cmid, sectionreturn) {\n\n            if (sectionreturn === undefined) {\n                sectionreturn = courseeditor.sectionReturn;\n            }\n\n            const activityElement = $(element);\n            var spinner = addActivitySpinner(activityElement);\n            var promises = ajax.call([{\n                methodname: 'core_course_get_module',\n                args: {id: cmid, sectionreturn: sectionreturn}\n            }], true);\n\n            return new Promise((resolve, reject) => {\n                $.when.apply($, promises)\n                    .done(function(data) {\n                        removeSpinner(activityElement, spinner, 400);\n                        replaceActivityHtmlWith(data);\n                        resolve(data);\n                    }).fail(function() {\n                        removeSpinner(activityElement, spinner);\n                        reject();\n                    });\n            });\n        };\n\n        /**\n         * Requests html for the section via WS core_course_edit_section and updates the section on the course page\n         *\n         * @param {JQuery|Element} element\n         * @param {Number} sectionid\n         * @param {Number} sectionreturn\n         * @return {Promise} the refresh promise\n         */\n        var refreshSection = function(element, sectionid, sectionreturn) {\n\n            if (sectionreturn === undefined) {\n                sectionreturn = courseeditor.sectionReturn;\n            }\n\n            const sectionElement = $(element);\n            const action = 'refresh';\n            const promises = ajax.call([{\n                methodname: 'core_course_edit_section',\n                args: {id: sectionid, action, sectionreturn},\n            }], true);\n\n            var spinner = addSectionSpinner(sectionElement);\n            return new Promise((resolve, reject) => {\n                $.when.apply($, promises)\n                    .done(dataencoded => {\n\n                        removeSpinner(sectionElement, spinner);\n                        const data = $.parseJSON(dataencoded);\n\n                        const newSectionElement = $(data.content);\n                        sectionElement.replaceWith(newSectionElement);\n\n                        // Init modules menus.\n                        $(`${SELECTOR.SECTIONLI}#${sectionid} ${SELECTOR.ACTIVITYLI}`).each(\n                            (index, activity) => {\n                                initActionMenu(activity.data('id'));\n                            }\n                        );\n\n                        // Trigger event that can be observed by course formats.\n                        const event = dispatchEvent(\n                            CourseEvents.sectionRefreshed,\n                            {\n                                ajaxreturn: data,\n                                action: action,\n                                newSectionElement: newSectionElement.get(0),\n                            },\n                            newSectionElement\n                        );\n\n                        if (!event.defaultPrevented) {\n                            defaultEditSectionHandler(\n                                newSectionElement, $(SELECTOR.SECTIONLI + '#' + sectionid),\n                                data,\n                                formatname,\n                                sectionid\n                            );\n                        }\n                        resolve(data);\n                    }).fail(ex => {\n                        // Trigger event that can be observed by course formats.\n                        const event = dispatchEvent(\n                            'coursesectionrefreshfailed',\n                            {exception: ex, action: action},\n                            sectionElement\n                        );\n                        if (!event.defaultPrevented) {\n                            notification.exception(ex);\n                        }\n                        reject();\n                    });\n            });\n        };\n\n        /**\n         * Displays the delete confirmation to delete a module\n         *\n         * @param {JQuery} mainelement activity element we perform action on\n         * @param {function} onconfirm function to execute on confirm\n         */\n        var confirmDeleteModule = function(mainelement, onconfirm) {\n            var modtypename = mainelement.attr('class').match(/modtype_([^\\s]*)/)[1];\n            var modulename = getModuleName(mainelement);\n\n            str.get_string('pluginname', modtypename).done(function(pluginname) {\n                var plugindata = {\n                    type: pluginname,\n                    name: modulename\n                };\n                str.get_strings([\n                    {key: 'confirm', component: 'core'},\n                    {key: modulename === null ? 'deletechecktype' : 'deletechecktypename', param: plugindata},\n                    {key: 'yes'},\n                    {key: 'no'}\n                ]).done(function(s) {\n                        notification.confirm(s[0], s[1], s[2], s[3], onconfirm);\n                    }\n                );\n            });\n        };\n\n        /**\n         * Displays the delete confirmation to delete a section\n         *\n         * @param {String} message confirmation message\n         * @param {function} onconfirm function to execute on confirm\n         */\n        var confirmEditSection = function(message, onconfirm) {\n            str.get_strings([\n                {key: 'confirm'}, // TODO link text\n                {key: 'yes'},\n                {key: 'no'}\n            ]).done(function(s) {\n                    notification.confirm(s[0], message, s[1], s[2], onconfirm);\n                }\n            );\n        };\n\n        /**\n         * Replaces an action menu item with another one (for example Show->Hide, Set marker->Remove marker)\n         *\n         * @param {JQuery} actionitem\n         * @param {String} image new image name (\"i/show\", \"i/hide\", etc.)\n         * @param {String} stringname new string for the action menu item\n         * @param {String} stringcomponent\n         * @param {String} newaction new value for data-action attribute of the link\n         * @return {Promise} promise which is resolved when the replacement has completed\n         */\n        var replaceActionItem = function(actionitem, image, stringname,\n                                           stringcomponent, newaction) {\n\n            var stringRequests = [{key: stringname, component: stringcomponent}];\n            // Do not provide an icon with duplicate, different text to the menu item.\n\n            return str.get_strings(stringRequests).then(function(strings) {\n                actionitem.find('span.menu-action-text').html(strings[0]);\n\n                return templates.renderPix(image, 'core');\n            }).then(function(pixhtml) {\n                actionitem.find('.icon').replaceWith(pixhtml);\n                actionitem.attr('data-action', newaction);\n                return;\n            }).catch(notification.exception);\n        };\n\n        /**\n         * Default post-processing for section AJAX edit actions.\n         *\n         * This can be overridden in course formats by listening to event coursesectionedited:\n         *\n         * $('body').on('coursesectionedited', 'li.section', function(e) {\n         *     var action = e.action,\n         *         sectionElement = $(e.target),\n         *         data = e.ajaxreturn;\n         *     // ... Do some processing here.\n         *     e.preventDefault(); // Prevent default handler.\n         * });\n         *\n         * @param {JQuery} sectionElement\n         * @param {JQuery} actionItem\n         * @param {Object} data\n         * @param {String} courseformat\n         * @param {Number} sectionid\n         */\n        var defaultEditSectionHandler = function(sectionElement, actionItem, data, courseformat, sectionid) {\n            var action = actionItem.attr('data-action');\n            if (action === 'hide' || action === 'show') {\n                if (action === 'hide') {\n                    sectionElement.addClass('hidden');\n                    setSectionBadge(sectionElement[0], 'hiddenfromstudents', true, false);\n                    replaceActionItem(actionItem, 'i/show',\n                        'showfromothers', 'format_' + courseformat, 'show');\n                } else {\n                    setSectionBadge(sectionElement[0], 'hiddenfromstudents', false, false);\n                    sectionElement.removeClass('hidden');\n                    replaceActionItem(actionItem, 'i/hide',\n                        'hidefromothers', 'format_' + courseformat, 'hide');\n                }\n                // Replace the modules with new html (that indicates that they are now hidden or not hidden).\n                if (data.modules !== undefined) {\n                    for (var i in data.modules) {\n                        replaceActivityHtmlWith(data.modules[i]);\n                    }\n                }\n                // Replace the section availability information.\n                if (data.section_availability !== undefined) {\n                    sectionElement.find('.section_availability').first().replaceWith(data.section_availability);\n                }\n                // Modify course state.\n                const section = courseeditor.state.section.get(sectionid);\n                if (section !== undefined) {\n                    courseeditor.dispatch('sectionState', [sectionid]);\n                }\n            } else if (action === 'setmarker') {\n                var oldmarker = $(SELECTOR.SECTIONLI + '.current'),\n                    oldActionItem = oldmarker.find(SELECTOR.SECTIONACTIONMENU + ' ' + 'a[data-action=removemarker]');\n                oldmarker.removeClass('current');\n                replaceActionItem(oldActionItem, 'i/marker',\n                    'highlight', 'core', 'setmarker');\n                sectionElement.addClass('current');\n                replaceActionItem(actionItem, 'i/marked',\n                    'highlightoff', 'core', 'removemarker');\n                courseeditor.dispatch('legacySectionAction', action, sectionid);\n                setSectionBadge(sectionElement[0], 'iscurrent', true, true);\n            } else if (action === 'removemarker') {\n                sectionElement.removeClass('current');\n                replaceActionItem(actionItem, 'i/marker',\n                    'highlight', 'core', 'setmarker');\n                courseeditor.dispatch('legacySectionAction', action, sectionid);\n                setSectionBadge(sectionElement[0], 'iscurrent', false, true);\n            }\n        };\n\n        /**\n         * Get the focused element path in an activity if any.\n         *\n         * This method is used to restore focus when the activity HTML is refreshed.\n         * Only the main course editor elements can be refocused as they are always present\n         * even if the activity content changes.\n         *\n         * @param {String} id the element id the activity element\n         * @return {String|undefined} the inner path of the focused element or undefined\n         */\n        const getActivityFocusedElement = function(id) {\n            const element = document.getElementById(id);\n            if (!element || !element.contains(document.activeElement)) {\n                return undefined;\n            }\n            // Check if the actions menu toggler is focused.\n            if (element.querySelector(SELECTOR.ACTIONAREA).contains(document.activeElement)) {\n                return `${SELECTOR.ACTIONAREA} [tabindex=\"0\"]`;\n            }\n            // Return the current element id if any.\n            if (document.activeElement.id) {\n                return `#${document.activeElement.id}`;\n            }\n            return undefined;\n        };\n\n        /**\n         * Replaces the course module with the new html (used to update module after it was edited or its visibility was changed).\n         *\n         * @param {String} activityHTML\n         */\n        var replaceActivityHtmlWith = function(activityHTML) {\n            $('<div>' + activityHTML + '</div>').find(SELECTOR.ACTIVITYLI).each(function() {\n                // Extract id from the new activity html.\n                var id = $(this).attr('id');\n                // Check if the current focused element is inside the activity.\n                let focusedPath = getActivityFocusedElement(id);\n                // Find the existing element with the same id and replace its contents with new html.\n                $(SELECTOR.ACTIVITYLI + '#' + id).replaceWith(activityHTML);\n                // Initialise action menu.\n                initActionMenu(id);\n                // Re-focus the previous elements.\n                if (focusedPath) {\n                    const newItem = document.getElementById(id);\n                    newItem.querySelector(focusedPath)?.focus();\n                }\n\n            });\n        };\n\n        /**\n         * Performs an action on a module (moving, deleting, duplicating, hiding, etc.)\n         *\n         * @param {JQuery} sectionElement section element we perform action on\n         * @param {Nunmber} sectionid\n         * @param {JQuery} target the element (menu item) that was clicked\n         * @param {String} courseformat\n         * @return {boolean} true the action call is sent to the server or false if it is ignored.\n         */\n        var editSection = function(sectionElement, sectionid, target, courseformat) {\n            var action = target.attr('data-action'),\n                sectionreturn = target.attr('data-sectionreturn') ? target.attr('data-sectionreturn') : 0;\n\n            // Filter direct component handled actions.\n            if (courseeditor.supportComponents && componentActions.includes(action)) {\n                return false;\n            }\n\n            var spinner = addSectionSpinner(sectionElement);\n            var promises = ajax.call([{\n                methodname: 'core_course_edit_section',\n                args: {id: sectionid, action: action, sectionreturn: sectionreturn}\n            }], true);\n\n            var lightbox = addSectionLightbox(sectionElement);\n            $.when.apply($, promises)\n                .done(function(dataencoded) {\n                    var data = $.parseJSON(dataencoded);\n                    removeSpinner(sectionElement, spinner);\n                    removeLightbox(lightbox);\n                    sectionElement.find(SELECTOR.SECTIONACTIONMENU).find(SELECTOR.TOGGLE).focus();\n                    // Trigger event that can be observed by course formats.\n                    var e = $.Event('coursesectionedited', {ajaxreturn: data, action: action});\n                    sectionElement.trigger(e);\n                    if (!e.isDefaultPrevented()) {\n                        defaultEditSectionHandler(sectionElement, target, data, courseformat, sectionid);\n                    }\n                }).fail(function(ex) {\n                    // Remove spinner and lightbox.\n                    removeSpinner(sectionElement, spinner);\n                    removeLightbox(lightbox);\n                    // Trigger event that can be observed by course formats.\n                    var e = $.Event('coursesectioneditfailed', {exception: ex, action: action});\n                    sectionElement.trigger(e);\n                    if (!e.isDefaultPrevented()) {\n                        notification.exception(ex);\n                    }\n                });\n            return true;\n        };\n\n        /**\n         * Sets the section badge in the section header.\n         *\n         * @param {JQuery} sectionElement section element we perform action on\n         * @param {String} badgetype the type of badge this is for\n         * @param {bool} add true to add, false to remove\n         * @param {boolean} removeOther in case of adding a badge, whether to remove all other.\n         */\n        var setSectionBadge = function(sectionElement, badgetype, add, removeOther) {\n            const sectionbadges = sectionElement.querySelector(SELECTOR.SECTIONBADGES);\n            if (!sectionbadges) {\n                return;\n            }\n            const badge = sectionbadges.querySelector('[data-type=\"' + badgetype + '\"]');\n            if (!badge) {\n                return;\n            }\n            if (add) {\n                if (removeOther) {\n                    document.querySelectorAll('[data-type=\"' + badgetype + '\"]').forEach((b) => {\n                        b.classList.add('d-none');\n                    });\n                }\n                badge.classList.remove('d-none');\n            } else {\n                badge.classList.add('d-none');\n            }\n        };\n\n        // Register a function to be executed after D&D of an activity.\n        Y.use('moodle-course-coursebase', function() {\n            M.course.coursebase.register_module({\n                // Ignore camelcase eslint rule for the next line because it is an expected name of the callback.\n                // eslint-disable-next-line camelcase\n                set_visibility_resource_ui: function(args) {\n                    var mainelement = $(args.element.getDOMNode());\n                    var cmid = getModuleId(mainelement);\n                    if (cmid) {\n                        var sectionreturn = mainelement.find('.' + CSS.EDITINGMOVE).attr('data-sectionreturn');\n                        refreshModule(mainelement, cmid, sectionreturn);\n                    }\n                },\n                /**\n                 * Update the course state when some cm is moved via YUI.\n                 * @param {*} params\n                 */\n                updateMovedCmState: (params) => {\n                    const state = courseeditor.state;\n\n                    // Update old section.\n                    const cm = state.cm.get(params.cmid);\n                    if (cm !== undefined) {\n                        courseeditor.dispatch('sectionState', [cm.sectionid]);\n                    }\n                    // Update cm state.\n                    courseeditor.dispatch('cmState', [params.cmid]);\n                },\n                /**\n                 * Update the course state when some section is moved via YUI.\n                 */\n                updateMovedSectionState: () => {\n                    courseeditor.dispatch('courseState');\n                },\n            });\n        });\n\n        // From Moodle 4.0 all edit actions are being re-implemented as state mutation.\n        // This means all method from this \"actions\" module will be deprecated when all the course\n        // interface is migrated to reactive components.\n        // Most legacy actions did not provide enough information to regenarate the course so they\n        // use the mutations courseState, sectionState and cmState to get the updated state from\n        // the server. However, some activity actions where we can prevent an extra webservice\n        // call by implementing an adhoc mutation.\n        courseeditor.addMutations({\n            /**\n             * Compatibility function to update Moodle 4.0 course state using legacy actions.\n             *\n             * This method only updates some actions which does not require to use cmState mutation\n             * to get updated data form the server.\n             *\n             * @param {Object} statemanager the current state in read write mode\n             * @param {String} action the performed action\n             * @param {Number} cmid the affected course module id\n             * @param {Array} affectedids all affected cm ids (for duplicate action)\n             */\n            legacyActivityAction: function(statemanager, action, cmid, affectedids) {\n\n                const state = statemanager.state;\n                const cm = state.cm.get(cmid);\n                if (cm === undefined) {\n                    return;\n                }\n                const section = state.section.get(cm.sectionid);\n                if (section === undefined) {\n                    return;\n                }\n\n                // Send the element is locked.\n                courseeditor.dispatch('cmLock', [cm.id], true);\n\n                // Now we do the real mutation.\n                statemanager.setReadOnly(false);\n\n                // This unlocked will take effect when the read only is restored.\n                cm.locked = false;\n\n                switch (action) {\n                    case 'delete':\n                        // Remove from section.\n                        section.cmlist = section.cmlist.reduce(\n                            (cmlist, current) => {\n                                if (current != cmid) {\n                                    cmlist.push(current);\n                                }\n                                return cmlist;\n                            },\n                            []\n                        );\n                        // Delete form list.\n                        state.cm.delete(cmid);\n                        break;\n\n                    case 'hide':\n                    case 'show':\n                    case 'duplicate':\n                        courseeditor.dispatch('cmState', affectedids);\n                        break;\n                }\n                statemanager.setReadOnly(true);\n            },\n            legacySectionAction: function(statemanager, action, sectionid) {\n\n                const state = statemanager.state;\n                const section = state.section.get(sectionid);\n                if (section === undefined) {\n                    return;\n                }\n\n                // Send the element is locked. Reactive events are only triggered when the state\n                // read only mode is restored. We want to notify the interface the element is\n                // locked so we need to do a quick lock operation before performing the rest\n                // of the mutation.\n                statemanager.setReadOnly(false);\n                section.locked = true;\n                statemanager.setReadOnly(true);\n\n                // Now we do the real mutation.\n                statemanager.setReadOnly(false);\n\n                // This locked will take effect when the read only is restored.\n                section.locked = false;\n\n                switch (action) {\n                    case 'setmarker':\n                        // Remove previous marker.\n                        state.section.forEach((current) => {\n                            if (current.id != sectionid) {\n                                current.current = false;\n                            }\n                        });\n                        section.current = true;\n                        break;\n\n                    case 'removemarker':\n                        section.current = false;\n                        break;\n                }\n                statemanager.setReadOnly(true);\n            },\n        });\n\n        return /** @alias module:core_course/actions */ {\n\n            /**\n             * Initialises course page\n             *\n             * @method init\n             * @param {String} courseformat name of the current course format (for fetching strings)\n             */\n            initCoursePage: function(courseformat) {\n\n                formatname = courseformat;\n\n                // Add a handler for course module actions.\n                $('body').on('click keypress', SELECTOR.ACTIVITYLI + ' ' +\n                        SELECTOR.ACTIVITYACTION + '[data-action]', function(e) {\n                    if (e.type === 'keypress' && e.keyCode !== 13) {\n                        return;\n                    }\n                    var actionItem = $(this),\n                        moduleElement = actionItem.closest(SELECTOR.ACTIVITYLI),\n                        action = actionItem.attr('data-action'),\n                        moduleId = getModuleId(moduleElement);\n                    switch (action) {\n                        case 'moveleft':\n                        case 'moveright':\n                        case 'delete':\n                        case 'duplicate':\n                        case 'hide':\n                        case 'stealth':\n                        case 'show':\n                        case 'groupsseparate':\n                        case 'groupsvisible':\n                        case 'groupsnone':\n                            break;\n                        default:\n                            // Nothing to do here!\n                            return;\n                    }\n                    if (!moduleId) {\n                        return;\n                    }\n                    e.preventDefault();\n                    if (action === 'delete') {\n                        // Deleting requires confirmation.\n                        confirmDeleteModule(moduleElement, function() {\n                            editModule(moduleElement, moduleId, actionItem);\n                        });\n                    } else {\n                        editModule(moduleElement, moduleId, actionItem);\n                    }\n                });\n\n                // Add a handler for section show/hide actions.\n                $('body').on('click keypress', SELECTOR.SECTIONLI + ' ' +\n                            SELECTOR.SECTIONACTIONMENU + '[data-sectionid] ' +\n                            'a[data-action]', function(e) {\n                    if (e.type === 'keypress' && e.keyCode !== 13) {\n                        return;\n                    }\n                    var actionItem = $(this),\n                        sectionElement = actionItem.closest(SELECTOR.SECTIONLI),\n                        sectionId = actionItem.closest(SELECTOR.SECTIONACTIONMENU).attr('data-sectionid');\n\n                    let isExecuted = true;\n                    if (actionItem.attr('data-confirm')) {\n                        // Action requires confirmation.\n                        confirmEditSection(actionItem.attr('data-confirm'), function() {\n                            isExecuted = editSection(sectionElement, sectionId, actionItem, courseformat);\n                        });\n                    } else {\n                        isExecuted = editSection(sectionElement, sectionId, actionItem, courseformat);\n                    }\n                    // Prevent any other module from capturing the action if it is already in execution.\n                    if (isExecuted) {\n                        e.preventDefault();\n                    }\n                });\n\n                // The section and activity names are edited using inplace editable.\n                // The \"update\" jQuery event must be captured in order to update the course state.\n                $('body').on('updated', `${SELECTOR.SECTIONLI} [data-inplaceeditable]`, function(e) {\n                    if (e.ajaxreturn && e.ajaxreturn.itemid) {\n                        const state = courseeditor.state;\n                        const section = state.section.get(e.ajaxreturn.itemid);\n                        if (section !== undefined) {\n                            courseeditor.dispatch('sectionState', [e.ajaxreturn.itemid]);\n                        }\n                    }\n                });\n                $('body').on('updated', `${SELECTOR.ACTIVITYLI} [data-inplaceeditable]`, function(e) {\n                    if (e.ajaxreturn && e.ajaxreturn.itemid) {\n                        courseeditor.dispatch('cmState', [e.ajaxreturn.itemid]);\n                    }\n                });\n\n                // Component-based formats don't use modals to create sections.\n                if (courseeditor.supportComponents && componentActions.includes('addSection')) {\n                    return;\n                }\n\n                // Add a handler for \"Add sections\" link to ask for a number of sections to add.\n                str.get_string('numberweeks').done(function(strNumberSections) {\n                    var trigger = $(SELECTOR.ADDSECTIONS),\n                        modalTitle = trigger.attr('data-add-sections'),\n                        newSections = trigger.attr('data-new-sections');\n                    var modalBody = $('<div><label for=\"add_section_numsections\"></label> ' +\n                        '<input id=\"add_section_numsections\" type=\"number\" min=\"1\" max=\"' + newSections + '\" value=\"1\"></div>');\n                    modalBody.find('label').html(strNumberSections);\n                    ModalFactory.create({\n                        title: modalTitle,\n                        type: ModalFactory.types.SAVE_CANCEL,\n                        body: modalBody.html()\n                    }, trigger)\n                    .done(function(modal) {\n                        var numSections = $(modal.getBody()).find('#add_section_numsections'),\n                        addSections = function() {\n                            // Check if value of the \"Number of sections\" is a valid positive integer and redirect\n                            // to adding a section script.\n                            if ('' + parseInt(numSections.val()) === numSections.val() && parseInt(numSections.val()) >= 1) {\n                                document.location = trigger.attr('href') + '&numsections=' + parseInt(numSections.val());\n                            }\n                        };\n                        modal.setSaveButtonText(modalTitle);\n                        modal.getRoot().on(ModalEvents.shown, function() {\n                            // When modal is shown focus and select the input and add a listener to keypress of \"Enter\".\n                            numSections.focus().select().on('keydown', function(e) {\n                                if (e.keyCode === KeyCodes.enter) {\n                                    addSections();\n                                }\n                            });\n                        });\n                        modal.getRoot().on(ModalEvents.save, function(e) {\n                            // When modal \"Add\" button is pressed.\n                            e.preventDefault();\n                            addSections();\n                        });\n                    });\n                });\n            },\n\n            /**\n             * Replaces a section action menu item with another one (for example Show->Hide, Set marker->Remove marker)\n             *\n             * This method can be used by course formats in their listener to the coursesectionedited event\n             *\n             * @deprecated since Moodle 3.9\n             * @param {JQuery} sectionelement\n             * @param {String} selector CSS selector inside the section element, for example \"a[data-action=show]\"\n             * @param {String} image new image name (\"i/show\", \"i/hide\", etc.)\n             * @param {String} stringname new string for the action menu item\n             * @param {String} stringcomponent\n             * @param {String} newaction new value for data-action attribute of the link\n             */\n            replaceSectionActionItem: function(sectionelement, selector, image, stringname,\n                                                    stringcomponent, newaction) {\n                log.debug('replaceSectionActionItem() is deprecated and will be removed.');\n                var actionitem = sectionelement.find(SELECTOR.SECTIONACTIONMENU + ' ' + selector);\n                replaceActionItem(actionitem, image, stringname, stringcomponent, newaction);\n            },\n            // Method to refresh a module.\n            refreshModule,\n            refreshSection,\n        };\n    });\n"],"names":["define","$","ajax","templates","notification","str","url","Y","ModalFactory","ModalEvents","KeyCodes","log","editor","EventDispatcher","CourseEvents","componentActions","courseeditor","getCurrentCourseEditor","formatname","CSS","SELECTOR","ACTIVITYLI","ACTIONAREA","ACTIVITYACTION","MENU","TOGGLE","SECTIONLI","SECTIONACTIONMENU","ADDSECTIONS","SECTIONBADGES","use","courseformatselector","M","course","format","get_section_selector","dispatchEvent","eventName","detail","container","options","Element","undefined","get","getModuleId","element","item","dataset","id","Moodle","core_course","util","cm","getId","Node","addActivitySpinner","activity","addClass","actionarea","find","spinner","add_spinner","show","data","dispatch","addSectionSpinner","sectionelement","addSectionLightbox","lightbox","add_lightbox","for","setAttribute","removeSpinner","delay","window","setTimeout","removeClass","hide","mutation","removeLightbox","getAttribute","concat","initActionMenu","elementid","coursebase","invoke_function","core","actionmenu","newDOMNode","one","editModule","moduleElement","cmid","target","action","attr","promises","call","methodname","args","sectionreturn","closest","when","apply","done","mainElement","tabables","isInside","foundElement","elementToFocus","each","contains","this","replaceWith","affectedids","index","elementId","mainelement","selector","is","focus","focusActionItem","push","trigger","Event","ajaxreturn","fail","ex","e","exception","isDefaultPrevented","refreshModule","sectionReturn","activityElement","Promise","resolve","reject","replaceActivityHtmlWith","confirmDeleteModule","onconfirm","modtypename","match","modulename","name","getName","state","_state$cm$get","getModuleName","get_string","pluginname","plugindata","type","get_strings","key","component","param","s","confirm","replaceActionItem","actionitem","image","stringname","stringcomponent","newaction","stringRequests","then","strings","html","renderPix","pixhtml","catch","defaultEditSectionHandler","sectionElement","actionItem","courseformat","sectionid","setSectionBadge","modules","i","section_availability","first","section","oldmarker","oldActionItem","activityHTML","focusedPath","document","getElementById","activeElement","querySelector","getActivityFocusedElement","_newItem$querySelecto","editSection","supportComponents","includes","dataencoded","parseJSON","badgetype","add","removeOther","sectionbadges","badge","querySelectorAll","forEach","b","classList","remove","register_module","set_visibility_resource_ui","getDOMNode","updateMovedCmState","params","updateMovedSectionState","addMutations","legacyActivityAction","statemanager","setReadOnly","locked","cmlist","reduce","current","delete","legacySectionAction","initCoursePage","on","keyCode","moduleId","preventDefault","sectionId","isExecuted","message","itemid","strNumberSections","modalTitle","newSections","modalBody","create","title","types","SAVE_CANCEL","body","modal","numSections","getBody","addSections","parseInt","val","location","setSaveButtonText","getRoot","shown","select","enter","save","replaceSectionActionItem","debug","refreshSection","newSectionElement","content","sectionRefreshed","defaultPrevented"],"mappings":"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"}