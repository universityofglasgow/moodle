{"version":3,"file":"utils.min.js","sources":["../src/utils.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport {renderForPromise} from 'core/templates';\nimport {getFilePicker} from './options';\nimport {get_string as getString} from 'core/str';\n\n/**\n * Get the image path for the specified image.\n *\n * @param {string} identifier The name of the image\n * @param {string} component The component name\n * @return {string} The image URL path\n */\nexport const getImagePath = (identifier, component = 'editor_tiny') => Promise.resolve(M.util.image_url(identifier, component));\n\nexport const getButtonImage = async(identifier, component = 'editor_tiny') => renderForPromise('editor_tiny/toolbar_button', {\n    image: await getImagePath(identifier, component),\n});\n\n/**\n * Helper to display a filepicker and return a Promise.\n *\n * The Promise will resolve when a file is selected, or reject if the file type is not found.\n *\n * @param {TinyMCE} editor\n * @param {string} filetype\n * @returns {Promise<object>} The file object returned by the filepicker\n */\nexport const displayFilepicker = (editor, filetype) => new Promise((resolve, reject) => {\n    const configuration = getFilePicker(editor, filetype);\n    if (configuration) {\n        const options = {\n            ...configuration,\n            formcallback: resolve,\n        };\n        M.core_filepicker.show(Y, options);\n        return;\n    }\n    reject(`Unknown filetype ${filetype}`);\n});\n\n/**\n * Given a TinyMCE Toolbar configuration, add the specified button to the named section.\n *\n * @param {object} toolbar\n * @param {string} section\n * @param {string} button\n * @returns {object} The toolbar configuration\n */\nexport const addToolbarButton = (toolbar, section, button) => {\n    if (!toolbar) {\n        return [{\n            name: section,\n            items: [button],\n        }];\n    }\n\n    const mutatedToolbar = JSON.parse(JSON.stringify(toolbar));\n    return mutatedToolbar.map((item) => {\n        if (item.name === section) {\n            item.items.push(button);\n        }\n\n        return item;\n    });\n};\n\n/**\n * Given a TinyMCE Toolbar configuration, add the specified buttons to the named section.\n *\n * @param {object} toolbar\n * @param {string} section\n * @param {Array} buttons\n * @returns {object} The toolbar configuration\n */\nexport const addToolbarButtons = (toolbar, section, buttons) => {\n    if (!toolbar) {\n        return [{\n            name: section,\n            items: buttons,\n        }];\n    }\n\n    const mutatedToolbar = JSON.parse(JSON.stringify(toolbar));\n    return mutatedToolbar.map((item) => {\n        if (item.name === section) {\n            buttons.forEach(button => item.items.push(button));\n        }\n\n        return item;\n    });\n};\n\n/**\n * Insert a new section into the toolbar.\n *\n * @param {array} toolbar The TinyMCE.editor.settings.toolbar configuration\n * @param {string} name The new section name to add\n * @param {string} relativeTo Insert relative to this section name\n * @param {boolean} append Append or Prepend\n * @returns {array}\n */\nexport const addToolbarSection = (toolbar, name, relativeTo, append = true) => {\n    const newSection = {\n        name,\n        items: [],\n    };\n    const sectionInserted = toolbar.some((section, index) => {\n        if (section.name === relativeTo) {\n            if (append) {\n                toolbar.splice(index + 1, 0, newSection);\n            } else {\n                toolbar.splice(index, 0, newSection);\n            }\n            return true;\n        }\n        return false;\n    });\n\n    if (!sectionInserted) {\n        // Relative section not found.\n        if (append) {\n            toolbar.push(newSection);\n        } else {\n            toolbar.unshift(newSection);\n        }\n    }\n\n    return toolbar;\n};\n\n/**\n * Given a TinyMCE Menubar configuration, add the specified button to the named section.\n *\n * @param {object} menubar\n * @param {string} section\n * @param {string} menuitem\n * @returns {object}\n */\nexport const addMenubarItem = (menubar, section, menuitem) => {\n    if (!menubar) {\n        const emptyMenubar = {};\n        emptyMenubar[section] = {\n            title: section,\n            items: menuitem,\n        };\n    }\n\n    const mutatedMenubar = JSON.parse(JSON.stringify(menubar));\n    Array.from(Object.entries(mutatedMenubar)).forEach(([name, menu]) => {\n        if (name === section) {\n            menu.items = `${menu.items} ${menuitem}`;\n        }\n    });\n\n    return mutatedMenubar;\n};\n\n/**\n * Given a TinyMCE contextmenu configuration, add the specified button to the end.\n *\n * @param {string} contextmenu\n * @param {string[]} menuitems\n * @returns {string}\n */\nexport const addContextmenuItem = (contextmenu, ...menuitems) => {\n    const contextmenuItems = (contextmenu ?? '').split(' ');\n\n    return contextmenuItems\n        .concat(menuitems)\n        .filter((item) => item !== '')\n        .join(' ');\n};\n\n/**\n * Given a TinyMCE quickbars configuration, add items to the meun.\n *\n * @param {string} toolbar\n * @param {string[]} menuitems\n * @returns {string}\n */\n// eslint-disable-next-line no-unused-vars\nexport const addQuickbarsToolbarItem = (toolbar, ...menuitems) => {\n    // For the moment we have disabled use of this menu.\n    // The configuration is left in place to allow plugins to declare that they would like to support it in the future.\n    return toolbar;\n};\n\n/**\n * Get the link to the user documentation for the named plugin.\n *\n * @param {string} pluginName\n * @returns {string}\n */\nexport const getDocumentationLink = (pluginName) => `https://docs.moodle.org/en/editor_tiny/${pluginName}`;\n\n/**\n * Get the default plugin metadata for the named plugin.\n * If no URL is provided, then a URL is generated pointing to the standard Moodle Documentation.\n *\n * @param {string} component The component name\n * @param {string} pluginName The plugin name\n * @param {string|null} [url=null] An optional URL to the plugin documentation\n * @returns {object}\n */\nexport const getPluginMetadata = async(component, pluginName, url = null) => {\n    const name = await getString('helplinktext', component);\n    return {\n        getMetadata: () => ({\n            name,\n            url: url ?? getDocumentationLink(pluginName),\n        }),\n    };\n};\n\n/**\n * Ensure that the editor is still in the DOM, removing it if it is not.\n *\n * @param {TinyMCE} editor\n * @returns {TinyMCE|null}\n */\nexport const ensureEditorIsValid = (editor) => {\n    // TinyMCE uses the element ID as a map key internally, even if the target has changed.\n    // In cases such as where an editor is in a modal form which has been detached from the DOM, but the editor not removed,\n    // we need to manually destroy the editor.\n    // We could theoretically do this with a Mutation Observer, but in some cases the Node may be moved,\n    // or added back elsewhere in the DOM.\n    if (!editor?.targetElm?.closest('body')) {\n        editor.destroy();\n        return null;\n    }\n\n    return editor;\n};\n\n/**\n * Given a TinyMCE Toolbar configuration, remove the specified button from the named section.\n *\n * @param {object} toolbar\n * @param {string} section\n * @param {string} button\n * @returns {object} The toolbar configuration\n */\n export const removeToolbarButton = (toolbar, section, button) => {\n    if (!toolbar) {\n        return [{\n            name: section,\n            items: [button],\n        }];\n    }\n\n    const mutatedToolbar = JSON.parse(JSON.stringify(toolbar));\n    return mutatedToolbar.map((item) => {\n        if (item.name === section) {\n            item.items.splice(item.items.indexOf(button), 1);\n        }\n\n        return item;\n    });\n};\n\n/**\n * Given a TinyMCE Toolbar configuration, remove the specified buttons from the named section.\n *\n * @param {object} toolbar\n * @param {string} section\n * @param {Array} buttons\n * @returns {object} The toolbar configuration\n */\n export const removeToolbarButtons = (toolbar, section, buttons) => {\n    if (!toolbar) {\n        return [{\n            name: section,\n            items: buttons,\n        }];\n    }\n\n    const mutatedToolbar = JSON.parse(JSON.stringify(toolbar));\n    return mutatedToolbar.map((item) => {\n        if (item.name === section) {\n            buttons.forEach(button => item.items.splice(item.items.indexOf(button), 1));\n        }\n\n        return item;\n    });\n};\n\n/**\n * Remove the specified sub-menu item from the named section.\n * Recreate a menu with the same sub-menu items but remove the specified item.\n *\n * @param {TinyMCE} editor\n * @param {string} section\n * @param {string} submenuitem The text of sub-menu that we want to removed\n */\nexport const removeSubmenuItem = async(editor, section, submenuitem) => {\n    // Get menu items.\n    const menuItems = editor.ui.registry.getAll().menuItems[section];\n\n    // Because we will match between title strings,\n    // we make sure no problems arise while applying multi-language.\n    const submenuitemtitle = await getString(submenuitem, 'editor_tiny');\n\n    // Overriding the menu items,\n    // by recreating them but excluding the specified sub-menu.\n    if (menuItems) {\n        editor.ui.registry.addNestedMenuItem(\n            section,\n            {\n                text: menuItems.text,\n                getSubmenuItems: () => {\n                    let newSubmenu = [];\n                    menuItems.getSubmenuItems().forEach((item) => {\n                        // Need to trim the text because some of the sub-menus use space to replace an icon.\n                        if (item.text.trim() != submenuitemtitle) {\n                            newSubmenu.push(item);\n                        }\n                    });\n                    return newSubmenu;\n                }\n            }\n        );\n    }\n};\n\n/**\n * Given a TinyMCE Menubar configuration, remove the specified menu from the named section.\n *\n * @param {string} menubar\n * @param {string} section\n * @param {string} menuitem\n * @returns {object}\n */\nexport const removeMenubarItem = (menubar, section, menuitem) => {\n    menubar[section].items = menubar[section].items\n        .replace(menuitem, '');\n\n    return menubar;\n};\n\n/**\n * Given a TinyMCE Menubar configuration, remove the specified menu from the named section.\n *\n * @param {string} menubar\n * @param {string} section\n * @param {Array} menuitems\n * @returns {object}\n */\nexport const removeMenubarItems = (menubar, section, menuitems) => {\n    // Create RegExp pattern.\n    const regexPattern = new RegExp(menuitems.join('|'), \"ig\");\n\n    // Remove menuitems.\n    menubar[section].items = menubar[section].items.replace(regexPattern, '');\n\n    return menubar;\n};\n"],"names":["getImagePath","identifier","component","arguments","length","undefined","Promise","resolve","M","util","image_url","_exports","getButtonImage","async","renderForPromise","image","displayFilepicker","editor","filetype","reject","configuration","getFilePicker","options","formcallback","core_filepicker","show","Y","concat","addToolbarButton","toolbar","section","button","name","items","JSON","parse","stringify","map","item","push","addToolbarButtons","buttons","forEach","addToolbarSection","relativeTo","append","newSection","some","index","splice","unshift","addMenubarItem","menubar","menuitem","title","mutatedMenubar","Array","from","Object","entries","_ref","menu","addContextmenuItem","contextmenu","contextmenuItems","split","_len","menuitems","_key","filter","join","addQuickbarsToolbarItem","getDocumentationLink","pluginName","getPluginMetadata","url","getString","getMetadata","ensureEditorIsValid","_editor$targetElm","targetElm","closest","destroy","removeToolbarButton","indexOf","removeToolbarButtons","removeSubmenuItem","submenuitem","menuItems","ui","registry","getAll","submenuitemtitle","addNestedMenuItem","text","getSubmenuItems","newSubmenu","trim","removeMenubarItem","replace","removeMenubarItems","regexPattern","RegExp"],"mappings":"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"}