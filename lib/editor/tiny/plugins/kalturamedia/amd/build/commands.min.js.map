{"version":3,"file":"commands.min.js","sources":["../src/commands.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Commands helper for the Moodle tiny_kalturamedia plugin.\n *\n * @module      tiny_kalturmedia/commands\n * @copyright   2023 Roi Levi <roi.levi@kaltura.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getButtonImage} from 'editor_tiny/utils';\nimport {get_string as getString} from 'core/str';\nimport {\n    component,\n    buttonName,\n    icon,\n} from './common';\nimport {getContextId} from './options';\n\n/**\n * Handle the action for your plugin.\n * @param {TinyMCE.editor} editor The tinyMCE editor instance.\n * @param {string} title The dialog box title\n */\nconst handleAction = (editor, title) => {\n    editor.windowManager.openUrl({\n        title,\n        width: 1200,\n        height: 700,\n        url: M.cfg.wwwroot + '/lib/editor/tiny/plugins/kalturamedia/ltibrowse.php?lang=' +\n             editor.getParam('language') + '&contextid=' + getContextId(editor),\n        buttons: [{type: 'cancel', text:'Cancel'}]\n    });\n};\n\n/**\n * Get the setup function for the buttons.\n *\n * This is performed in an async function which ultimately returns the registration function as the\n * Tiny.AddOnManager.Add() function does not support async functions.\n *\n * @returns {function} The registration function to call within the Plugin.add function.\n */\nexport const getSetup = async() => {\n    const [\n        buttonText,\n        buttonImage,\n    ] = await Promise.all([\n        getString('buttontitle', component),\n        getButtonImage('icon', component),\n    ]);\n\n    return (editor) => {\n        // Register the Moodle SVG as an icon suitable for use as a TinyMCE toolbar button.\n        editor.ui.registry.addIcon(icon, buttonImage.html);\n\n        // Register the KalturaMedia Button.\n        editor.ui.registry.addButton(buttonName, {\n            icon,\n            tooltip: buttonText,\n            onAction: () => handleAction(editor, buttonText),\n        });\n\n       // Add the KalturaMedia Menu Item.\n      // This allows it to be added to a standard menu, or a context menu.\n      editor.ui.registry.addMenuItem(buttonName, {\n           icon,\n           text: buttonText,\n           onAction: () => handleAction(editor, buttonText),\n        });\n    };\n};\n"],"names":["handleAction","editor","title","windowManager","openUrl","width","height","url","M","cfg","wwwroot","getParam","buttons","type","text","async","buttonText","buttonImage","Promise","all","component","ui","registry","addIcon","icon","html","addButton","buttonName","tooltip","onAction","addMenuItem"],"mappings":";;;;;;;;MAqCMA,aAAe,CAACC,OAAQC,SAC1BD,OAAOE,cAAcC,QAAQ,CACzBF,MAAAA,MACAG,MAAO,KACPC,OAAQ,IACRC,IAAKC,EAAEC,IAAIC,QAAU,4DAChBT,OAAOU,SAAS,YAAc,eAAgB,yBAAaV,QAChEW,QAAS,CAAC,CAACC,KAAM,SAAUC,KAAK,gCAYhBC,gBAEhBC,WACAC,mBACMC,QAAQC,IAAI,EAClB,mBAAU,cAAeC,oBACzB,yBAAe,OAAQA,4BAGnBnB,SAEJA,OAAOoB,GAAGC,SAASC,QAAQC,aAAMP,YAAYQ,MAG7CxB,OAAOoB,GAAGC,SAASI,UAAUC,mBAAY,CACrCH,KAAAA,aACAI,QAASZ,WACTa,SAAU,IAAM7B,aAAaC,OAAQe,cAK3Cf,OAAOoB,GAAGC,SAASQ,YAAYH,mBAAY,CACtCH,KAAAA,aACAV,KAAME,WACNa,SAAU,IAAM7B,aAAaC,OAAQe"}