{"version":3,"file":"image.min.js","sources":["../src/image.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny Media plugin Image class for Moodle.\n *\n * @module      tiny_media/image\n * @copyright   2022 Huong Nguyen <huongnv13@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Templates from 'core/templates';\nimport {get_string as getString, get_strings as getStrings} from 'core/str';\nimport * as ModalFactory from 'core/modal_factory';\nimport Pending from 'core/pending';\nimport {displayFilepicker} from 'editor_tiny/utils';\nimport Selectors from './selectors';\nimport Modal from './imagemodal';\nimport {getImagePermissions} from './options';\nimport {component} from \"./common\";\n\nexport const MediaImage = class {\n\n    DEFAULTS = {\n        WIDTH: 160,\n        HEIGHT: 160,\n    };\n\n    form = null;\n    rawImageDimensions = null;\n    canShowFilePicker = false;\n    editor = null;\n    currentModal = null;\n    selectedImage = null;\n    imageAlignment = null;\n\n    constructor(editor) {\n        const permissions = getImagePermissions(editor);\n        this.canShowFilePicker = permissions.filepicker;\n        this.editor = editor;\n    }\n\n    async displayDialogue() {\n        // Reset the image dimensions.\n        this.rawImageDimensions = null;\n\n        const currentImageData = await this.getCurrentImageData();\n        const modal = await ModalFactory.create({\n            type: Modal.TYPE,\n            title: getString('imageproperties', 'tiny_media'),\n            templateContext: await this.getTemplateContext(currentImageData),\n            removeOnClose: true,\n            large: true,\n        });\n\n        this.currentModal = modal;\n        if (currentImageData && currentImageData.src) {\n            this.loadPreviewImage(currentImageData.src);\n        }\n\n        await this.registerEventListeners(modal);\n        modal.show();\n    }\n\n    async getAlignmentTitles() {\n        if (!this.alignmentTitles) {\n            const [top, middle, bottom] = await getStrings([\n                'alignment_top',\n                'alignment_middle',\n                'alignment_bottom',\n            ].map((key) => ({key, component})));\n\n            this.alignmentTitles = {\n                top,\n                middle,\n                bottom,\n            };\n        }\n\n        return this.alignmentTitles;\n    }\n\n    async getImageAlignment(selected = '') {\n        const titles = await this.getAlignmentTitles();\n        const alignments = [\n            {\n                text: titles.top,\n                value: 'align-top',\n            },\n            {\n                text: titles.middle,\n                value: 'align-middle',\n            },\n            {\n                text: titles.bottom,\n                value: 'align-bottom',\n            },\n        ];\n\n        if (selected) {\n            alignments.forEach((alignment, index, array) => {\n                if (alignment.value === selected) {\n                    array[index].selected = true;\n                }\n            });\n        }\n\n        return alignments;\n    }\n\n    async getTemplateContext(data) {\n        return {\n            elementid: this.editor.id,\n            showfilepicker: this.canShowFilePicker,\n            alignoptions: await this.getImageAlignment(),\n            ...data,\n        };\n    }\n\n    async getCurrentImageData() {\n        const selectedImageProperties = this.getSelectedImageProperties();\n        if (!selectedImageProperties) {\n            return {};\n        }\n\n        const properties = {...selectedImageProperties};\n        if (properties.align) {\n            properties.alignoptions = await this.getImageAlignment(properties.align);\n        }\n\n        if (properties.src) {\n            properties.haspreview = true;\n        }\n\n        if (!properties.alt) {\n            properties.presentation = true;\n        }\n\n        return properties;\n    }\n\n    filePickerCallback(params, self) {\n        if (params.url) {\n            const input = self.form.querySelector(Selectors.IMAGE.elements.url);\n            input.value = params.url;\n\n            // Auto set the width and height.\n            self.form.querySelector(Selectors.IMAGE.elements.width).value = '';\n            self.form.querySelector(Selectors.IMAGE.elements.height).value = '';\n\n            // Load the preview image.\n            self.loadPreviewImage(params.url);\n        }\n    }\n\n    storeImageDimensions(image) {\n        // Store dimensions of the raw image, falling back to defaults for images without dimensions (e.g. SVG).\n        this.rawImageDimensions = {\n            width: image.width || this.DEFAULTS.WIDTH,\n            height: image.height || this.DEFAULTS.HEIGHT,\n        };\n\n        const getCurrentWidth = (element) => {\n            if (element.value === '') {\n                element.value = this.rawImageDimensions.width;\n            }\n            return element.value;\n        };\n        const getCurrentHeight = (element) => {\n            if (element.value === '') {\n                element.value = this.rawImageDimensions.height;\n            }\n            return element.value;\n        };\n\n        const widthInput = this.form.querySelector(Selectors.IMAGE.elements.width);\n        const currentWidth = getCurrentWidth(widthInput);\n\n        const heightInput = this.form.querySelector(Selectors.IMAGE.elements.height);\n        const currentHeight = getCurrentHeight(heightInput);\n\n        const preview = this.form.querySelector(Selectors.IMAGE.elements.preview);\n        preview.setAttribute('src', image.src);\n        preview.style.display = 'inline';\n\n        const constrain = this.form.querySelector(Selectors.IMAGE.elements.constrain);\n        if (this.isPercentageValue(currentWidth) && this.isPercentageValue(currentHeight)) {\n            constrain.checked = currentWidth === currentHeight;\n        } else if (image.width === 0 || image.height === 0) {\n            // If we don't have both dimensions of the image, we can't auto-size it, so disable control.\n            constrain.disabled = 'disabled';\n        } else {\n            // This is the same as comparing to 3 decimal places.\n            const widthRatio = Math.round(1000 * parseInt(currentWidth, 10) / image.width);\n            const heightRatio = Math.round(1000 * parseInt(currentHeight, 10) / image.height);\n            constrain.checked = widthRatio === heightRatio;\n        }\n    }\n\n    loadPreviewImage(url) {\n        const image = new Image();\n\n        image.addEventListener('error', () => {\n            const preview = this.form.querySelector(Selectors.IMAGE.elements.preview);\n            preview.style.display = 'none';\n        });\n        image.addEventListener('load', () => {\n            this.storeImageDimensions(image);\n            this.autoAdjustSize();\n        });\n\n        image.src = url;\n    }\n\n    urlChanged() {\n        const input = this.form.querySelector(Selectors.IMAGE.elements.url);\n\n        if (input.value) {\n            // Load the preview image.\n            this.loadPreviewImage(input.value);\n        }\n    }\n\n    hasErrorUrlField() {\n        const url = this.form.querySelector(Selectors.IMAGE.elements.url).value;\n        const urlError = url === '';\n        this.toggleVisibility(Selectors.IMAGE.elements.urlWarning, urlError);\n        this.toggleAriaInvalid([Selectors.IMAGE.elements.url], urlError);\n\n        return urlError;\n    }\n\n    hasErrorAltField() {\n        const alt = this.form.querySelector(Selectors.IMAGE.elements.alt).value;\n        const presentation = this.form.querySelector(Selectors.IMAGE.elements.presentation).checked;\n        const imageAltError = alt === '' && !presentation;\n        this.toggleVisibility(Selectors.IMAGE.elements.altWarning, imageAltError);\n        this.toggleAriaInvalid([Selectors.IMAGE.elements.alt, Selectors.IMAGE.elements.presentation], imageAltError);\n\n        return imageAltError;\n    }\n\n    toggleVisibility(selector, predicate) {\n        const elements = this.form.querySelectorAll(selector);\n        elements.forEach((element) => {\n            element.style.display = predicate ? 'block' : 'none';\n        });\n    }\n\n    toggleAriaInvalid(selectors, predicate) {\n        selectors.forEach((selector) => {\n            const elements = this.form.querySelectorAll(selector);\n            elements.forEach((element) => element.setAttribute('aria-invalid', predicate));\n        });\n    }\n\n    getAlignmentClass(alignment) {\n        return alignment;\n    }\n\n    updateWarning() {\n        const urlError = this.hasErrorUrlField();\n        const imageAltError = this.hasErrorAltField();\n\n        return urlError || imageAltError;\n    }\n\n    getImageContext() {\n        // Check if there are any accessibility issues.\n        if (this.updateWarning()) {\n            return null;\n        }\n\n        const classList = [];\n\n        const constrain = this.form.querySelector(Selectors.IMAGE.elements.constrain).value;\n        if (constrain) {\n            classList.push(Selectors.IMAGE.styles.responsive);\n        }\n\n        // Add the alignment class for the image.\n        const alignment = this.getAlignmentClass(this.form.querySelector(Selectors.IMAGE.elements.alignment).value);\n        classList.push(alignment);\n\n        return {\n            url: this.form.querySelector(Selectors.IMAGE.elements.url).value,\n            alt: this.form.querySelector(Selectors.IMAGE.elements.alt).value,\n            width: this.form.querySelector(Selectors.IMAGE.elements.width).value,\n            height: this.form.querySelector(Selectors.IMAGE.elements.height).value,\n            presentation: this.form.querySelector(Selectors.IMAGE.elements.presentation).checked,\n            customStyle: this.form.querySelector(Selectors.IMAGE.elements.customStyle).value,\n            classlist: classList.join(' '),\n        };\n    }\n\n    setImage() {\n        const pendingPromise = new Pending('tiny_media:setImage');\n        const url = this.form.querySelector(Selectors.IMAGE.elements.url).value;\n        if (url === '') {\n            return;\n        }\n\n        // Check if there are any accessibility issues.\n        if (this.updateWarning()) {\n            pendingPromise.resolve();\n            return;\n        }\n\n        // Check for invalid width or height.\n        const width = this.form.querySelector(Selectors.IMAGE.elements.width).value;\n        if (!this.isPercentageValue(width) && isNaN(parseInt(width, 10))) {\n            this.form.querySelector(Selectors.IMAGE.elements.width).focus();\n            pendingPromise.resolve();\n            return;\n        }\n\n        const height = this.form.querySelector(Selectors.IMAGE.elements.height).value;\n        if (!this.isPercentageValue(height) && isNaN(parseInt(height, 10))) {\n            this.form.querySelector(Selectors.IMAGE.elements.height).focus();\n            pendingPromise.resolve();\n            return;\n        }\n\n        Templates.render('tiny_media/image', this.getImageContext())\n        .then((html) => {\n            this.editor.insertContent(html);\n            this.currentModal.destroy();\n            pendingPromise.resolve();\n\n            return html;\n        })\n        .catch();\n    }\n\n    handleKeyupCharacterCount() {\n        const alt = this.form.querySelector(Selectors.IMAGE.elements.alt).value;\n        const current = this.form.querySelector('#currentcount');\n        current.innerHTML = alt.length;\n    }\n\n    autoAdjustSize(forceHeight = false) {\n        // If we do not know the image size, do not do anything.\n        if (!this.rawImageDimensions) {\n            return;\n        }\n\n        const widthField = this.form.querySelector(Selectors.IMAGE.elements.width);\n        const heightField = this.form.querySelector(Selectors.IMAGE.elements.height);\n        const normalizeFieldData = (fieldData) => {\n            fieldData.isPercentageValue = !!this.isPercentageValue(fieldData.field.value);\n            if (fieldData.isPercentageValue) {\n                fieldData.percentValue = parseInt(fieldData.field.value, 10);\n                fieldData.pixelSize = this.rawImageDimensions[fieldData.type] / 100 * fieldData.percentValue;\n            } else {\n                fieldData.pixelSize = parseInt(fieldData.field.value, 10);\n                fieldData.percentValue = fieldData.pixelSize / this.rawImageDimensions[fieldData.type] * 100;\n            }\n\n            return fieldData;\n        };\n\n        const getKeyField = () => {\n            const getValue = () => {\n                if (forceHeight) {\n                    return {\n                        field: heightField,\n                        type: 'height',\n                    };\n                } else {\n                    return {\n                        field: widthField,\n                        type: 'width',\n                    };\n                }\n            };\n\n            const currentValue = getValue();\n            if (currentValue.field.value === '') {\n                currentValue.field.value = this.rawImageDimensions[currentValue.type];\n            }\n\n            return normalizeFieldData(currentValue);\n        };\n\n        const getRelativeField = () => {\n            if (forceHeight) {\n                return normalizeFieldData({\n                    field: widthField,\n                    type: 'width',\n                });\n            } else {\n                return normalizeFieldData({\n                    field: heightField,\n                    type: 'height',\n                });\n            }\n        };\n\n\n        const setImageDimensions = (image, keyField, relativeField, forceHeight = false) => {\n            const getStyleValue = (field) => field.isPercentageValue ? `${field.percentValue}%` : `${field.pixelSize}px`;\n\n            // If the values are constrained, then only update the width.\n            if (forceHeight) {\n                if (keyField.type === 'width') {\n                    image.style.width = getStyleValue(keyField);\n                } else {\n                    image.style.width = getStyleValue(relativeField);\n                }\n            } else {\n                image.style[keyField.type] = getStyleValue(keyField);\n                image.style[relativeField.type] = getStyleValue(relativeField);\n            }\n        };\n\n        const imagePreview = this.form.querySelector(Selectors.IMAGE.elements.preview);\n        // Clear the existing preview sizes.\n        imagePreview.style.width = '';\n        imagePreview.style.height = '';\n\n        // Now update with the new values.\n        const constrainField = this.form.querySelector(Selectors.IMAGE.elements.constrain);\n        const keyField = getKeyField();\n        const relativeField = getRelativeField();\n        if (constrainField.checked) {\n            // We are keeping the image in proportion.\n            // Calculate the size for the relative field.\n            if (keyField.isPercentageValue) {\n                // In proportion, so the percentages are the same.\n                relativeField.field.value = keyField.field.value;\n                relativeField.percentValue = keyField.percentValue;\n            } else {\n                relativeField.pixelSize = Math.round(\n                    keyField.pixelSize / this.rawImageDimensions[keyField.type] * this.rawImageDimensions[relativeField.type]\n                );\n                relativeField.field.value = relativeField.pixelSize;\n            }\n        }\n        setImageDimensions(imagePreview, keyField, relativeField, !!constrainField.checked);\n    }\n\n    getSelectedImageProperties() {\n        const image = this.getSelectedImage();\n        if (!image) {\n            this.selectedImage = null;\n            return null;\n        }\n\n        const properties = {\n            src: null,\n            alt: null,\n            width: null,\n            height: null,\n            align: '',\n            presentation: false,\n        };\n\n        const getImageHeight = (image) => {\n            if (!this.isPercentageValue(String(image.height))) {\n                return parseInt(image.height, 10);\n            }\n\n            return image.height;\n        };\n\n        const getImageWidth = (image) => {\n            if (!this.isPercentageValue(String(image.width))) {\n                return parseInt(image.width, 10);\n            }\n\n            return image.width;\n        };\n\n        // Get the current selection.\n        this.removeLegacyAlignment(image);\n        this.selectedImage = image;\n\n        properties.customStyle = image.style.cssText;\n\n        const width = getImageWidth(image);\n        if (width !== 0) {\n            properties.width = width;\n        }\n\n        const height = getImageHeight(image);\n        if (height !== 0) {\n            properties.height = height;\n        }\n\n        const alignment = this.getAlignmentProperties(image, properties);\n        if (alignment) {\n            properties.align = alignment.value;\n        }\n\n        properties.src = image.getAttribute('src');\n        properties.alt = image.getAttribute('alt') || '';\n        properties.presentation = (image.getAttribute('role') === 'presentation');\n\n        return properties;\n    }\n\n    removeLegacyAlignment(imageNode) {\n        if (!imageNode.style.margin) {\n            // There is no margin therefore this cannot match any known alignments.\n            return imageNode;\n        }\n\n        Selectors.IMAGE.alignments.some(alignment => {\n            if (imageNode.style[alignment.name] !== alignment.value) {\n                // The name/value do not match. Skip.\n                return false;\n            }\n            const normalisedNode = document.createElement('div');\n            normalisedNode.style.margin = alignment.margin;\n            if (imageNode.style.margin !== normalisedNode.style.margin) {\n                // The margin does not match.\n                return false;\n            }\n\n            imageNode.classList.add(this.getAlignmentClass(alignment.value));\n            imageNode.style[alignment.name] = null;\n            imageNode.style.margin = null;\n\n            return true;\n        });\n\n        return imageNode;\n    }\n\n    getAlignmentProperties(image) {\n        const currentAlignment = Selectors.IMAGE.alignments.find((alignment) => {\n            if (image.classList.contains(this.getAlignmentClass(alignment.value))) {\n                return true;\n            }\n\n            if (alignment.legacyValues) {\n                return alignment.legacyValues.some((legacyValue) => image.classList.contains(legacyValue));\n            }\n\n            return false;\n        });\n        if (currentAlignment) {\n            return currentAlignment;\n        }\n\n        return Selectors.IMAGE.alignments.find((alignment) => alignment.isDefault);\n    }\n\n    getSelectedImage() {\n        const imgElm = this.editor.selection.getNode();\n        const figureElm = this.editor.dom.getParent(imgElm, 'figure.image');\n        if (figureElm) {\n            return this.editor.dom.select('img', figureElm)[0];\n        }\n\n        if (imgElm && (imgElm.nodeName.toUpperCase() !== 'IMG' || this.isPlaceholderImage(imgElm))) {\n            return null;\n        }\n        return imgElm;\n    }\n\n    isPlaceholderImage(imgElm) {\n        if (imgElm.nodeName.toUpperCase() !== 'IMG') {\n            return false;\n        }\n\n        return (imgElm.hasAttribute('data-mce-object') || imgElm.hasAttribute('data-mce-placeholder'));\n    }\n\n    isPercentageValue(value) {\n        return value.match(/\\d+%/);\n    }\n\n    async registerEventListeners(modal) {\n        await modal.getBody();\n        const root = modal.getRoot()[0];\n\n        this.form = root.querySelector(Selectors.IMAGE.elements.form);\n        root.addEventListener('click', (e) => {\n            const submitAction = e.target.closest(Selectors.IMAGE.actions.submit);\n            const imageBrowserAction = e.target.closest(Selectors.IMAGE.actions.imageBrowser);\n            if (submitAction) {\n                e.preventDefault();\n                this.setImage();\n            }\n            if (imageBrowserAction && this.canShowFilePicker) {\n                e.preventDefault();\n                displayFilepicker(this.editor, 'image').then((params) => {\n                    const self = this;\n                    this.filePickerCallback(params, self);\n\n                    return;\n                }).catch();\n            }\n        });\n\n        root.addEventListener('change', (e) => {\n            const urlEle = e.target.closest(Selectors.IMAGE.elements.url);\n            if (urlEle) {\n                this.hasErrorUrlField();\n            }\n\n            const presentationEle = e.target.closest(Selectors.IMAGE.elements.presentation);\n            if (presentationEle) {\n                this.hasErrorAltField();\n            }\n\n            const constrainEle = e.target.closest(Selectors.IMAGE.elements.constrain);\n            if (constrainEle) {\n                this.autoAdjustSize(true);\n            }\n        });\n\n        root.addEventListener('blur', (e) => {\n            if (e.target.nodeType === Node.ELEMENT_NODE) {\n                const urlEle = e.target.closest(Selectors.IMAGE.elements.url);\n                if (urlEle) {\n                    this.urlChanged();\n                }\n\n                const altEle = e.target.closest(Selectors.IMAGE.elements.alt);\n                if (altEle) {\n                    this.hasErrorAltField();\n                }\n\n                const widthEle = e.target.closest(Selectors.IMAGE.elements.width);\n                if (widthEle) {\n                    this.autoAdjustSize();\n                }\n\n                const heightEle = e.target.closest(Selectors.IMAGE.elements.height);\n                if (heightEle) {\n                    this.autoAdjustSize(true);\n                }\n            }\n        }, true);\n\n        // Character count.\n        root.addEventListener('keyup', (e) => {\n            const altEle = e.target.closest(Selectors.IMAGE.elements.alt);\n            if (altEle) {\n                this.handleKeyupCharacterCount();\n            }\n        });\n    }\n};\n"],"names":["_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","_interopRequireDefault","obj","__esModule","default","_defineProperty","key","value","arg","input","hint","prim","Symbol","toPrimitive","undefined","res","call","TypeError","String","Number","_toPrimitive","_toPropertyKey","Object","defineProperty","enumerable","configurable","writable","_templates","ModalFactory","cache","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","prototype","hasOwnProperty","desc","set","_interopRequireWildcard","_pending","_selectors","_imagemodal","_exports","MediaImage","constructor","editor","this","WIDTH","HEIGHT","permissions","getImagePermissions","canShowFilePicker","filepicker","async","rawImageDimensions","currentImageData","getCurrentImageData","modal","create","type","Modal","TYPE","title","getString","templateContext","getTemplateContext","removeOnClose","large","currentModal","src","loadPreviewImage","registerEventListeners","show","alignmentTitles","top","middle","bottom","getStrings","map","component","selected","arguments","length","titles","getAlignmentTitles","alignments","text","forEach","alignment","index","array","data","elementid","id","showfilepicker","alignoptions","getImageAlignment","selectedImageProperties","getSelectedImageProperties","properties","align","haspreview","alt","presentation","filePickerCallback","params","self","url","form","querySelector","Selectors","IMAGE","elements","width","height","storeImageDimensions","image","DEFAULTS","currentWidth","element","getCurrentWidth","currentHeight","getCurrentHeight","preview","setAttribute","style","display","constrain","isPercentageValue","checked","disabled","widthRatio","Math","round","parseInt","heightRatio","Image","addEventListener","autoAdjustSize","urlChanged","hasErrorUrlField","urlError","toggleVisibility","urlWarning","toggleAriaInvalid","hasErrorAltField","imageAltError","altWarning","selector","predicate","querySelectorAll","selectors","getAlignmentClass","updateWarning","getImageContext","classList","push","styles","responsive","customStyle","classlist","join","setImage","pendingPromise","Pending","resolve","isNaN","focus","Templates","render","then","html","insertContent","destroy","catch","handleKeyupCharacterCount","innerHTML","forceHeight","widthField","heightField","normalizeFieldData","fieldData","field","percentValue","pixelSize","imagePreview","constrainField","keyField","getKeyField","currentValue","relativeField","getStyleValue","concat","setImageDimensions","getSelectedImage","selectedImage","removeLegacyAlignment","cssText","getImageWidth","getImageHeight","getAlignmentProperties","getAttribute","imageNode","margin","some","name","normalisedNode","document","createElement","add","currentAlignment","find","contains","legacyValues","legacyValue","isDefault","imgElm","selection","getNode","figureElm","dom","getParent","select","nodeName","toUpperCase","isPlaceholderImage","hasAttribute","match","getBody","root","getRoot","e","submitAction","target","closest","actions","submit","imageBrowserAction","imageBrowser","preventDefault","displayFilepicker","nodeType","Node","ELEMENT_NODE"],"mappings":"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"}