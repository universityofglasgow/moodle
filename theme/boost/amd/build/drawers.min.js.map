{"version":3,"sources":["../src/drawers.js"],"names":["backdropPromise","drawerMap","Map","SELECTORS","BUTTONS","CLOSEBTN","OPENBTN","TOGGLEBTN","DRAWERS","CONTAINER","DRAWERCONTENT","CLASSES","SCROLLED","sizes","medium","large","getCurrentWidth","DomRect","document","body","getBoundingClientRect","x","width","isSmall","browserWidth","isLarge","getBackdrop","Templates","render","then","html","ModalBackdrop","modalBackdrop","getAttachmentPoint","get","addEventListener","e","preventDefault","Drawers","closeAllDrawers","catch","getDrawerOpenButton","drawerId","openButton","querySelector","disableDrawerTooltips","drawerNode","buttons","id","forEach","button","hasAttribute","tooltip","dataset","disabledToggle","toggle","removeAttribute","enableDrawerTooltips","addInnerScrollListener","content","classList","scrollTop","contains","openDrawer","focusOnCloseButton","forceopen","Aria","hide","set","eventname","cancelable","drawerInstance","pendingPromise","Pending","showEvent","dispatchEvent","eventTypes","drawerShow","defaultPrevented","unhide","add","preference","M","util","set_user_preference","state","page","getElementById","backdrop","show","pageWrapper","style","overflow","setTimeout","closeButton","focus","resolve","drawerShown","hideEvent","drawerHide","remove","drawerHidden","closeDrawer","parseInt","closeOnResize","has","comparisonInstance","setLastUsedToggle","toggleButton","target","querySelectorAll","btn","lastused","focusLastUsedToggle","lastUsedButton","scroller","drawerLayout","window","innerHeight","registerListeners","closest","targetDrawer","getDrawerInstanceForNode","toggleVisibility","openDrawerButton","closeDrawerButton","closeOtherDrawers","detail","closeOnResizeListener","anyOpen","isOpen","drawers"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Toggling the visibility of the secondary navigation on mobile.\n *\n * @module     theme_boost/drawers\n * @copyright  2021 Bas Brands\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport ModalBackdrop from 'core/modal_backdrop';\nimport Templates from 'core/templates';\nimport * as Aria from 'core/aria';\nimport {dispatchEvent} from 'core/event_dispatcher';\nimport {debounce} from 'core/utils';\nimport Pending from 'core/pending';\n// The jQuery module is only used for interacting with Boostrap 4. It can we removed when MDL-71979 is integrated.\nimport jQuery from 'jquery';\n\nlet backdropPromise = null;\n\nconst drawerMap = new Map();\n\nconst SELECTORS = {\n    BUTTONS: '[data-toggler=\"drawers\"]',\n    CLOSEBTN: '[data-toggler=\"drawers\"][data-action=\"closedrawer\"]',\n    OPENBTN: '[data-toggler=\"drawers\"][data-action=\"opendrawer\"]',\n    TOGGLEBTN: '[data-toggler=\"drawers\"][data-action=\"toggle\"]',\n    DRAWERS: '[data-region=\"fixed-drawer\"]',\n    CONTAINER: '#page.drawers',\n    DRAWERCONTENT: '.drawercontent',\n};\n\nconst CLASSES = {\n    SCROLLED: 'scrolled',\n};\n\n/**\n * Maximum sizes for breakpoints. This needs to correspond with Bootstrap\n * Breakpoints\n *\n * @private\n */\nconst sizes = {\n    medium: 991,\n    large: 1400\n};\n\n/**\n * Get the current body width.\n *\n * @returns {number} the current body width.\n * @private\n */\nconst getCurrentWidth = () => {\n    const DomRect = document.body.getBoundingClientRect();\n    return DomRect.x + DomRect.width;\n};\n\n/**\n * Check if the user uses a small size browser.\n *\n * @returns {boolean} true if the body is smaller than sizes.medium max size.\n * @private\n */\nconst isSmall = () => {\n    const browserWidth = getCurrentWidth();\n    return browserWidth < sizes.medium;\n};\n\n/**\n * Check if the user uses a large size browser.\n *\n * @returns {boolean} true if the body is smaller than sizes.large max size.\n * @private\n */\nconst isLarge = () => {\n    const browserWidth = getCurrentWidth();\n    return browserWidth >= sizes.large;\n};\n\n/**\n * Add a backdrop to the page.\n *\n * @returns {Promise} rendering of modal backdrop.\n * @private\n */\nconst getBackdrop = () => {\n    if (!backdropPromise) {\n        backdropPromise = Templates.render('core/modal_backdrop', {})\n        .then(html => new ModalBackdrop(html))\n        .then(modalBackdrop => {\n            modalBackdrop.getAttachmentPoint().get(0).addEventListener('click', e => {\n                e.preventDefault();\n                Drawers.closeAllDrawers();\n            });\n            return modalBackdrop;\n        })\n        .catch();\n    }\n    return backdropPromise;\n};\n\n/**\n * Get the button element to open a specific drawer.\n *\n * @param {String} drawerId the drawer element Id\n * @return {HTMLElement|undefined} the open button element\n * @private\n */\nconst getDrawerOpenButton = (drawerId) => {\n    let openButton = document.querySelector(`${SELECTORS.OPENBTN}[data-target=\"${drawerId}\"]`);\n    if (!openButton) {\n        openButton = document.querySelector(`${SELECTORS.TOGGLEBTN}[data-target=\"${drawerId}\"]`);\n    }\n    return openButton;\n};\n\n/**\n * Disable drawer tooltips.\n *\n * @param {HTMLElement} drawerNode the drawer main node\n * @private\n */\nconst disableDrawerTooltips = (drawerNode) => {\n    const buttons = [\n        drawerNode.querySelector(SELECTORS.CLOSEBTN),\n        getDrawerOpenButton(drawerNode.id),\n    ];\n    buttons.forEach(button => {\n        if (!button) {\n            return;\n        }\n        if (button.hasAttribute('data-original-title')) {\n            // The jQuery is still used in Boostrap 4. It can we removed when MDL-71979 is integrated.\n            jQuery(button).tooltip('disable');\n        } else {\n            button.dataset.disabledToggle = button.dataset.toggle;\n            button.removeAttribute('data-toggle');\n        }\n    });\n};\n\n/**\n * Enable drawer tooltips.\n *\n * @param {HTMLElement} drawerNode the drawer main node\n * @private\n */\nconst enableDrawerTooltips = (drawerNode) => {\n    const buttons = [\n        drawerNode.querySelector(SELECTORS.CLOSEBTN),\n        getDrawerOpenButton(drawerNode.id),\n    ];\n    buttons.forEach(button => {\n        if (!button) {\n            return;\n        }\n        // The jQuery is still used in Boostrap 4. It can we removed when MDL-71979 is integrated.\n        if (button.hasAttribute('data-original-title')) {\n            jQuery(button).tooltip('enable');\n        } else if (button.dataset.disabledToggle) {\n            button.dataset.toggle = button.dataset.disabledToggle;\n            jQuery(button).tooltip();\n        }\n    });\n};\n\n/**\n * Add scroll listeners to a drawer element.\n *\n * @param {HTMLElement} drawerNode the drawer main node\n * @private\n */\nconst addInnerScrollListener = (drawerNode) => {\n    const content = drawerNode.querySelector(SELECTORS.DRAWERCONTENT);\n    if (!content) {\n        return;\n    }\n    content.addEventListener(\"scroll\", () => {\n        drawerNode.classList.toggle(\n            CLASSES.SCROLLED,\n            content.scrollTop != 0\n        );\n    });\n};\n\n/**\n * The Drawers class is used to control on-screen drawer elements.\n *\n * It handles opening, and closing of drawer elements, as well as more detailed behaviours such as closing a drawer when\n * another drawer is opened, and supports closing a drawer when the screen is resized.\n *\n * Drawers are instantiated on page load, and can also be toggled lazily when toggling any drawer toggle, open button,\n * or close button.\n *\n * A range of show and hide events are also dispatched as detailed in the class\n * {@link module:theme_boost/drawers#eventTypes eventTypes} object.\n *\n * @example <caption>Standard usage</caption>\n *\n * // The module just needs to be included to add drawer support.\n * import 'theme_boost/drawers';\n *\n * @example <caption>Manually open or close any drawer</caption>\n *\n * import Drawers from 'theme_boost/drawers';\n *\n * const myDrawer = Drawers.getDrawerInstanceForNode(document.querySelector('.myDrawerNode');\n * myDrawer.closeDrawer();\n *\n * @example <caption>Listen to the before show event and cancel it</caption>\n *\n * import Drawers from 'theme_boost/drawers';\n *\n * document.addEventListener(Drawers.eventTypes.drawerShow, e => {\n *     // The drawer which will be shown.\n *     window.console.log(e.target);\n *\n *     // The instance of the Drawers class for this drawer.\n *     window.console.log(e.detail.drawerInstance);\n *\n *     // Prevent this drawer from being shown.\n *     e.preventDefault();\n * });\n *\n * @example <caption>Listen to the shown event</caption>\n *\n * document.addEventListener(Drawers.eventTypes.drawerShown, e => {\n *     // The drawer which was shown.\n *     window.console.log(e.target);\n *\n *     // The instance of the Drawers class for this drawer.\n *     window.console.log(e.detail.drawerInstance);\n * });\n */\nexport default class Drawers {\n    /**\n     * The underlying HTMLElement which is controlled.\n     */\n    drawerNode = null;\n\n    constructor(drawerNode) {\n        this.drawerNode = drawerNode;\n\n        if (this.drawerNode.classList.contains('show')) {\n            this.openDrawer({focusOnCloseButton: false});\n        } else if (this.drawerNode.dataset.forceopen == 1) {\n            if (!isSmall()) {\n                this.openDrawer({focusOnCloseButton: false});\n            }\n        } else {\n            Aria.hide(this.drawerNode);\n        }\n\n        // Disable tooltips in small screens.\n        if (isSmall()) {\n            disableDrawerTooltips(this.drawerNode);\n        }\n\n        addInnerScrollListener(this.drawerNode);\n\n        drawerMap.set(drawerNode, this);\n    }\n\n    /**\n     * Whether the drawer is open.\n     *\n     * @returns {boolean}\n     */\n    get isOpen() {\n        return this.drawerNode.classList.contains('show');\n    }\n\n    /**\n     * Whether the drawer should close when the window is resized\n     *\n     * @returns {boolean}\n     */\n    get closeOnResize() {\n        return !!parseInt(this.drawerNode.dataset.closeOnResize);\n    }\n\n    /**\n     * The list of event types.\n     *\n     * @static\n     * @property {String} drawerShow See {@link event:theme_boost/drawers:show}\n     * @property {String} drawerShown See {@link event:theme_boost/drawers:shown}\n     * @property {String} drawerHide See {@link event:theme_boost/drawers:hide}\n     * @property {String} drawerHidden See {@link event:theme_boost/drawers:hidden}\n     */\n    static eventTypes = {\n        /**\n         * An event triggered before a drawer is shown.\n         *\n         * @event theme_boost/drawers:show\n         * @type {CustomEvent}\n         * @property {HTMLElement} target The drawer that will be opened.\n         */\n        drawerShow: 'theme_boost/drawers:show',\n\n        /**\n         * An event triggered after a drawer is shown.\n         *\n         * @event theme_boost/drawers:shown\n         * @type {CustomEvent}\n         * @property {HTMLElement} target The drawer that was be opened.\n         */\n        drawerShown: 'theme_boost/drawers:shown',\n\n        /**\n         * An event triggered before a drawer is hidden.\n         *\n         * @event theme_boost/drawers:hide\n         * @type {CustomEvent}\n         * @property {HTMLElement} target The drawer that will be hidden.\n         */\n        drawerHide: 'theme_boost/drawers:hide',\n\n        /**\n         * An event triggered after a drawer is hidden.\n         *\n         * @event theme_boost/drawers:hidden\n         * @type {CustomEvent}\n         * @property {HTMLElement} target The drawer that was be hidden.\n         */\n        drawerHidden: 'theme_boost/drawers:hidden',\n    };\n\n\n    /**\n     * Get the drawer instance for the specified node\n     *\n     * @param {HTMLElement} drawerNode\n     * @returns {module:theme_boost/drawers}\n     */\n    static getDrawerInstanceForNode(drawerNode) {\n        if (!drawerMap.has(drawerNode)) {\n            new Drawers(drawerNode);\n        }\n\n        return drawerMap.get(drawerNode);\n    }\n\n    /**\n     * Dispatch a drawer event.\n     *\n     * @param {string} eventname the event name\n     * @param {boolean} cancelable if the event is cancelable\n     * @returns {CustomEvent} the resulting custom event\n     */\n    dispatchEvent(eventname, cancelable = false) {\n        return dispatchEvent(\n            eventname,\n            {\n                drawerInstance: this,\n            },\n            this.drawerNode,\n            {\n                cancelable,\n            }\n        );\n    }\n\n    /**\n     * Open the drawer.\n     *\n     * By default, openDrawer sets the page focus to the close drawer button. However, when a drawer is open at page\n     * load, this represents an accessibility problem as the initial focus changes without any user interaction. The\n     * focusOnCloseButton parameter can be set to false to prevent this behaviour.\n     *\n     * @param {object} args\n     * @param {boolean} [args.focusOnCloseButton=true] Whether to alter page focus when opening the drawer\n     */\n    openDrawer({focusOnCloseButton = true} = {}) {\n\n        const pendingPromise = new Pending('theme_boost/drawers:open');\n        const showEvent = this.dispatchEvent(Drawers.eventTypes.drawerShow, true);\n        if (showEvent.defaultPrevented) {\n            return;\n        }\n\n        // Hide close button while the drawer is showing to prevent glitchy effects.\n        this.drawerNode.querySelector(SELECTORS.CLOSEBTN)?.classList.toggle('hidden', true);\n\n        // Remove open tooltip if still visible.\n        let openButton = getDrawerOpenButton(this.drawerNode.id);\n        if (openButton && openButton.hasAttribute('data-original-title')) {\n            // The jQuery is still used in Boostrap 4. It can we removed when MDL-71979 is integrated.\n            jQuery(openButton)?.tooltip('hide');\n        }\n\n        Aria.unhide(this.drawerNode);\n        this.drawerNode.classList.add('show');\n\n        const preference = this.drawerNode.dataset.preference;\n        if (preference && !isSmall() && (this.drawerNode.dataset.forceopen != 1)) {\n            M.util.set_user_preference(preference, true);\n        }\n\n        const state = this.drawerNode.dataset.state;\n        if (state) {\n            const page = document.getElementById('page');\n            page.classList.add(state);\n        }\n\n        if (isSmall()) {\n            getBackdrop().then(backdrop => {\n                backdrop.show();\n\n                const pageWrapper = document.getElementById('page-wrapper');\n                pageWrapper.style.overflow = 'hidden';\n                return backdrop;\n            })\n            .catch();\n        }\n\n        // Show close button once the drawer is fully opened.\n        setTimeout(() => {\n            const closeButton = this.drawerNode.querySelector(SELECTORS.CLOSEBTN);\n            closeButton.classList.toggle('hidden', false);\n            if (focusOnCloseButton) {\n                closeButton.focus();\n            }\n            pendingPromise.resolve();\n        }, 300);\n\n        this.dispatchEvent(Drawers.eventTypes.drawerShown);\n    }\n\n    /**\n     * Close the drawer.\n     */\n    closeDrawer() {\n\n        const pendingPromise = new Pending('theme_boost/drawers:close');\n\n        const hideEvent = this.dispatchEvent(Drawers.eventTypes.drawerHide, true);\n        if (hideEvent.defaultPrevented) {\n            return;\n        }\n\n        // Hide close button while the drawer is hiding to prevent glitchy effects.\n        const closeButton = this.drawerNode.querySelector(SELECTORS.CLOSEBTN);\n        closeButton?.classList.toggle('hidden', true);\n        // Remove the close button tooltip if visible.\n        if (closeButton.hasAttribute('data-original-title')) {\n            // The jQuery is still used in Boostrap 4. It can we removed when MDL-71979 is integrated.\n            jQuery(closeButton)?.tooltip('hide');\n        }\n\n        const preference = this.drawerNode.dataset.preference;\n        if (preference) {\n            M.util.set_user_preference(preference, false);\n        }\n\n        const state = this.drawerNode.dataset.state;\n        if (state) {\n            const page = document.getElementById('page');\n            page.classList.remove(state);\n        }\n\n        Aria.hide(this.drawerNode);\n        this.drawerNode.classList.remove('show');\n\n        getBackdrop().then(backdrop => {\n            backdrop.hide();\n\n            if (isSmall()) {\n                const pageWrapper = document.getElementById('page-wrapper');\n                pageWrapper.style.overflow = 'auto';\n            }\n            return backdrop;\n        })\n        .catch();\n\n        // Move focus to the open drawer (or toggler) button once the drawer is hidden.\n        setTimeout(() => {\n            let openButton = getDrawerOpenButton(this.drawerNode.id);\n            if (openButton) {\n                openButton.focus();\n            }\n            pendingPromise.resolve();\n        }, 300);\n\n        this.dispatchEvent(Drawers.eventTypes.drawerHidden);\n    }\n\n    /**\n     * Toggle visibility of the drawer.\n     */\n    toggleVisibility() {\n        if (this.drawerNode.classList.contains('show')) {\n            this.closeDrawer();\n        } else {\n            this.openDrawer();\n        }\n    }\n\n    /**\n     * Close all drawers.\n     */\n    static closeAllDrawers() {\n        drawerMap.forEach(drawerInstance => {\n            drawerInstance.closeDrawer();\n        });\n    }\n\n    /**\n     * Close all drawers except for the specified drawer.\n     *\n     * @param {module:theme_boost/drawers} comparisonInstance\n     */\n    static closeOtherDrawers(comparisonInstance) {\n        drawerMap.forEach(drawerInstance => {\n            if (drawerInstance === comparisonInstance) {\n                return;\n            }\n\n            drawerInstance.closeDrawer();\n        });\n    }\n}\n\n/**\n * Activate the scroller helper for the drawer layout.\n *\n * @private\n */\nconst scroller = () => {\n    const body = document.querySelector('body');\n    const drawerLayout = document.querySelector(SELECTORS.CONTAINER);\n    if (drawerLayout) {\n        drawerLayout.addEventListener(\"scroll\", () => {\n            if (drawerLayout.scrollTop >= window.innerHeight) {\n                body.classList.add(CLASSES.SCROLLED);\n            } else {\n                body.classList.remove(CLASSES.SCROLLED);\n            }\n        });\n    }\n};\n\n/**\n * Set the last used attribute for the last used toggle button for a drawer.\n *\n * @param {object} toggleButton The clicked button.\n */\nconst setLastUsedToggle = (toggleButton) => {\n    if (toggleButton.dataset.target) {\n        document.querySelectorAll(`${SELECTORS.BUTTONS}[data-target=\"${toggleButton.dataset.target}\"]`)\n        .forEach(btn => {\n            btn.dataset.lastused = false;\n        });\n        toggleButton.dataset.lastused = true;\n    }\n};\n\n/**\n * Set the focus to the last used button to open this drawer.\n * @param {string} target The drawer target.\n */\nconst focusLastUsedToggle = (target) => {\n    const lastUsedButton = document.querySelector(`${SELECTORS.BUTTONS}[data-target=\"${target}\"][data-lastused=\"true\"`);\n    if (lastUsedButton) {\n        lastUsedButton.focus();\n    }\n};\n\n/**\n * Register the event listeners for the drawer.\n *\n * @private\n */\nconst registerListeners = () => {\n    // Listen for show/hide events.\n    document.addEventListener('click', e => {\n        const toggleButton = e.target.closest(SELECTORS.TOGGLEBTN);\n        if (toggleButton && toggleButton.dataset.target) {\n            e.preventDefault();\n            const targetDrawer = document.getElementById(toggleButton.dataset.target);\n            const drawerInstance = Drawers.getDrawerInstanceForNode(targetDrawer);\n            setLastUsedToggle(toggleButton);\n\n            drawerInstance.toggleVisibility();\n        }\n\n        const openDrawerButton = e.target.closest(SELECTORS.OPENBTN);\n        if (openDrawerButton && openDrawerButton.dataset.target) {\n            e.preventDefault();\n            const targetDrawer = document.getElementById(openDrawerButton.dataset.target);\n            const drawerInstance = Drawers.getDrawerInstanceForNode(targetDrawer);\n            setLastUsedToggle(toggleButton);\n\n            drawerInstance.openDrawer();\n        }\n\n        const closeDrawerButton = e.target.closest(SELECTORS.CLOSEBTN);\n        if (closeDrawerButton && closeDrawerButton.dataset.target) {\n            e.preventDefault();\n            const targetDrawer = document.getElementById(closeDrawerButton.dataset.target);\n            const drawerInstance = Drawers.getDrawerInstanceForNode(targetDrawer);\n\n            drawerInstance.closeDrawer();\n            focusLastUsedToggle(closeDrawerButton.dataset.target);\n        }\n    });\n\n    // Close drawer when another drawer opens.\n    document.addEventListener(Drawers.eventTypes.drawerShow, e => {\n        if (isLarge()) {\n            return;\n        }\n        Drawers.closeOtherDrawers(e.detail.drawerInstance);\n    });\n\n    const closeOnResizeListener = () => {\n        if (isSmall()) {\n            let anyOpen = false;\n            drawerMap.forEach(drawerInstance => {\n                disableDrawerTooltips(drawerInstance.drawerNode);\n                if (drawerInstance.isOpen) {\n                    if (drawerInstance.closeOnResize) {\n                        drawerInstance.closeDrawer();\n                    } else {\n                        anyOpen = true;\n                    }\n                }\n            });\n\n            if (anyOpen) {\n                getBackdrop().then(backdrop => backdrop.show()).catch();\n            }\n        } else {\n            drawerMap.forEach(drawerInstance => {\n                enableDrawerTooltips(drawerInstance.drawerNode);\n            });\n            getBackdrop().then(backdrop => backdrop.hide()).catch();\n        }\n    };\n\n    window.addEventListener('resize', debounce(closeOnResizeListener, 400));\n};\n\nscroller();\nregisterListeners();\n\nconst drawers = document.querySelectorAll(SELECTORS.DRAWERS);\ndrawers.forEach(drawerNode => Drawers.getDrawerInstanceForNode(drawerNode));\n"],"file":"drawers.min.js"}