{"version":3,"file":"board.min.js","sources":["../src/board.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * A javascript module to handle the board.\n *\n * @author     Karen Holland <karen@brickfieldlabs.ie>\n * @copyrigt   2021 Brickfield Education Labs <https://www.brickfield.ie/>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport $ from \"jquery\";\nimport \"jqueryui\";\nimport {get_strings as getStrings, get_string as getString} from \"core/str\";\nimport Ajax from \"core/ajax\";\nimport ModalFactory from \"core/modal_factory\";\nimport ModalEvents from \"core/modal_events\";\nimport Notification from \"core/notification\";\nimport \"mod_board/jquery.editable.amd\";\nimport Fragment from \"core/fragment\";\nimport Comments from \"mod_board/comments\";\nimport moveNotesDialog from \"./movenotesdialog\";\nimport moveColumnsDialog from \"./movecolumnsdialog\";\n\n/**\n * Execute a ajax call to a mod_board ajax service.\n *\n * @param {string} method\n * @param {array} args\n * @param {method} callback\n * @param {method} failcallback\n * @private\n */\nconst _serviceCall = function(method, args, callback, failcallback) {\n    Ajax.call([{\n        methodname: 'mod_board_' + method,\n        args: args,\n        done: function(data) {\n            callback(data);\n        },\n        fail: function(error) {\n            Notification.exception(error);\n            if (failcallback) {\n                failcallback(error);\n            }\n        }\n    }]);\n};\n\n/**\n * Indicates if this is a keycode we want to listend to for\n * aria purposes.\n *\n * @returns {boolean}\n * @param {number} key\n */\nconst isAriaTriggerKey = function(key) {\n    return key == 13 || key == 32;\n};\n\n/**\n * Encodes text into html entities.\n *\n * @param {string} rawText\n * @returns {*|jQuery}\n */\nconst encodeText = function(rawText) {\n    return $('<div />').text(rawText).html();\n};\n\n/**\n * Decodes text from html entities.\n *\n * @param {string} encodedText\n * @returns {*|jQuery}\n */\nconst decodeText = function(encodedText) {\n    return $('<div />').html(encodedText).text();\n};\n\n/**\n * Handler for keypress and click actions.\n *\n * @param {object} elem\n * @param {function} callback\n * @returns {*}\n */\nconst handleAction = function(elem, callback) {\n    return elem.on('click keypress', function(e) {\n        if (e.type == 'keypress') {\n            if (isAriaTriggerKey(e.keyCode)) {\n                e.preventDefault();\n            } else {\n                return;\n            }\n        }\n\n        callback();\n        e.preventDefault();\n    });\n};\n\n/**\n * Setting up element edibility.\n *\n * @param {object} elem\n * @param {function} callback\n * @param {function} callBeforeOnKeyEditing\n * @returns {*}\n */\nconst handleEditableAction = function(elem, callback, callBeforeOnKeyEditing) {\n    if (elem.is(':editable')) {\n        throw new Error('handleEditableAction - must be called before setting the element as editable');\n    }\n\n    // Can't use on(edit) here because we want to do actions (save cache) before the control goes into edit mode\n    return elem.on('dblclick keypress', function(e) {\n        if (e.type == 'keypress') {\n            if (isAriaTriggerKey(e.keyCode) && !elem.is(':editing')) {\n                e.preventDefault();\n                if (callBeforeOnKeyEditing) {\n                    callback();\n                }\n                elem.editable('open');\n                if (callBeforeOnKeyEditing) {\n                    return;\n                }\n            } else {\n                return;\n            }\n        }\n\n        callback();\n    });\n};\n\n/**\n * The default function of the module, which does the setup of the page.\n *\n * @param {object} board\n * @param {object} options\n * @param {number} contextid\n */\nexport default function(board, options, contextid) {\n    // An array of strings to load as a batch later.\n    // Not necessary, but used to load all the strings in one ajax call.\n    var strings = {\n        default_column_heading: '',\n        post_button_text: '',\n        cancel_button_text: '',\n        remove_note_title: '',\n        remove_note_text: '',\n        remove_column_title: '',\n        note_changed_title: '',\n        note_changed_text: '',\n        note_deleted_text: '',\n        rate_note_title: '',\n        rate_note_text: '',\n        Ok: '',\n        delete: '',\n        Cancel: '',\n        warning: '',\n        modal_title_new: '',\n        modal_title_edit: '',\n        option_youtube: '',\n        option_image: '',\n        option_link: '',\n\n        aria_newcolumn: '',\n        aria_newpost: '',\n        aria_deletecolumn: '',\n        aria_movecolumn: '',\n        aria_deletepost: '',\n        aria_movepost: '',\n        aria_editpost: '',\n        aria_addmedia: '',\n        aria_addmedianew: '',\n        aria_deleteattachment: '',\n        aria_lockcolumn: '',\n        aria_postedit: '',\n        aria_canceledit: '',\n        aria_postnew: '',\n        aria_cancelnew: '',\n        aria_ratepost: '',\n\n        invalid_file_extension: '',\n        invalid_file_size_min: '',\n        invalid_file_size_max: '',\n\n        invalid_youtube_url: '',\n    };\n\n    const MEDIA_SELECTION_BUTTONS = 1,\n          ATTACHMENT_VIDEO = 1,\n          ATTACHMENT_IMAGE = 2,\n          ATTACHMENT_LINK = 3,\n          SORTBY_DATE = 1,\n          SORTBY_RATING = 2,\n          SORTBY_NONE = 3;\n    var reloadTimer = null,\n        lastHistoryId = null,\n        isEditor = options.isEditor || false,\n        usersCanEdit = options.usersCanEdit,\n        userId = parseInt(options.userId) || -1,\n        ownerId = parseInt(options.ownerId),\n        mediaSelection = options.mediaselection || MEDIA_SELECTION_BUTTONS,\n        editingNote = 0,\n        isReadOnlyBoard = options.readonly || false,\n        ratingenabled = options.ratingenabled,\n        sortby = options.sortby || SORTBY_DATE,\n        editModal = null,\n        enableblanktarget = (parseInt(options.enableblanktarget) === 1);\n\n    /**\n     * Helper method to make calls to mod_board external services.\n     *\n     * @param {string} method\n     * @param {array} args\n     * @param {function} callback\n     * @param {function} failcallback\n     */\n    var serviceCall = function(method, args, callback, failcallback) {\n        if (method !== 'board_history') {\n            stopUpdating();\n        }\n        _serviceCall(method, args, function() {\n            if (callback) {\n                callback.apply(null, arguments);\n            }\n            if (method !== 'board_history' && method != 'get_board') {\n                updateBoard(true);\n            }\n        }, failcallback);\n    };\n\n    /**\n     * Returns the jquery element of a given note identifier.\n     *\n     * @param {number} ident\n     * @returns {jQuery<HTMLElement>}\n     */\n    var getNote = function(ident) {\n        return $(\".board_note[data-ident='\" + ident + \"']\");\n    };\n\n    /**\n     * Returns the jquery element of the note text for the given note element.\n     *\n     * @method getNoteTextForNote\n     * @param {object} note\n     * @returns {*|jQuery}\n     */\n    var getNoteTextForNote = function(note) {\n        return $(note).find(\".mod_board_note_text\");\n    };\n\n    /**\n     * Returns the jquery element of the preview for the given note element.\n     *\n     * @method getNotePreviewForNote\n     * @param {object} note\n     * @returns {*|jQuery}\n     */\n    var getNotePreviewForNote = (note) => {\n        return $(note).find(\".mod_board_preview\");\n    };\n\n\n    /**\n     * Returns the jquery element of the note heading for the given note element.\n     *\n     * @method getNoteHeadingForNote\n     * @param {object} note\n     * @returns {*|jQuery}\n     */\n    var getNoteHeadingForNote = function(note) {\n        return $(note).find(\".mod_board_note_heading\");\n    };\n\n    /**\n     * Returns the jquery element of the note border for the given note element.\n     *\n     * @method getNoteBorderForNote\n     * @param {object} note\n     * @returns {*|jQuery}\n     */\n    var getNoteBorderForNote = function(note) {\n        return $(note).find(\".mod_board_note_border\");\n    };\n\n    /**\n     * Gets a jquery node for the attachments of a given note.\n     *\n     * @method getNoteAttachmentsForNote\n     * @param {object} note\n     * @returns {*|jQuery}\n     */\n    var getNoteAttachmentsForNote = function(note) {\n        return $(note).find(\".mod_board_note_attachment\");\n    };\n\n    /**\n     * Creates text identifier for a given node.\n     *\n     * @method textIdentifierForNote\n     * @param {object} note\n     * @returns {null|*|jQuery}\n     */\n    var textIdentifierForNote = function(note) {\n        var noteText = getNoteTextForNote(note).html(),\n            noteHeading = getNoteHeadingForNote(note).html(),\n            noteAttachment = attachmentDataForNote(note);\n\n        if (noteHeading.length > 0) {\n            return noteHeading;\n        }\n        if (noteText.length > 0) {\n            return noteText.replace(/<br\\s*\\/?>/gi, \" \").replace(/\\n/g, \" \").split(/\\s+/).slice(0, 5).join(\" \");\n        }\n        if (noteAttachment.info && noteAttachment.info.length > 0) {\n            return noteAttachment.info;\n        }\n        return null;\n    };\n\n    /**\n     * Update the Aria info for a given note id.\n     *\n     * @method updateNoteAria\n     * @param {number} noteId\n     */\n    var updateNoteAria = function(noteId) {\n        var note = getNote(noteId),\n            columnIdentifier = note.closest('.board_column').find('.mod_board_column_name').text();\n\n        if (noteId) { // New post\n            var noteIdentifier = textIdentifierForNote(note),\n                deleteNoteString = strings.aria_deletepost.replace('{column}', columnIdentifier).replace('{post}', noteIdentifier);\n\n            note.find('.delete_note').attr('aria-label', deleteNoteString).attr('title', deleteNoteString);\n\n            var moveNoteString = strings.aria_movepost.replace('{post}', noteIdentifier);\n            note.find('.move_note').attr('aria-label', moveNoteString).attr('title', moveNoteString);\n\n            var editNoteString = strings.aria_editpost.replace('{post}', noteIdentifier);\n            note.find('.edit_note').attr('aria-label', editNoteString).attr('title', editNoteString);\n\n            note.find('.mod_board_rating').attr('aria-label', strings.aria_ratepost.replace('{column}',\n                columnIdentifier).replace('{post}', noteIdentifier));\n            note.find('.note_ariatext').html(noteIdentifier);\n        }\n\n    };\n\n    /**\n     * Update the Aria information for a given column id.\n     *\n     * @method updateColumnAria\n     * @param {number} columnId\n     */\n    var updateColumnAria = function(columnId) {\n        var column = $('.board_column[data-ident=' + columnId + ']'),\n            columnIdentifier = column.find('.mod_board_column_name').text(),\n            newNoteString = strings.aria_newpost.replace('{column}', columnIdentifier),\n            moveColumnString = strings.aria_movecolumn.replace('{column}', columnIdentifier),\n            deleteColumnString = strings.aria_deletecolumn.replace('{column}', columnIdentifier),\n            lockColumnString = strings.aria_lockcolumn.replace('{column}', columnIdentifier);\n        column.find('.newnote').attr('aria-label', newNoteString).attr('title', newNoteString);\n        column.find('.mod_column_move').attr('aria-label', moveColumnString).attr('title', moveColumnString);\n        column.find('.delete_column').attr('aria-label', deleteColumnString).attr('title', deleteColumnString);\n        column.find('.lock_column').attr('aria-label', lockColumnString).attr('title', lockColumnString);\n\n        column.find(\".board_note\").each(function(index, note) {\n            updateNoteAria($(note).data('ident'));\n        });\n    };\n\n    /**\n     * Stop the current note editing process.\n     *\n     * @method stopNoteEdit\n     */\n    var stopNoteEdit = function() {\n        if (!editingNote) {\n            getNote(0).remove();\n            return;\n        }\n\n        var note = getNote(editingNote);\n\n        if (note) {\n            var noteHeading = getNoteHeadingForNote(note);\n            var noteText = getNoteTextForNote(note);\n            var noteBorder = getNoteBorderForNote(note);\n\n            // Reset the visibility state.\n            noteHeading.show();\n            noteBorder.show();\n            noteText.show();\n            if (!noteHeading.html()) {\n                noteHeading.hide();\n                noteBorder.hide();\n            }\n            if (!noteText.html() && noteHeading.html()) {\n                noteText.hide();\n                noteBorder.hide();\n            }\n        }\n\n        editingNote = 0;\n    };\n\n    /**\n     * Start the editing of a particular note, by identifier.\n     *\n     * @method startNoteEdit\n     * @param {number} ident\n     */\n    var startNoteEdit = function(ident) {\n\n        if (editingNote) {\n            if (editingNote == ident) {\n                return;\n            }\n            stopNoteEdit();\n        }\n\n        if (ident) {\n            var pendingNote = getNote(0);\n            if (pendingNote) {\n                pendingNote.remove();\n            }\n        }\n\n        var note = getNote(ident);\n        if (note) {\n            showModalForm(note);\n\n            if (ident) {\n                editingNote = ident;\n            }\n        }\n    };\n\n    /**\n     * Delete a given note, by identifier.\n     *\n     * @method deleteNote\n     * @param {number} ident\n     */\n    var deleteNote = function(ident) {\n        Notification.confirm(\n            strings.remove_note_title, // Are you sure?\n            strings.remove_note_text, // This will effect others.\n            strings.delete,\n            strings.Cancel,\n            function() {\n                serviceCall('delete_note', { id: ident }, function (result) {\n                    if (result.status) {\n                        lastHistoryId = result.historyid;\n                        let note = getNote(ident);\n                        if (sortby == SORTBY_NONE) {\n                            let columnID = note.data('column');\n                            let sortorder = note.data('sortorder');\n                            sortAfterDelete(columnID, sortorder);\n                        }\n                        note.remove();\n                    }\n                });\n            }\n        );\n    };\n\n    /**\n     * This function gets a board column as a jQuery element.\n     * @param {number} columnID The column ID.\n     * @returns {jQuery<HTMLElement>}\n     */\n    const getColumn = (columnID) => {\n        return $(`.board_column[data-ident='${columnID}'] .board_column_content`);\n    };\n\n    const sortAfterDelete = (columnID, sortorder) => {\n        let column = getColumn(columnID);\n        let elements = column.children().filter((_, element) => {\n            return parseInt($(element).data('sortorder')) > parseInt(sortorder);\n        });\n        elements.each((_, element) => {\n            let so = $(element).data('sortorder');\n            $(element).data('sortorder', so - 1);\n        });\n    };\n\n    /**\n     * Rate (star) a give note, by identifier.\n     *\n     * @method rateNote\n     * @param {number} ident\n     */\n    var rateNote = function(ident) {\n        if (!ratingenabled) {\n            return;\n        }\n        if (isReadOnlyBoard) {\n            return;\n        }\n\n        var note = getNote(ident),\n            rating = note.find('.mod_board_rating');\n        if (rating.data('disabled')) {\n            return;\n        }\n        rating.data('disabled', true);\n\n        serviceCall('can_rate_note', {id: ident}, function(canrate) {\n            if (canrate) {\n                Notification.confirm(\n                    strings.rate_note_title,\n                    strings.rate_note_text, // Are you sure?\n                    strings.Ok,\n                    strings.Cancel,\n                    function() {\n                        serviceCall('rate_note', {id: ident}, function(result) {\n                            if (result.status) {\n                                lastHistoryId = result.historyid;\n                                rating.html(result.rating);\n                                if (sortby == SORTBY_RATING) {\n                                    sortNotes(note.closest('.board_column_content'));\n                                }\n                            }\n                            rating.data('disabled', false);\n                        });\n                    }\n                ).then(function(rateModal) {\n                    // Do this here, because it catches both cancel clicks, or someone clicking the X.\n                    rateModal.getRoot().on(ModalEvents.hidden, function() {\n                        rating.data('disabled', false);\n                    });\n                });\n            }\n        });\n    };\n\n    /**\n     * Update the attachment information of a note.\n     *\n     * @method attachmentTypeChanged\n     * @param {object} note\n     */\n    var attachmentTypeChanged = function(note) {\n        var noteAttachment = getNoteAttachmentsForNote(note),\n            type = noteAttachment.find('.mod_board_type').val(),\n            attachmentInfo = noteAttachment.find('.info'),\n            attachmentUrl = noteAttachment.find('.url'),\n            attachmentFile = noteAttachment.find('.mod_board_file');\n\n        if (type > \"0\") {\n            attachmentInfo.prop('placeholder', strings['option_' + attachmentTypeToString(type) + '_info']);\n            attachmentUrl.prop('placeholder', strings['option_' + attachmentTypeToString(type) + '_url']);\n\n            attachmentInfo.show();\n            if (type == ATTACHMENT_IMAGE && FileReader) {\n                attachmentFile.show();\n                attachmentUrl.hide();\n            } else {\n                attachmentFile.hide();\n                attachmentUrl.show();\n            }\n        } else {\n            attachmentInfo.hide();\n            attachmentUrl.hide();\n            attachmentFile.hide();\n\n            attachmentInfo.val('');\n            attachmentUrl.val('');\n\n        }\n    };\n\n    /**\n     * Set the attachment of a note.\n     *\n     * @method setAttachment\n     * @param {object} note\n     * @param {object} attachment\n     */\n    var setAttachment = function(note, attachment) {\n        var noteAttachment = getNoteAttachmentsForNote(note);\n        if (noteAttachment) {\n            if (!attachment) {\n                attachment = {type: \"0\"};\n            } else {\n                attachment.type += \"\";// Just in case\n            }\n            var attType = noteAttachment.find('.mod_board_type');\n            attType.val(attachment.type ? attachment.type : \"0\");\n            if (attType.val() > \"0\") {\n                noteAttachment.find('.info').val(decodeText(attachment.info));\n                noteAttachment.find('.url').val(decodeText(attachment.url));\n            }\n            attachmentTypeChanged(note, attachment);\n        }\n        previewAttachment(note, attachment);\n    };\n\n    /**\n     * Returns an object with various information about a note's attachment.\n     *\n     * @method attachmentDataForNote\n     * @param {object} note\n     * @returns {{filename: null, filecontents: null, type: number, url: null, info: null}}\n     */\n    var attachmentDataForNote = function(note) {\n        var attachment = {type: 0, info: null, url: null, filename: null, filecontents: null},\n            noteAttachment = getNoteAttachmentsForNote(note);\n        if (noteAttachment.length) {\n            attachment.type = noteAttachment.find('.mod_board_type').val();\n            attachment.info = encodeText(noteAttachment.find('.info').val());\n            attachment.url = encodeText(noteAttachment.find('.url').val());\n            var fileElem = noteAttachment.find('.mod_board_file>input');\n            if (fileElem.data('filename')) {\n                attachment.filename = fileElem.data('filename');\n                attachment.filecontents = fileElem.data('filecontents');\n            }\n        }\n        if ((!attachment.info || !attachment.info.length) && (!attachment.url || !attachment.url.length) &&\n            (!attachment.filename)) {\n            attachment.type = 0;\n        }\n\n        return attachment;\n    };\n\n    /**\n     * Get the string type of a attachment type number.\n     *\n     * @method attachmentTypeToString\n     * @param {number} type\n     * @returns {string|null}\n     */\n    var attachmentTypeToString = function(type) {\n        switch (type) {\n            case \"1\": return 'youtube';\n            case \"2\": return 'image';\n            case \"3\": return 'link';\n            default: return null;\n        }\n    };\n\n    /**\n     * This parses a youtube video ID from a URL. We can use this ID to\n     * construct the embed URL.\n     * @param {string} url The URL entered to the modal.\n     * @returns {string | null} The youtube embed URL or null.\n     */\n    const getEmbedUrl = (url) => {\n        // Thanks for the regex from: https://gist.github.com/rodrigoborgesdeoliveira/987683cfbfcc8d800192da1e73adc486.\n        let regex = /(\\/|%3D|v=)([0-9A-z-_]{11})([%#?&]|$)/;\n        let videoID = url.match(regex);\n        if (!videoID || videoID[2] === undefined || videoID[2].length !== 11) {\n            return null;\n        }\n        return `https://www.youtube-nocookie.com/embed/${videoID[2]}`;\n    };\n\n    /**\n     * Display the attachment preview for a note.\n     *\n     * @method previewAttachment\n     * @param {object} note\n     * @param {object} attachment\n     */\n    var previewAttachment = function(note, attachment) {\n        var elem = note.find('.mod_board_preview');\n        if (!attachment) {\n            attachment = attachmentDataForNote(note);\n        }\n\n        if (!getNoteTextForNote(note).html().length) {\n            elem.addClass('mod_board_notext');\n        } else {\n            elem.removeClass('mod_board_notext');\n        }\n\n        elem.removeClass('wrapper_youtube');\n        elem.removeClass('wrapper_image');\n        elem.removeClass('wrapper_url');\n        if (attachment.filename && parseInt(attachment.type) == ATTACHMENT_IMAGE) { // Before uploading\n            elem.html(`<img src=\"${attachment.filecontents}\" alt=\"${attachment.info}\"\n                class=\"mod_board_preview_element\"/>`);\n            elem.addClass('wrapper_image');\n            elem.show();\n        } else if (attachment.url) {\n            const blanktarget = enableblanktarget ? ' target=\"_blank\"' : '';\n            switch (parseInt(attachment.type)) {\n                case ATTACHMENT_VIDEO: { // Youtube\n                    let url = getEmbedUrl(attachment.url);\n                    if (url === null) {\n                        elem.html(strings.invalid_youtube_url);\n                    } else {\n                        elem.html('<iframe src=\"' + url +\n                            '\" class=\"mod_board_preview_element\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write;' +\n                            'encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe><a href=\"#\" ' +\n                            'class=\"stretched-link\" aria-hidden=\"true\"></a>');\n                        elem.addClass('wrapper_youtube').addClass('position-relative');\n                    }\n                    elem.show();\n                }\n                break;\n                case ATTACHMENT_IMAGE: // Image\n                    elem.html(`<img src=\"${attachment.url}\" alt=\"${attachment.info}\"\n                        class=\"mod_board_preview_element\"/>`);\n                    elem.addClass('wrapper_image');\n                    elem.show();\n                break;\n                case ATTACHMENT_LINK: // Url\n                    elem.html('<a href=\"' + attachment.url + '\" class=\"mod_board_preview_element\"' + blanktarget + '>' +\n                             (attachment.info || attachment.url) + '</a>');\n                    elem.addClass('wrapper_url');\n                    elem.show();\n                break;\n                default:\n                    elem.html('');\n                    elem.hide();\n            }\n        } else {\n            elem.html('');\n            elem.hide();\n        }\n    };\n\n    /**\n     * Add a new note with the given information.\n     *\n     * @method addNote\n     * @param {number} columnid\n     * @param {number} ident\n     * @param {string} heading\n     * @param {string} content\n     * @param {object} attachment\n     * @param {object} owner\n     * @param {number} sortorder\n     * @param {string} rating\n     */\n    var addNote = function(columnid, ident, heading, content, attachment, owner, sortorder, rating) {\n        var ismynote = owner.id == userId || !ident;\n        var iseditable = isEditor || (ismynote && !isReadOnlyBoard);\n\n        if (!ident) {\n            var pendingNote = getNote(0);\n            if (pendingNote) {\n                pendingNote.remove();\n            }\n        }\n\n        // Making space for this note if necessary in the sort order.\n        if (sortby == SORTBY_NONE) {\n            let children = $(`.board_column[data-ident='${columnid}'] .board_column_content`).children();\n            let elements = children.filter((_, element) => {\n                return parseInt($(element).data('sortorder')) >= parseInt(sortorder);\n            });\n            elements.each((_, element) => {\n                let so = $(element).data('sortorder');\n                $(element).data('sortorder', so + 1);\n            });\n        }\n\n        var note = $('<div class=\"board_note\" data-column=\"' + columnid + '\" data-ident=\"' + ident +\n            '\" data-sortorder=\"' + sortorder + '\"></div>');\n        if (ismynote) {\n            note.addClass('mod_board_mynote');\n        }\n        if (iseditable) {\n            note.addClass('mod_board_editablenote');\n        }\n        if (!ismynote && !iseditable) {\n            note.addClass('mod_board_nosort');\n        }\n\n        var notecontent = $('<div class=\"mod_board_note_content\"></div>'),\n            notecontrols = $('<div class=\"mod_board_note_controls\"></div>'),\n            noteHeading = $('<div class=\"mod_board_note_heading\" tabindex=\"0\">' + (heading ? heading : '') + '</div>'),\n            noteBorder = $('<div class=\"mod_board_note_border\"></div>'),\n            noteText = $('<div class=\"mod_board_note_text\" tabindex=\"0\">' + (content ? content : '') + '</div>'),\n            noteAriaText = $('<div class=\"note_ariatext hidden\" role=\"heading\" aria-level=\"4\" tabindex=\"0\"></div>'),\n            attachmentPreview = $('<div class=\"mod_board_preview\"></div>');\n\n        notecontent.append(noteHeading);\n        notecontent.append(noteBorder);\n        notecontent.append(noteText);\n        notecontent.append(noteAriaText);\n\n        notecontent.append(attachmentPreview);\n        note.append(notecontent);\n\n        var columnContent = $('.board_column[data-ident=' + columnid + '] .board_column_content');\n\n        var beginEdit = () => {\n            startNoteEdit(ident);\n        };\n\n        if (ident) {\n            if (ratingenabled) {\n                note.addClass('mod_board_rateablenote');\n                var rateElement = $(`<div class=\"fa fa-star mod_board_rating\" role=\"button\" tabindex=\"0\"> ${rating} </div>`);\n\n                handleAction(rateElement, () => {\n                    rateNote(ident);\n                });\n                notecontrols.append(rateElement);\n            }\n\n            if (iseditable) {\n                var removeElement = $('<div class=\"fa fa-remove delete_note\" role=\"button\" tabindex=\"0\"></div>');\n                handleAction(removeElement, () => {\n                    deleteNote(ident);\n                });\n\n                notecontrols.append(removeElement);\n\n                if (usersCanEdit == 1 || isEditor) {\n                    var moveElement = $('<div class=\"mod_board_move fa fa-arrows move_note\" role=\"button\" tabindex=\"0\"></div>');\n                    notecontrols.append(moveElement);\n                    moveNotesDialog.init(ownerId, moveNote);\n                }\n\n                var editElement = $('<div class=\"mod_board_move fa fa-pencil edit_note\" role=\"button\" tabindex=\"0\"></div>');\n                notecontrols.append(editElement);\n                handleAction(editElement, () => {\n                    beginEdit();\n                });\n                updateSortable();\n                setAttachment(note, attachment);\n            } else {\n                previewAttachment(note, attachment);\n            }\n\n            note.append(notecontrols);\n\n            handleAction(notecontent, () => fullScreenNote(ident, notecontent));\n\n            if (!noteHeading.html()) {\n                noteHeading.hide();\n                noteBorder.hide();\n            }\n            if (!noteText.html() && noteHeading.html()) {\n                noteText.hide();\n                noteBorder.hide();\n            }\n\n            var lastOne = columnContent.find(\".board_note\").last();\n\n            if (lastOne.length) {\n                note.insertAfter(lastOne);\n            } else {\n                columnContent.prepend(note);\n            }\n        } else {\n            $('.board_column[data-ident=' + columnid + '] .board_column_newcontent').append(note);\n            // This is effectively a note placeholder. So we don't need to show it.\n            note.hide();\n            beginEdit();\n        }\n    };\n\n    /**\n     * Add a new column.\n     *\n     * @method addColumn\n     * @param {object} ident\n     * @param {string} name\n     * @param {bool} locked\n     * @param {array} notes\n     * @param {string} colour\n     */\n    var addColumn = function(ident, name, locked, notes, colour) {\n        let headerStyle = `style=\"border-top: 10px solid #${colour}\"`;\n        var iseditable = isEditor,\n            nameCache = null,\n            column = $(`<div class=\"board_column board_column_hasdata\" data-locked=\"${locked}\"\\\n                 ${headerStyle} data-ident=\"${ident}\"></div>`),\n            columnHeader = $('<div class=\"board_column_header\"></div>'),\n            columnSort = $('<div class=\"mod_board_column_sort fa\"></div>'),\n            columnName = $('<div class=\"mod_board_column_name\" tabindex=\"0\" aria-level=\"3\" role=\"heading\">' + name + '</div>'),\n            columnContent = $('<div class=\"board_column_content\"></div>'),\n            columnNewContent = $('<div class=\"board_column_newcontent\"></div>');\n        // Only add the sort button if it makes sense.\n        if (sortby != SORTBY_NONE) {\n            columnHeader.append(columnSort);\n        }\n        columnHeader.append(columnName);\n\n        if (options.hideheaders) {\n            columnName.addClass('d-none');\n        }\n\n        columnSort.on('click', function() {\n            sortNotes(columnContent, true);\n        });\n\n        if (iseditable) {\n            column.addClass('mod_board_editablecolumn');\n            const lockIcon = locked ? 'fa-lock' : 'fa-unlock';\n            const lockElement = $(`<div class=\"icon fa ${lockIcon} lock_column\" role=\"button\" tabindex=\"0\"></div>`);\n\n            handleAction(lockElement, () => {\n                const lockColumn = column.attr('data-locked') !== 'true';\n                serviceCall('lock_column', {id: ident, status: lockColumn}, function(result) {\n                    if (result.status) {\n                        if (lockColumn) {\n                            lockElement.removeClass('fa-unlock').addClass('fa-lock');\n                            column.attr('data-locked', 'true');\n                            column.find('.board_button.newnote').addClass('d-none');\n                        } else {\n                            lockElement.removeClass('fa-lock').addClass('fa-unlock');\n                            column.attr('data-locked', 'false');\n                            column.find('.board_button.newnote').removeClass('d-none');\n\n                        }\n                        lastHistoryId = result.historyid;\n                        updateSortable();\n                    }\n                });\n            });\n            columnHeader.append(lockElement);\n\n            columnHeader.addClass('icon-size-3');\n            const moveElement = $('<div class=\"icon fa fa-arrows mod_column_move\" role=\"button\" tabindex=\"0\"></div>');\n            columnHeader.append(moveElement);\n            moveColumnsDialog.init(moveColumn);\n            var removeElement = $('<div class=\"icon fa fa-remove delete_column\" role=\"button\" tabindex=\"0\"></div>');\n            handleAction(removeElement, () => {\n                Notification.confirm(\n                    strings.remove_column_title, // Are you sure?\n                    getString('remove_column_text', 'mod_board', getColumnName(ident)),\n                    strings.delete,\n                    strings.Cancel,\n                    function() {\n                        serviceCall('delete_column', {id: ident}, function(result) {\n                            if (result.status) {\n                                column.remove();\n                                lastHistoryId = result.historyid;\n                            }\n                        });\n                    }\n                );\n            });\n\n            columnHeader.append(removeElement);\n        }\n\n        column.append(columnHeader);\n        column.append(columnContent);\n        column.append(columnNewContent);\n\n        if (iseditable) {\n            handleEditableAction(columnName, function() {\n                nameCache = columnName.html();\n            }, true);\n\n            columnName.editable({\n                toggleFontSize: false,\n                closeOnEnter: true,\n                callback: function(data) {\n                    if (data.content) {\n                        serviceCall('update_column', {id: ident, name: columnName.html()}, function(result) {\n                            if (!result.status) {\n                                columnName.html(nameCache);\n                                nameCache = null;\n                            } else {\n                                lastHistoryId = result.historyid;\n                                updateColumnAria(ident);\n                            }\n                        }, function() {\n                            columnName.html(nameCache);\n                            nameCache = null;\n                        });\n                    } else {\n                        columnName.html(nameCache);\n                        nameCache = null;\n                    }\n                }\n            });\n        }\n\n        if (!isReadOnlyBoard) {\n            const newNoteButton = $('<div class=\"board_button newnote\" role=\"button\" tabindex=\"0\">' +\n            '<div class=\"button_content\"><span class=\"fa ' + options.noteicon + '\"></span></div></div>');\n            columnNewContent.append(newNoteButton);\n            if (column.attr('data-locked') === 'true') {\n                newNoteButton.addClass('d-none');\n            }\n            handleAction(columnNewContent.find('.newnote'), function() {\n                addNote(ident, 0, null, null, null, {id: userId}, 0, 0);\n            });\n        }\n\n        var lastOne = $(\".mod_board .board_column_hasdata\").last();\n        if (lastOne.length) {\n            column.insertAfter(lastOne);\n        } else {\n            $(\".mod_board\").append(column);\n        }\n\n        if (notes) {\n            for (var index in notes) {\n                let sortorder = sortby == 3 ? notes[index].sortorder : notes[index].timecreated;\n                addNote(ident, notes[index].id, notes[index].heading, notes[index].content,\n                    {type: notes[index].type, info: notes[index].info, url: notes[index].url},\n                    {id: notes[index].userid}, sortorder, notes[index].rating);\n            }\n        }\n        sortNotes(columnContent);\n        updateColumnAria(ident);\n        if (isEditor || usersCanEdit == 1) {\n            updateSortable();\n        }\n        if (isEditor) {\n            columnSorting();\n        }\n    };\n\n    /**\n     * Gets the text name used in the heading of a column.\n     * @param {number} id The ID data attribute on the column element.\n     * @returns {string}\n     */\n    const getColumnName = (id) => {\n        return $(`.board_column[data-ident='${id}']`).find('.mod_board_column_name').html();\n    };\n\n    /**\n     * Add the new column button.\n     *\n     * @method addNewColumnButton\n     */\n    var addNewColumnButton = function() {\n        var column = $('<div class=\"board_column_empty\"></div>'),\n            newBusy = false;\n        column.append('<div class=\"board_button newcolumn\" role=\"button\" tabindex=\"0\" aria-label=\"' +\n            strings.aria_newcolumn + '\" title=\"' + strings.aria_newcolumn + '\"><div class=\"button_content\"><span class=\"fa '\n            + options.columnicon + '\"></span></div></div>');\n\n        handleAction(column.find('.newcolumn'), function() {\n            if (newBusy) {\n                return;\n            }\n            newBusy = true;\n\n            serviceCall('add_column', {boardid: board.id, name: strings.default_column_heading}, function(result) {\n                addColumn(result.id, strings.default_column_heading, false, {}, selectHeadingColour());\n                lastHistoryId = result.historyid;\n                newBusy = false;\n            }, function() {\n                newBusy = false;\n            });\n        });\n\n        $(\".mod_board\").append(column);\n    };\n\n    /**\n     * This selects the next heading colour from options based on the count of the\n     * current columns. Length of decremented by one as the new column button is\n     * also denoted as a column.\n     * @returns {string} colour hex string.\n     */\n    const selectHeadingColour = () => {\n        let colCount = $('.board_column').length - 1;\n        let colourCount = options.colours.length;\n        return options.colours[colCount % colourCount];\n    };\n\n    /**\n     * Update a note with the provided information.\n     *\n     * @method updateNote\n     * @param {object} note\n     * @param {string} heading\n     * @param {object} data\n     */\n    var updateNote = function(note, heading, data) {\n        var noteHeading = getNoteHeadingForNote(note);\n        var noteText = getNoteTextForNote(note);\n        var noteBorder = getNoteBorderForNote(note);\n\n        noteText.html(data.content);\n        noteHeading.html(data.heading);\n        setAttachment(note, data.attachment);\n        updateNoteAria(data.id);\n\n        // Reset the visibility state.\n        noteHeading.show();\n        noteBorder.show();\n        noteText.show();\n        if (!noteHeading.html()) {\n            noteHeading.hide();\n            noteBorder.hide();\n        }\n        if (!noteText.html() && noteHeading.html()) {\n            noteText.hide();\n            noteBorder.hide();\n        }\n    };\n\n    /**\n     * Fetch and process the recent board history.\n     *\n     * @method processBoardHistory\n     */\n    var processBoardHistory = function() {\n        serviceCall('board_history', {id: board.id, ownerid: ownerId, since: lastHistoryId}, function(boardhistory) {\n            for (var index in boardhistory) {\n                var item = boardhistory[index];\n                if (item.boardid != board.id) {\n                    continue; // Hmm\n                }\n\n                var data = JSON.parse(item.content);\n                if (item.action == 'add_note') {\n                    let sortorder = sortby == 3 ? data.sortorder : data.timecreated;\n                    addNote(data.columnid, data.id, data.heading, data.content, data.attachment,\n                        {id: item.userid}, sortorder, data.rating);\n                    updateNoteAria(data.id);\n                    sortNotes($('.board_column[data-ident=' + data.columnid + '] .board_column_content'));\n                } else if (item.action == 'update_note') {\n                    let note = getNote(data.id),\n                        formModal = editModal,\n                        historyData = data;\n                    if (note) {\n                        let noteHeading = getNoteHeadingForNote(note);\n\n                        if (editingNote == data.id) {\n                            Notification.confirm(\n                                strings.note_changed_title, // Confirm.\n                                strings.note_changed_text, // Are you sure?\n                                strings.Ok,\n                                strings.Cancel,\n                                function() {\n                                    formModal.hide();\n                                    updateNote(note, noteHeading, historyData);\n                                    stopNoteEdit();\n                                }\n                            );\n                        } else {\n                            updateNote(note, noteHeading, data);\n                        }\n                    }\n                } else if (item.action == 'delete_note') {\n                    if (editingNote == data.id) {\n                        Notification.alert(strings.warning, strings.note_deleted_text);\n                        stopNoteEdit();\n                    }\n                    let note = getNote(data.id);\n                    if (sortby == SORTBY_NONE) {\n                        let columnID = note.data('column');\n                        let sortorder = note.data('sortorder');\n                        sortAfterDelete(columnID, sortorder);\n                    }\n                    note.remove();\n\n                } else if (item.action == 'add_column') {\n                    addColumn(data.id, data.name, false, {}, selectHeadingColour());\n                } else if (item.action == 'move_column') {\n                    const board = $('.mod_board');\n                    data.sortorder.forEach(column => {\n                        const columnElement = board.find(`.board_column[data-ident='${column}']`);\n                        columnElement.detach().appendTo(board);\n                    });\n                } else if (item.action == 'update_column') {\n                    $(\".board_column[data-ident='\" + data.id + \"'] .mod_board_column_name\").html(data.name);\n                    updateColumnAria(data.id);\n                } else if (item.action == 'lock_column') {\n                    $(\".board_column[data-ident='\" + data.id + \"']\").attr(\"data-locked\", data.locked);\n                    if (data.locked) {\n                        $(\".board_column[data-ident='\" + data.id + \"']\").find('.board_button.newnote').addClass('d-none');\n                    } else {\n                        $(\".board_column[data-ident='\" + data.id + \"']\").find('.board_button.newnote').removeClass('d-none');\n                    }\n                    updateSortable();\n                } else if (item.action == 'delete_column') {\n                    var column = $(\".board_column[data-ident='\" + data.id + \"']\");\n                    if (editingNote && column.find('.board_note[data-ident=\"' + editingNote + '\"]').length) {\n                        stopNoteEdit();\n                    }\n                    column.remove();\n                } else if (item.action == 'rate_note') {\n                    var note = getNote(data.id);\n                    note.find('.mod_board_rating').html(data.rating);\n                    if (sortby == SORTBY_RATING) {\n                        sortNotes(note.closest('.board_column_content'));\n                    }\n                }\n                lastHistoryId = item.id;\n            }\n\n            updateBoard();\n        });\n    };\n\n    /**\n     * Trigger a board update.\n     *\n     * @method updateBoard\n     * @param {boolean} instant\n     */\n    var updateBoard = function(instant) {\n        if (instant) {\n            processBoardHistory();\n        } else if (options.history_refresh > 0) {\n            if (reloadTimer) {\n                stopUpdating();\n            }\n            reloadTimer = setTimeout(processBoardHistory, options.history_refresh * 1000);\n        }\n    };\n\n    /**\n     * Stop/prevent the board reload timer from firing.\n     *\n     * @method stopUpdating\n     */\n    var stopUpdating = function() {\n        clearTimeout(reloadTimer);\n        reloadTimer = null;\n    };\n\n    /**\n     * Sort a set of notes.\n     *\n     * @sortNotes\n     * @param {string} content\n     * @param {boolean} toggle\n     */\n    var sortNotes = function(content, toggle) {\n        var sortCol = $(content).parent().find('.mod_board_column_sort'),\n            direction = $(content).data('sort');\n        if (!direction) {\n            if (sortby == SORTBY_RATING) {\n                direction = 'desc';\n            } else {\n                direction = 'asc';\n            }\n        }\n        if (toggle) {\n            direction = direction == 'asc' ? 'desc' : 'asc';\n        }\n\n        if (direction == 'asc') {\n            sortCol.removeClass('fa-angle-down');\n            sortCol.addClass('fa-angle-up');\n        } else {\n            sortCol.removeClass('fa-angle-up');\n            sortCol.addClass('fa-angle-down');\n        }\n        $(content).data('sort', direction);\n\n        var desc,\n            asc;\n        if (sortby == SORTBY_DATE) {\n            desc = function(a, b) {\n                return $(b).data(\"sortorder\") - $(a).data(\"sortorder\");\n            };\n            asc = function(a, b) {\n                return $(a).data(\"sortorder\") - $(b).data(\"sortorder\");\n            };\n        } else if (sortby == SORTBY_RATING) {\n            desc = function(a, b) {\n                return $(b).find('.mod_board_rating').text() - $(a).find('.mod_board_rating').text() ||\n                $(b).data(\"sortorder\") - $(a).data(\"sortorder\");\n            };\n            asc = function(a, b) {\n                return $(a).find('.mod_board_rating').text() - $(b).find('.mod_board_rating').text() ||\n                $(a).data(\"sortorder\") - $(b).data(\"sortorder\");\n            };\n        } else if (sortby == SORTBY_NONE) {\n            let sortElements = (a, b) => {\n                return $(a).data(\"sortorder\") - $(b).data(\"sortorder\");\n            };\n            $('> .board_note', $(content)).sort(sortElements).appendTo($(content));\n            return;\n        }\n\n        $('> .board_note', $(content)).sort(direction === 'asc' ? asc : desc).appendTo($(content));\n\n    };\n\n    /**\n     * Update sorting of sortable content.\n     *\n     * @method updateSortable\n     */\n    var updateSortable = function() {\n        let fromColumnID;\n        $(\".board_column[data-locked='false'] .board_column_content\").sortable({\n            connectWith: \".board_column[data-locked='false'] .board_column_content\",\n            cancel: \".mod_board_nosort\",\n            handle: \".move_note\",\n            start: function(_, ui) {\n                fromColumnID = $(ui.item).closest('.board_column').data('ident');\n            },\n            stop: function(_, ui) {\n                var note = $(ui.item),\n                    tocolumn = note.closest('.board_column'),\n                    elem = $(this),\n                    noteid = note.data('ident'),\n                    columnid = tocolumn.data('ident');\n                let columnElements = tocolumn.find('.board_column_content').children();\n                let sortorder = columnElements.index($(`.board_note[data-ident=${noteid}]`));\n                let payload = {\n                    id: noteid,\n                    columnid: columnid,\n                    ownerid: ownerId,\n                    sortorder: sortorder\n                };\n                moveNote(fromColumnID, payload, elem);\n            }\n        });\n    };\n\n    /**\n     * Move a note to a new position / column.\n     *\n     * @param {Int} fromColumnID The column the note is being moved from.\n     * @param {Object} payload The payload to send to the server.\n     * @param {Domnode} elem The element clicked to trigger the move.\n     */\n    const moveNote = (fromColumnID, payload, elem) => {\n        updateSortOrders(fromColumnID, payload.columnid, payload.id, payload.sortorder);\n\n        serviceCall('move_note', payload, (result) => {\n            if (result.status) {\n                lastHistoryId = result.historyid;\n                updateNoteAria(payload.id);\n                updateBoard();\n                sortNotes($(`.board_column[data-ident=${payload.columnid}] .board_column_content`));\n            } else {\n                if (elem) {\n                    elem.sortable('cancel');\n                }\n            }\n        });\n    };\n\n    /**\n     * Enable column sorting\n     */\n    const columnSorting = () => {\n        let movingColumnId;\n        $(\".mod_board\").sortable({\n            connectWith: \".mod_board\",\n            axis: \"x\",\n            containment: \".mod_board_wrapper\",\n            cancel: \".mod_board_nosort\",\n            handle: \".mod_column_move\",\n            start: function(_, ui) {\n                movingColumnId = $(ui.item).closest('.board_column').data('ident');\n            },\n            stop: function(_, ui) {\n                let column = $(ui.item);\n                let columns = $(\".mod_board\").find('.board_column');\n                let sortorder = columns.index(column);\n                let payload = {\n                    id: movingColumnId,\n                    sortorder: sortorder\n                };\n                moveColumn(payload);\n            }\n        });\n    };\n\n    /**\n     * Move a column to a new position.\n     *\n     * @param {Object} payload The payload to send to the server.\n     */\n    const moveColumn = (payload) => {\n        serviceCall('move_column', payload, false);\n    };\n\n    /**\n     * Updates the inline data attributes necessary for rendering the lists\n     * in the correct sort order. Note: the data attribute values updated by\n     * jQuery are not reflected in DOM inspection but are still set.\n     * @param {number} fromColumnID The column ID of the column to sort.\n     * @param {number} toColumnID The column ID of the column to sort.\n     * @param {number} noteID  The note ID that was moved.\n     * @param {number} newSortOrder The new position of the note sort order.\n     */\n    const updateSortOrders = (fromColumnID, toColumnID, noteID, newSortOrder) => {\n        let toColumn = $(`.board_column[data-ident=${toColumnID}] .board_column_content`);\n        let movedNote = $(`.board_note[data-ident=${noteID}]`);\n        let oldSortOrder = movedNote.data('sortorder');\n        // Check whether it is the same column and then increment or decrement notes above or below\n        // then set sortorder according to whether the sortorder has moved up or down.\n        let toChildren = toColumn.children();\n        if (fromColumnID == toColumnID) {\n            toChildren.each((_, note) => {\n                let sortOrder = $(note).data('sortorder');\n                if (oldSortOrder < newSortOrder) {\n                    if (sortOrder <= newSortOrder && sortOrder >= oldSortOrder) {\n                        $(note).data('sortorder', sortOrder - 1);\n                    }\n                } else if (oldSortOrder > newSortOrder) {\n                    if (sortOrder >= newSortOrder && sortOrder <= oldSortOrder) {\n                        $(note).data('sortorder', sortOrder + 1);\n                    }\n                }\n            });\n        } else {\n            let fromColumn = $(`.board_column[data-ident=${fromColumnID}] .board_column_content`);\n            let fromChildren = fromColumn.children();\n            toChildren.each((_, note) => {\n                let sortOrder = $(note).data('sortorder');\n                if (sortOrder >= newSortOrder) {\n                    $(note).data('sortorder', sortOrder + 1);\n                }\n            });\n            fromChildren.each((_, note) => {\n                let sortOrder = $(note).data('sortorder');\n                if (sortOrder > oldSortOrder) {\n                    $(note).data('sortorder', sortOrder - 1);\n                }\n            });\n        }\n        movedNote.data('sortorder', newSortOrder);\n    };\n\n    /**\n     * Get the body fragment for the modal form.\n     *\n     * @param {number} noteid\n     * @param {number} columnid\n     * @param {number} ownerId\n     * @returns {Deferred|*}\n     */\n    var getBody = function(noteid, columnid, ownerId) {\n        // Get the content of the modal.\n        var params = {noteid: noteid, columnid: columnid, ownerid: ownerId};\n        return Fragment.loadFragment('mod_board', 'note_form', contextid, params);\n    };\n\n    /**\n     * Setup the aria labels for the modal.\n     *\n     * @param {object} note\n     * @param {object} modal\n     */\n    var updateModalAria = function(note, modal) {\n        let columnIdentifier = note.closest('.board_column').find('.mod_board_column_name').text(),\n            addYoutube,\n            addImage,\n            addLink,\n            postButton,\n            cancelButton,\n            modalRoot = modal.getRoot();\n\n        if (note.data('ident')) {\n            // Is a note update.\n            var noteIdentifier = textIdentifierForNote(note);\n\n            postButton = strings.aria_postedit.replace('{column}', columnIdentifier).replace('{post}', noteIdentifier);\n            cancelButton = strings.aria_canceledit.replace('{column}', columnIdentifier).replace('{post}', noteIdentifier);\n            addYoutube = strings.aria_addmedia.replace('{type}', strings.option_youtube).replace('{column}',\n                columnIdentifier).replace('{post}', noteIdentifier);\n            addImage = strings.aria_addmedia.replace('{type}', strings.option_image).replace('{column}',\n                columnIdentifier).replace('{post}', noteIdentifier);\n            addLink = strings.aria_addmedia.replace('{type}', strings.option_link).replace('{column}',\n                columnIdentifier).replace('{post}', noteIdentifier);\n        } else {\n            // Note is new.\n            postButton = strings.aria_postnew.replace('{column}', columnIdentifier);\n            cancelButton = strings.aria_cancelnew.replace('{column}', columnIdentifier);\n            addYoutube = strings.aria_addmedianew.replace('{type}', strings.option_youtube).replace('{column}',\n                columnIdentifier);\n            addImage = strings.aria_addmedianew.replace('{type}', strings.option_image).replace('{column}', columnIdentifier);\n            addLink = strings.aria_addmedianew.replace('{type}', strings.option_link).replace('{column}', columnIdentifier);\n        }\n\n        if (mediaSelection == MEDIA_SELECTION_BUTTONS) {\n            modalRoot.find('.mod_board_attachment_button.youtube_button').attr('aria-label', addYoutube);\n            modalRoot.find('.mod_board_attachment_button.youtube_button').attr('title', addYoutube);\n            modalRoot.find('.mod_board_attachment_button.image_button').attr('aria-label', addImage);\n            modalRoot.find('.mod_board_attachment_button.image_button').attr('title', addImage);\n            modalRoot.find('.mod_board_attachment_button.link_button').attr('aria-label', addLink);\n            modalRoot.find('.mod_board_attachment_button.link_button').attr('title', addLink);\n        }\n\n        let button = modalRoot.find(modal.getActionSelector('save'));\n        if (button) {\n            button.attr('aria-label', postButton);\n        }\n        button = modalRoot.find(modal.getActionSelector('cancel'));\n        if (button) {\n            button.attr('aria-label', cancelButton);\n        }\n    };\n\n    /**\n     * Displays the modal form to edit a note.\n     *\n     * @param {object} note\n     */\n    var showModalForm = function(note) {\n        let noteId = 0,\n            columnId = note.data('column'),\n            column = $('.board_column[data-ident=' + columnId + ']'),\n            columnIdentifier = column.find('.mod_board_column_name').text(),\n            title;\n\n        if (note.data('ident')) {\n            noteId = note.data('ident');\n            title = strings.modal_title_edit.replace('{column}', columnIdentifier);\n        } else {\n            title = strings.modal_title_new.replace('{column}', columnIdentifier);\n        }\n\n        ModalFactory.create({\n            type: ModalFactory.types.SAVE_CANCEL,\n            title: title,\n            body: getBody(noteId, columnId, ownerId),\n            large: true,\n            removeOnClose: true\n        }).then(function(modal) {\n            // Use the body promise so we know body content is loaded.\n            modal.getBodyPromise().then(function () {\n                let saveInProgress = false;\n                editModal = modal;\n                modal.setLarge();\n                modal.setSaveButtonText(strings.post_button_text);\n                modal.setButtonText('cancel', strings.cancel_button_text);\n\n                modal.getRoot().on(ModalEvents.hidden, function () {\n                    stopNoteEdit();\n                    if (!note.data('ident')) {\n                        note.remove();\n                    }\n                });\n\n                modal.getRoot().on(ModalEvents.save, function (e) {\n                    e.preventDefault();\n                    modal.getRoot().find('form').submit();\n                });\n\n                var changeEvent = document.createEvent('HTMLEvents');\n                changeEvent.initEvent('change', true, true);\n\n                modal.getRoot().on('submit', 'form', function (e) {\n                    e.preventDefault();\n\n                    // Prevent multiple form submissions from being sent.\n                    if (saveInProgress) {\n                        return;\n                    }\n                    saveInProgress = true;\n\n                    // First, make sure the native html5 validity checks are run.\n                    let valid = modal.getRoot().find('form').get(0).reportValidity();\n                    if (!valid) {\n                        saveInProgress = false;\n                        return;\n                    }\n\n                    // Prompt all inputs to run their validation functions.\n                    // Normally this would happen when the form is submitted, but\n                    // since we aren't submitting the form normally we need to run client side\n                    // validation.\n                    modal.getRoot().find(':input').each(function (index, element) {\n                        element.dispatchEvent(changeEvent);\n                    });\n\n                    // Now the change events have run, see if there are any \"invalid\" form fields.\n                    var invalid = $.merge(\n                        modal.getRoot().find('[aria-invalid=\"true\"]'),\n                        modal.getRoot().find('.error'),\n                        modal.getRoot().find(':invalid')\n                    );\n\n                    // If we found invalid fields, focus on the first one and do not submit via ajax.\n                    if (invalid.length) {\n                        invalid.first().focus();\n                        saveInProgress = false;\n                        return;\n                    }\n\n                    var formData = JSON.stringify(modal.getRoot().find('form').serialize());\n                    serviceCall('submit_form', {contextid: contextid, jsonformdata: formData}, function (result) {\n                        if (result.status) {\n                            if (result.action == 'insert') {\n                                // Added a new note.\n                                lastHistoryId = result.historyid;\n                                note.remove();\n                                addNote(columnId, result.note.id, result.note.heading, result.note.content,\n                                    {type: result.note.type, info: result.note.info, url: result.note.url},\n                                    {id: result.note.userid}, result.note.timecreated, result.note.rating);\n                                sortNotes($('.board_column[data-ident=' + columnId + '] .board_column_content'));\n                                updateNoteAria(result.note.id);\n                            } else {\n                                // Updated existing note.\n                                lastHistoryId = result.historyid;\n                                getNoteTextForNote(note).html(result.note.content);\n                                getNoteHeadingForNote(note).html(result.note.heading);\n                                updateNoteAria(result.note.id);\n                                setAttachment(note, {\n                                    type: result.note.type,\n                                    info: result.note.info, url: result.note.url\n                                });\n                            }\n                            stopNoteEdit();\n\n                            // Clear the form changed checker.\n                            Y.use('moodle-core-formchangechecker', function() {\n                                M.core_formchangechecker.reset_form_dirty_state();\n                            });\n\n                            modal.destroy();\n                        } else {\n                            // TODO show error.\n                        }\n                    });\n\n                });\n\n                if (mediaSelection == MEDIA_SELECTION_BUTTONS) {\n                    // First hide the select menu.\n                    modal.getRoot().find('#fitem_id_mediatype').hide();\n\n                    let mediaSelect = modal.getRoot().find('#fitem_id_mediatype select'),\n                        ytButton = modal.getRoot().find('.mod_board_attachment_button.youtube_button'),\n                        pictureButton = modal.getRoot().find('.mod_board_attachment_button.image_button'),\n                        linkButton = modal.getRoot().find('.mod_board_attachment_button.link_button'),\n                        updateMediaButtons = function() {\n                            ytButton.removeClass('selected');\n                            pictureButton.removeClass('selected');\n                            linkButton.removeClass('selected');\n                            switch (mediaSelect.val()) {\n                                case (\"1\"):\n                                    ytButton.addClass('selected');\n                                    break;\n                                case (\"2\"):\n                                    pictureButton.addClass('selected');\n                                    break;\n                                case (\"3\"):\n                                    linkButton.addClass('selected');\n                                    break;\n                            }\n                        };\n\n                    updateMediaButtons();\n                    handleAction(ytButton, function() {\n                        if (mediaSelect.val() === \"1\") {\n                            mediaSelect.val(0);\n                        } else {\n                            mediaSelect.val(1);\n                        }\n                        updateMediaButtons();\n                        mediaSelect[0].dispatchEvent(changeEvent);\n                    });\n                    handleAction(pictureButton, function() {\n                        if (mediaSelect.val() === \"2\") {\n                            mediaSelect.val(0);\n                        } else {\n                            mediaSelect.val(2);\n                        }\n                        updateMediaButtons();\n                        mediaSelect[0].dispatchEvent(changeEvent);\n                    });\n                    handleAction(linkButton, function() {\n                        if (mediaSelect.val() === \"3\") {\n                            mediaSelect.val(0);\n                        } else {\n                            mediaSelect.val(3);\n                        }\n                        updateMediaButtons();\n                        mediaSelect[0].dispatchEvent(changeEvent);\n                    });\n                } else {\n                    modal.getRoot().find('#fitem_id_mediabuttons').hide();\n                }\n\n                updateModalAria(note, modal);\n                modal.show();\n\n                return modal;\n            }).catch(Notification.exception);\n            return modal;\n        }).catch(Notification.exception);\n    };\n\n    /**\n     * Show the note in a modal\n     * @param {Int} ident The note id\n     * @param {Object} notecontent The note content\n     */\n    var fullScreenNote = (ident, notecontent) => {\n        const heading = getNoteHeadingForNote(notecontent).html();\n        const modalBody = $(document.createElement('div'));\n        modalBody.addClass('mod_board_note_content');\n        const text = getNoteTextForNote(notecontent);\n        if (text) {\n            modalBody.append(text.clone());\n        }\n        const preview = getNotePreviewForNote(notecontent);\n        if (preview) {\n            modalBody.append(preview.clone());\n        }\n\n        // Adds the comments to a note.\n        const commentArea = $(document.createElement('div'));\n        commentArea.attr('data-region', 'comment-area');\n        modalBody.append(commentArea);\n        Comments.fetchFor(ident, commentArea);\n\n        ModalFactory.create({\n            type: ModalFactory.types.CANCEL,\n            title: heading,\n            body: modalBody,\n        }).then(function(modal) {\n            modal.setLarge();\n            modal.show();\n            // Handle hidden event.\n            modal.getRoot().on(ModalEvents.hidden, function () {\n                // Destroy when hidden.\n                modal.destroy();\n            });\n            return modal;\n        }, this).catch(Notification.exception);\n    };\n\n    /**\n     * Initialize board.\n     *\n     * @method init\n     */\n    var init = function() {\n        serviceCall('get_board', {id: board.id, ownerid: ownerId}, function(columns) {\n            // Init\n            if (columns) {\n                for (var index in columns) {\n                    addColumn(\n                        columns[index].id,\n                        columns[index].name,\n                        columns[index].locked,\n                        columns[index].notes || {},\n                        options.colours[columns[index].id % options.colours.length]\n                    );\n                }\n            }\n\n            if (isEditor) {\n                addNewColumnButton();\n            }\n\n            lastHistoryId = board.historyid;\n\n            if (isEditor) {\n                updateSortable();\n                columnSorting();\n            }\n\n            updateBoard();\n        });\n    };\n\n    // Get strings\n    var stringsInfo = [];\n    for (var string in strings) {\n        stringsInfo.push({key: string, component: 'mod_board'});\n    }\n\n    $.when(getStrings(stringsInfo)).done(function(results) {\n        var index = 0;\n        for (string in strings) {\n            strings[string] = results[index++];\n        }\n\n        init();\n    });\n}\n"],"names":["board","options","contextid","strings","default_column_heading","post_button_text","cancel_button_text","remove_note_title","remove_note_text","remove_column_title","note_changed_title","note_changed_text","note_deleted_text","rate_note_title","rate_note_text","Ok","delete","Cancel","warning","modal_title_new","modal_title_edit","option_youtube","option_image","option_link","aria_newcolumn","aria_newpost","aria_deletecolumn","aria_movecolumn","aria_deletepost","aria_movepost","aria_editpost","aria_addmedia","aria_addmedianew","aria_deleteattachment","aria_lockcolumn","aria_postedit","aria_canceledit","aria_postnew","aria_cancelnew","aria_ratepost","invalid_file_extension","invalid_file_size_min","invalid_file_size_max","invalid_youtube_url","reloadTimer","lastHistoryId","isEditor","usersCanEdit","userId","parseInt","ownerId","mediaSelection","mediaselection","editingNote","isReadOnlyBoard","readonly","ratingenabled","sortby","editModal","enableblanktarget","serviceCall","method","args","callback","failcallback","stopUpdating","call","methodname","done","data","fail","error","exception","_serviceCall","apply","arguments","updateBoard","getNote","ident","getNoteTextForNote","note","find","getNoteHeadingForNote","getNoteBorderForNote","getNoteAttachmentsForNote","textIdentifierForNote","noteText","html","noteHeading","noteAttachment","attachmentDataForNote","length","replace","split","slice","join","info","updateNoteAria","noteId","columnIdentifier","closest","text","noteIdentifier","deleteNoteString","attr","moveNoteString","editNoteString","updateColumnAria","columnId","column","newNoteString","moveColumnString","deleteColumnString","lockColumnString","each","index","stopNoteEdit","noteBorder","show","hide","remove","sortAfterDelete","columnID","sortorder","getColumn","children","filter","_","element","so","setAttachment","attachment","type","attType","val","decodeText","url","attachmentInfo","attachmentUrl","attachmentFile","prop","attachmentTypeToString","FileReader","attachmentTypeChanged","previewAttachment","filename","filecontents","encodeText","fileElem","elem","removeClass","addClass","blanktarget","videoID","match","undefined","getEmbedUrl","addNote","columnid","heading","content","owner","rating","ismynote","id","iseditable","pendingNote","notecontent","notecontrols","noteAriaText","attachmentPreview","append","columnContent","beginEdit","showModalForm","startNoteEdit","rateElement","handleAction","canrate","confirm","result","status","historyid","sortNotes","then","rateModal","getRoot","on","ModalEvents","hidden","rateNote","removeElement","deleteNote","moveElement","init","moveNote","editElement","updateSortable","fullScreenNote","lastOne","last","insertAfter","prepend","addColumn","name","locked","notes","colour","headerStyle","nameCache","columnHeader","columnSort","columnName","columnNewContent","hideheaders","lockIcon","lockElement","lockColumn","moveColumn","getColumnName","callBeforeOnKeyEditing","is","Error","e","isAriaTriggerKey","keyCode","preventDefault","editable","handleEditableAction","toggleFontSize","closeOnEnter","newNoteButton","noteicon","timecreated","userid","columnSorting","selectHeadingColour","colCount","colourCount","colours","updateNote","processBoardHistory","ownerid","since","boardhistory","item","boardid","JSON","parse","action","formModal","historyData","alert","forEach","detach","appendTo","instant","history_refresh","setTimeout","clearTimeout","toggle","desc","asc","sortCol","parent","direction","a","b","sort","fromColumnID","sortable","connectWith","cancel","handle","start","ui","stop","tocolumn","this","noteid","payload","updateSortOrders","movingColumnId","axis","containment","toColumnID","noteID","newSortOrder","toColumn","movedNote","oldSortOrder","toChildren","sortOrder","fromChildren","getBody","params","Fragment","loadFragment","title","create","ModalFactory","types","SAVE_CANCEL","body","large","removeOnClose","modal","getBodyPromise","saveInProgress","setLarge","setSaveButtonText","setButtonText","save","submit","changeEvent","document","createEvent","initEvent","get","reportValidity","dispatchEvent","invalid","$","merge","first","focus","formData","stringify","serialize","jsonformdata","Y","use","M","core_formchangechecker","reset_form_dirty_state","destroy","mediaSelect","ytButton","pictureButton","linkButton","updateMediaButtons","addYoutube","addImage","addLink","postButton","cancelButton","modalRoot","button","getActionSelector","updateModalAria","catch","Notification","modalBody","createElement","clone","preview","commentArea","fetchFor","CANCEL","_this","columns","newBusy","columnicon","stringsInfo","string","push","key","component","when","results","rawText","encodedText"],"mappings":"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"}