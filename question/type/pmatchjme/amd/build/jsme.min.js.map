{"version":3,"file":"jsme.min.js","sources":["../src/jsme.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * JavaScript for handling the JSME.\n *\n * @module     qtype_pmatchjme\n * @class      jsme\n * @copyright  2018 The Open University\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n\"use strict\";\n\n/**\n * Start the load of the JSME code.\n */\nconst loadJsmeCode = () => {\n    // Alternatively, we need to add a script tag to the page.\n    // I think that if Moodle was using standard JS modules\n    // (instead of require_js, then we could just us import().\n    const scriptTag = document.createElement('script');\n    scriptTag.src = M.cfg.wwwroot + '/question/type/pmatchjme/jsme/jsme.nocache.js';\n    scriptTag.async = true;\n    document.body.append(scriptTag);\n};\n\n/**\n * Initialise a question by stating the JSME editor.\n *\n * @param {string} containerId Id of the div to put the JSME in.\n * @param {string} questionDivId Id of the outer question div.\n * @param {string} feedbackImageHtml HTML of the feedback icon to show, if any.\n * @param {boolean} readonly boolean, whether the display should be read-only.\n * @param {boolean} nostereo JSME option.\n * @param {boolean} autoez JSME option.\n */\nconst insertApplet = (containerId, questionDivId, feedbackImageHtml, readonly, nostereo, autoez) => {\n    const pendingToken = {};\n    M.util.js_pending(pendingToken);\n\n    const jmeoptions = [];\n    if (nostereo) {\n        jmeoptions.push(\"nostereo\");\n    }\n    if (autoez) {\n        jmeoptions.push(\"autoez\");\n    }\n    if (readonly) {\n        jmeoptions.push(\"depict\");\n    }\n\n    // Function to run once JSME library code has loaded.\n    const displayJsme = () => {\n        // Hide the loading message.\n        const containerElement = document.getElementById(containerId);\n        containerElement.innerHTML = '';\n        containerElement.classList.remove('qtype_pmatchjme-applet-warning');\n\n        // Instantiate a new JSME.\n        const jsmeApplet = new window.JSApplet.JSME(containerId, '368px', '312px', {\"options\": jmeoptions.join(',')});\n        jsmeApplet.name = containerId;\n\n        // If molecule data is supplied display it.\n        const questionDiv = document.getElementById(questionDivId);\n        const initalJmeContent = questionDiv.querySelector('input.jme').value;\n        if (initalJmeContent) {\n            jsmeApplet.readMolecule(initalJmeContent);\n        }\n\n        // Add event handler to save the values on form submit.\n        questionDiv.closest('form').addEventListener('submit', () => {\n            questionDiv.querySelector('input.answer').value = jsmeApplet.smiles();\n            questionDiv.querySelector('input.jme').value = jsmeApplet.jmeFile();\n            questionDiv.querySelector('input.mol').value = jsmeApplet.molFile();\n        });\n\n        M.util.js_complete(pendingToken);\n    };\n\n    if (window.hasOwnProperty('JSApplet')) {\n        // Already loaded, e.g. by another question on the same page.\n        displayJsme();\n    } else {\n        if (window.hasOwnProperty('jsmeOnLoad')) {\n            const oldJsmeOnLoad = window.jsmeOnLoad;\n            window.jsmeOnLoad = () => {\n                oldJsmeOnLoad();\n                displayJsme();\n            };\n        } else {\n            window.jsmeOnLoad = () => {\n                displayJsme();\n            };\n        }\n        loadJsmeCode();\n    }\n};\n\nexport {\n    insertApplet\n};\n"],"names":["containerId","questionDivId","feedbackImageHtml","readonly","nostereo","autoez","pendingToken","M","util","js_pending","jmeoptions","push","displayJsme","containerElement","document","getElementById","innerHTML","classList","remove","jsmeApplet","window","JSApplet","JSME","join","name","questionDiv","initalJmeContent","querySelector","value","readMolecule","closest","addEventListener","smiles","jmeFile","molFile","js_complete","hasOwnProperty","oldJsmeOnLoad","jsmeOnLoad","scriptTag","createElement","src","cfg","wwwroot","async","body","append","loadJsmeCode"],"mappings":"yKAiDqB,CAACA,YAAaC,cAAeC,kBAAmBC,SAAUC,SAAUC,gBAC/EC,aAAe,GACrBC,EAAEC,KAAKC,WAAWH,oBAEZI,WAAa,GACfN,UACAM,WAAWC,KAAK,YAEhBN,QACAK,WAAWC,KAAK,UAEhBR,UACAO,WAAWC,KAAK,gBAIdC,YAAc,WAEVC,iBAAmBC,SAASC,eAAef,aACjDa,iBAAiBG,UAAY,GAC7BH,iBAAiBI,UAAUC,OAAO,wCAG5BC,WAAa,IAAIC,OAAOC,SAASC,KAAKtB,YAAa,QAAS,QAAS,SAAYU,WAAWa,KAAK,OACvGJ,WAAWK,KAAOxB,kBAGZyB,YAAcX,SAASC,eAAed,eACtCyB,iBAAmBD,YAAYE,cAAc,aAAaC,MAC5DF,kBACAP,WAAWU,aAAaH,kBAI5BD,YAAYK,QAAQ,QAAQC,iBAAiB,UAAU,KACnDN,YAAYE,cAAc,gBAAgBC,MAAQT,WAAWa,SAC7DP,YAAYE,cAAc,aAAaC,MAAQT,WAAWc,UAC1DR,YAAYE,cAAc,aAAaC,MAAQT,WAAWe,aAG9D3B,EAAEC,KAAK2B,YAAY7B,kBAGnBc,OAAOgB,eAAe,YAEtBxB,kBACG,IACCQ,OAAOgB,eAAe,cAAe,OAC/BC,cAAgBjB,OAAOkB,WAC7BlB,OAAOkB,WAAa,KAChBD,gBACAzB,oBAGJQ,OAAOkB,WAAa,KAChB1B,eA3EK,YAIX2B,UAAYzB,SAAS0B,cAAc,UACzCD,UAAUE,IAAMlC,EAAEmC,IAAIC,QAAU,gDAChCJ,UAAUK,OAAQ,EAClB9B,SAAS+B,KAAKC,OAAOP,YAuEjBQ"}