{"version":3,"file":"completion.min.js","sources":["../src/completion.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/* eslint space-before-function-paren: 0 */\n\n/**\n * Load the format_tiles JavaScript for the course edit settings page /course/edit.php?id=xxx\n *\n * @module      format_tiles/completion\n * @copyright   2018 David Watson {@link http://evolutioncode.uk}\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine([\"jquery\", \"core/templates\", \"core/config\", \"core/ajax\", \"core/str\", \"core_course/manual_completion_toggle\"],\n    function ($, Templates, config, ajax, str, coreManualCompletion) {\n        \"use strict\";\n\n        var courseId;\n        const dataKeys = {\n            cmid: \"data-cmid\",\n            numberComplete: \"data-numcomplete\",\n            numberOutOf: \"data-numoutof\",\n            section: \"data-section\",\n            completionState: \"data-toggletype\"\n        };\n\n        const Selector = {\n            launchModuleModal: '[data-action=\"launch-tiles-module-modal\"]',\n            launchResourceModal: '[data-action=\"launch-tiles-resource-modal\"]',\n            pageContent: \"#page-content\",\n            regionMain: \"#region-main\",\n            resourceModule: '.activity.resource',\n            completeonevent: \".completeonevent\",\n            completeonview: \".completeonview\",\n            activity: \"li.activity\",\n            section: \"li.section.main\",\n            togglecompletion: '[data-action=\"toggle-manual-completion\"]',\n            tileId: \"#tile-\",\n            progressIndicatorId: '#tileprogress-',\n            tile: '.tile',\n            spacer: '.spacer',\n            availabilityinfo: '.availabilityinfo',\n            sectionId: '#section-'\n        };\n\n        var isBlurred = false;\n\n        /**\n         * When completion is changed it may be necessary to re-render a progress indicator.\n         * This helps assemble the data.\n         * @param {number} tileId which tile is this for\n         * @param {number} numComplete how many items has the user completed\n         * @param {number} outOf how many items are there to complete\n         * @param {boolean} asPercent should we show this as a percentage\n         * @returns {{}}\n         */\n        var progressTemplateData = function (tileId, numComplete, outOf, asPercent) {\n            var data = {\n                tileid: tileId,\n                numComplete: numComplete,\n                numOutOf: outOf,\n                showAsPercent: asPercent,\n                percent: outOf > 0 ? Math.round(numComplete / outOf * 100) : 0,\n                percentCircumf: 106.8,\n                percentOffset: outOf > 0 ? Math.round(((outOf - numComplete) / outOf) * 106.8) : 0,\n                isComplete: false,\n                isSingleDigit: false,\n                hastilephoto: $(Selector.tileId + tileId).hasClass(\"phototile\"),\n            };\n            if (tileId === 0) {\n                data.isOverall = 1;\n            } else {\n                data.isOverall = 0;\n            }\n            if (outOf > 0 && numComplete >= outOf) {\n                data.isComplete = true;\n            }\n            if (data.percent < 10) {\n                data.isSingleDigit = true;\n            }\n            return data;\n        };\n\n        /**\n         * When a progress change happens, e.g. an item is marked as complete or not, this fires.\n         * It changes the current tile's progress up or down by 1 according to the progressChange arg.\n         * @param {int} sectionNum the number of this tile/section.\n         * @param {object} tileProgressIndicator the indicator for this tile\n         * @param {int} newTileProgressValue the new value\n         */\n        var changeProgressIndicatorSection = function(sectionNum, tileProgressIndicator, newTileProgressValue) {\n            if (newTileProgressValue < 0 || newTileProgressValue > tileProgressIndicator.attr(dataKeys.numberOutOf)) {\n                // If we are already at zero, do not reduce.  May happen rarely if user presses repeatedly.\n                // Will not cause a long term issue as will be resolved when user refreshes page.\n                return;\n            }\n\n            if (!sectionNum) {\n                // Section zero doesn't have a section progress indicator.\n                return;\n            }\n\n            // Render and replace the progress indicator for *this tile*.\n            Templates.render(\"format_tiles/progress\", progressTemplateData(\n                sectionNum,\n                newTileProgressValue,\n                parseInt(tileProgressIndicator.attr(dataKeys.numberOutOf)),\n                tileProgressIndicator.hasClass(\"percent\")\n            )).done(function (html) {\n                // Need to repeat jquery selector as it is being replaced (replacwith).\n                tileProgressIndicator.replaceWith(html);\n\n            });\n        };\n\n        const setOverallProgressIndicator = function(newValue, outOf) {\n            // Render and replace the *overall* progress indicator for the *whole course*.\n            Templates.render(\"format_tiles/progress\", progressTemplateData(\n                0, newValue, outOf, true\n            )).done(function (html) {\n                $(\"#tileprogress-0\").replaceWith(html).fadeOut(0).animate({opacity: 1}, 500);\n            });\n        };\n\n        /**\n         * Trigger an event so that other JS modules can be notified to check completion status.\n         * Used to refresh section contents when completion is checked.\n         * Can also be used by other components e.g. blocks that show completion.\n         * @param {number} sectionNum the number of the section where completion changed.\n         * @param {number} cmid the course module where completion changed.\n         */\n        const triggerCompletionChangedEvent = function (sectionNum, cmid) {\n            $(document).trigger('format-tiles-completion-changed', {section: sectionNum, cmid: cmid});\n        };\n\n        /**\n         * If we have called format_tiles_get_section_information then we need to add the result to the DOM.\n         * @param {array} sections the section in\n         * @param {number} overallcomplete how many activities complete in the section overall\n         * @param {number}overalloutof how many activities in the section overall\n         */\n        const updateSectionsInfo = function(sections, overallcomplete, overalloutof) {\n            sections.forEach(sec => {\n                const tile = $(Selector.tileId + sec.sectionnum);\n                // If this tile is now unrestricted / visible, give it the right classes.\n                if (sec.isavailable && tile.hasClass('tile-restricted')) {\n                    tile.removeClass('tile-restricted');\n                } else if (!sec.isavailable) {\n                    tile.addClass('tile-restricted');\n                }\n                if (sec.isclickable && !tile.hasClass('tile-clickable')) {\n                    tile.addClass('tile-clickable');\n                } else if (!sec.isclickable && tile.hasClass('tile-clickable')) {\n                    tile.removeClass('tile-clickable');\n                }\n                if (sec.iscomplete) {\n                    tile.addClass('is-complete');\n                } else {\n                    tile.removeClass('is-complete');\n                }\n                // Now re-render the progress indicator if necessary with correct data.\n                const progressIndicator = $(Selector.progressIndicatorId + sec.sectionnum);\n                changeProgressIndicatorSection(sec.sectionnum, progressIndicator, sec.numcomplete);\n                setOverallProgressIndicator(overallcomplete, overalloutof);\n\n                // Finally change or re-render the availability message if necessary.\n                const availabilityInfoDiv = tile.find(Selector.availabilityinfo);\n                if (availabilityInfoDiv.length > 0 && sec.isavailable && !sec.availabilitymessage) {\n                    // Display no message any more.\n                    availabilityInfoDiv.fadeOut();\n                } else if (!sec.isavailable && sec.availabilitymessage) {\n                    // Sec is not available and we have a message to display.\n                    if (availabilityInfoDiv.length > 0) {\n                        availabilityInfoDiv.html = 'NEW' + sec.availabilitymessage;\n                        availabilityInfoDiv.fadeIn();\n                    } else {\n                        Templates.render(\"format_tiles/availability_info\", {\n                            availabilitymessage: sec.availabilitymessage,\n                            visible: true\n                        }).done(function (html) {\n                            // Need to repeat jquery selector as it is being replaced (replacwith).\n                            progressIndicator.replaceWith(html);\n\n                        });\n                    }\n                }\n            });\n        };\n\n        /**\n         * Sometimes we must check the availability and completion status of/some all tiles using AJAX.\n         * This might happen if for example a tile expands and some embedded activities are then complete.\n         * Other tiles might use the completion of a previous tile for their availability.\n         * This especially applies if teh H5P filter is being used to display embedded H5P in labels.\n         * @param {Number[]} sectionNums\n         */\n        var updateTileInformation = function (sectionNums) {\n            if (sectionNums === undefined) {\n                // Use all sections if no arg.\n                sectionNums = $(Selector.tile).not(Selector.spacer).map((i, t) => {\n                    return parseInt($(t).attr(dataKeys.section));\n                }).toArray();\n            }\n            ajax.call([{\n                methodname: \"format_tiles_get_section_information\",\n                args: {\n                    courseid: courseId,\n                    sectionnums: sectionNums\n                }\n            }])[0].done((res) => {\n                    updateSectionsInfo(res.sections, res.overall.complete, res.overall.outof);\n                })\n                .fail(err => {\n                    require([\"core/log\"], function(log) {\n                        log.debug(\n                            \"Failed to get section information to check completion status of section\"\n                        );\n                        log.debug(err);\n                    });\n                });\n        };\n\n        return {\n            init: function (courseIdInit) {\n                courseId = courseIdInit;\n                $(document).ready(function () {\n                    var loadingString = '...';\n                    str.get_strings([{key: \"loading\", component: \"format_tiles\"}]).done(function (s) {\n                        loadingString = s[0] + '  ...';\n                    });\n                    // Included like this so that later dynamically added boxes are covered.\n                    $(\"body\").on(\"click\", Selector.togglecompletion, function (e) {\n                        // If this is a subtile, replace button with a spinner pending reload of activities over JS.\n                        // Otherwise the core JS will replace with its own with different style.\n                        // See core_course/manual_completion_toggle.\n                        const currentTarget = $(e.currentTarget);\n                        if (currentTarget.closest('.section').hasClass('subtiles')) {\n                            currentTarget.replaceWith(\n                                '<div class=\"spinner-grow spinner-grow-sm text-secondary mt-2 mr-2 pull-right\"'\n                                + ' role=\"status\"><span class=\"sr-only\">' + loadingString + '</span></div>'\n                            );\n                        }\n                    });\n\n                    var pageContent = $(\"#page-content\");\n                    if (pageContent.length === 0) {\n                        // Some themes e.g. RemUI do not have a #page-content div, so use #region-main.\n                        pageContent = $(\"#region-main\");\n                    }\n                    pageContent\n                        .on(\"click\", Selector.launchModuleModal + \", \" + Selector.launchResourceModal, function (e) {\n                            var clickedActivity = $(e.currentTarget).closest(Selector.activity);\n                            if (clickedActivity.hasClass(\"completeonview\")) {\n                                const sectionNum = clickedActivity.closest(Selector.section).attr(dataKeys.section);\n                                const cmid = clickedActivity.attr('data-cmid');\n                                triggerCompletionChangedEvent(\n                                    sectionNum ? parseInt(sectionNum) : 0, cmid ? parseInt(cmid) : 0\n                                );\n                            }\n                        });\n\n                    // When the user returns to the main tab/window, refresh completion data.\n                    // (Completion may have changed since the last focus, e.g. activity opened in new window).\n                    $(window).on('focus', function() {\n                        if (isBlurred) {\n                            // We are returning to current window.\n                            const openSection = $('li.section.state-visible').attr('data-section');\n                            isBlurred = false;\n                            triggerCompletionChangedEvent(openSection ? parseInt(openSection) : 0, 0);\n                        }\n                    });\n                    $(window).on('blur', function() {\n                        isBlurred = true;\n                    });\n\n                    // When behat tests are running, for whatever reason core completion is not initialised, so we do it here.\n                    coreManualCompletion.init();\n                });\n            },\n            triggerCompletionChangedEvent: function(sectionNum, cmid) {\n                triggerCompletionChangedEvent(sectionNum, cmid);\n            },\n            updateTileInformation: function(sectionNumbers) {\n                try {\n                    updateTileInformation(sectionNumbers);\n                } catch (err) {\n                    require([\"core/log\"], function(log) {\n                        log.debug(err);\n                    });\n                }\n            },\n            updateSectionsInfo: function(sections, overallcomplete, overalloutof) {\n                updateSectionsInfo(sections, overallcomplete, overalloutof);\n            }\n        };\n    }\n);\n"],"names":["define","$","Templates","config","ajax","str","coreManualCompletion","courseId","dataKeys","Selector","isBlurred","progressTemplateData","tileId","numComplete","outOf","asPercent","data","tileid","numOutOf","showAsPercent","percent","Math","round","percentCircumf","percentOffset","isComplete","isSingleDigit","hastilephoto","hasClass","isOverall","triggerCompletionChangedEvent","sectionNum","cmid","document","trigger","section","updateSectionsInfo","sections","overallcomplete","overalloutof","forEach","sec","tile","sectionnum","isavailable","removeClass","addClass","isclickable","iscomplete","tileProgressIndicator","newTileProgressValue","newValue","progressIndicator","numcomplete","attr","render","parseInt","done","html","replaceWith","fadeOut","animate","opacity","availabilityInfoDiv","find","length","availabilitymessage","fadeIn","visible","init","courseIdInit","ready","loadingString","get_strings","key","component","s","on","e","currentTarget","closest","pageContent","clickedActivity","window","openSection","updateTileInformation","sectionNumbers","undefined","sectionNums","not","map","i","t","toArray","call","methodname","args","courseid","sectionnums","res","overall","complete","outof","fail","err","require","log","debug"],"mappings":"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"}