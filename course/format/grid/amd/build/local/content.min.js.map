{"version":3,"file":"content.min.js","sources":["../../src/local/content.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Course index main component.\r\n *\r\n * @module     core_courseformat/local/content\r\n * @class      core_courseformat/local/content\r\n * @copyright  2020 Ferran Recio <ferran@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport BaseComponent from 'core_courseformat/local/content';\r\nimport {getCurrentCourseEditor} from 'core_courseformat/courseeditor';\r\nimport inplaceeditable from 'core/inplace_editable';\r\nimport Section from 'core_courseformat/local/content/section';\r\nimport CmItem from 'core_courseformat/local/content/section/cmitem';\r\n// Course actions is needed for actions that are not migrated to components.\r\nimport courseActions from 'core_course/actions';\r\nimport DispatchActions from 'core_courseformat/local/content/actions';\r\nimport * as CourseEvents from 'core_course/events';\r\n\r\nexport default class Component extends BaseComponent {\r\n\r\n    /**\r\n     * Constructor hook.\r\n     *\r\n     * @param {Object} descriptor the component descriptor\r\n     */\r\n    create(descriptor) {\r\n        // Optional component name for debugging.\r\n        this.name = 'grid_course_format';\r\n        // Default query selectors.\r\n        this.selectors = {\r\n            SECTION: `[data-for='section']`,\r\n            SECTION_ITEM: `[data-for='section_title']`,\r\n            SECTION_CMLIST: `[data-for='cmlist']`,\r\n            COURSE_SECTIONLIST: `[data-for='course_sectionlist']`,\r\n            CM: `[data-for='cmitem']`,\r\n            PAGE: `#page`,\r\n            // Formats can override the activity tag but a default one is needed to create new elements.\r\n            ACTIVITYTAG: 'li',\r\n            SECTIONTAG: 'li',\r\n        };\r\n        // Default classes to toggle on refresh.\r\n        this.classes = {\r\n            //COLLAPSED: `collapsed`,\r\n            // Course content classes.\r\n            ACTIVITY: `activity`,\r\n            STATEDREADY: `stateready`,\r\n            SECTION: `section`,\r\n        };\r\n        // Array to save dettached elements during element resorting.\r\n        this.dettachedCms = {};\r\n        this.dettachedSections = {};\r\n        // Index of sections and cms components.\r\n        this.sections = {};\r\n        this.cms = {};\r\n        // The page section return.\r\n        this.sectionReturn = descriptor.sectionReturn ?? 0;\r\n    }\r\n\r\n    /**\r\n     * Static method to create a component instance form the mustahce template.\r\n     *\r\n     * @param {string} target the DOM main element or its ID\r\n     * @param {object} selectors optional css selector overrides\r\n     * @param {number} sectionReturn the content section return\r\n     * @return {Component}\r\n     */\r\n    static init(target, selectors, sectionReturn) {\r\n        return new Component({\r\n            element: document.getElementById(target),\r\n            reactive: getCurrentCourseEditor(),\r\n            selectors,\r\n            sectionReturn,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Initial state ready method.\r\n     */\r\n    stateReady(/*state*/) {\r\n        this._indexContents();\r\n\r\n        if (this.reactive.supportComponents) {\r\n            // Actions are only available in edit mode.\r\n            if (this.reactive.isEditing) {\r\n                new DispatchActions(this);\r\n            }\r\n\r\n            // Mark content as state ready.\r\n            this.element.classList.add(this.classes.STATEDREADY);\r\n        }\r\n\r\n        // Capture completion events.\r\n        this.addEventListener(\r\n            this.element,\r\n            CourseEvents.manualCompletionToggled,\r\n            this._completionHandler\r\n        );\r\n\r\n        // Capture page scroll to update page item.\r\n        this.addEventListener(\r\n            document.querySelector(this.selectors.PAGE),\r\n            \"scroll\",\r\n            this._scrollHandler\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Return the component watchers.\r\n     *\r\n     * @returns {Array} of watchers\r\n     */\r\n    getWatchers() {\r\n        // Section return is a global page variable but most formats define it just before start printing\r\n        // the course content. This is the reason why we define this page setting here.\r\n        this.reactive.sectionReturn = this.sectionReturn;\r\n\r\n        // Check if the course format is compatible with reactive components.\r\n        if (!this.reactive.supportComponents) {\r\n            return [];\r\n        }\r\n        return [\r\n            // State changes that require to reload some course modules.\r\n            {watch: `cm.visible:updated`, handler: this._reloadCm},\r\n            {watch: `cm.stealth:updated`, handler: this._reloadCm},\r\n            // Update section number and title.\r\n            {watch: `section.number:updated`, handler: this._refreshSectionNumber},\r\n            // Sections and cm sorting.\r\n            {watch: `transaction:start`, handler: this._startProcessing},\r\n            {watch: `course.sectionlist:updated`, handler: this._refreshCourseSectionlist},\r\n            {watch: `section.cmlist:updated`, handler: this._refreshSectionCmlist},\r\n            // Reindex sections and cms.\r\n            {watch: `state:updated`, handler: this._indexContents},\r\n            // State changes thaty require to reload course modules.\r\n            {watch: `cm.visible:updated`, handler: this._reloadCm},\r\n            {watch: `cm.sectionid:updated`, handler: this._reloadCm},\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Setup the component to start a transaction.\r\n     *\r\n     * Some of the course actions replaces the current DOM element with a new one before updating the\r\n     * course state. This means the component cannot preload any index properly until the transaction starts.\r\n     *\r\n     */\r\n    _startProcessing() {\r\n        // During a section or cm sorting, some elements could be dettached from the DOM and we\r\n        // need to store somewhare in case they are needed later.\r\n        this.dettachedCms = {};\r\n        this.dettachedSections = {};\r\n    }\r\n\r\n    /**\r\n     * Activity manual completion listener.\r\n     *\r\n     * @param {Event} event the custom ecent\r\n     */\r\n    _completionHandler({detail}) {\r\n        if (detail === undefined) {\r\n            return;\r\n        }\r\n        this.reactive.dispatch('cmCompletion', [detail.cmid], detail.completed);\r\n    }\r\n\r\n    /**\r\n     * Check the current page scroll and update the active element if necessary.\r\n     */\r\n    _scrollHandler() {\r\n        const pageOffset = document.querySelector(this.selectors.PAGE).scrollTop;\r\n        const items = this.reactive.getExporter().allItemsArray(this.reactive.state);\r\n        // Check what is the active element now.\r\n        let pageItem = null;\r\n        items.every(item => {\r\n            const index = (item.type === 'section') ? this.sections : this.cms;\r\n            if (index[item.id] === undefined) {\r\n                return true;\r\n            }\r\n\r\n            const element = index[item.id].element;\r\n            // Activities without url can only be page items in edit mode.\r\n            if (item.type === 'cm' && !item.url && !this.reactive.isEditing) {\r\n                return pageOffset >= element.offsetTop;\r\n            }\r\n            pageItem = item;\r\n            return pageOffset >= element.offsetTop;\r\n        });\r\n        if (pageItem) {\r\n            this.reactive.dispatch('setPageItem', pageItem.type, pageItem.id);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update a course section when the section number changes.\r\n     *\r\n     * The courseActions module used for most course section tools still depends on css classes and\r\n     * section numbers (not id). To prevent inconsistencies when a section is moved, we need to refresh\r\n     * the\r\n     *\r\n     * Course formats can override the section title rendering so the frontend depends heavily on backend\r\n     * rendering. Luckily in edit mode we can trigger a title update using the inplace_editable module.\r\n     *\r\n     * @param {Object} param\r\n     * @param {Object} param.element details the update details.\r\n     */\r\n    _refreshSectionNumber({element}) {\r\n        // Find the element.\r\n        const target = this.getElement(this.selectors.SECTION, element.id);\r\n        if (!target) {\r\n            // Job done. Nothing to refresh.\r\n            return;\r\n        }\r\n        // Update section numbers in all data, css and YUI attributes.\r\n        target.id = `section-${element.number}`;\r\n        // YUI uses section number as section id in data-sectionid, in principle if a format use components\r\n        // don't need this sectionid attribute anymore, but we keep the compatibility in case some plugin\r\n        // use it for legacy purposes.\r\n        target.dataset.sectionid = element.number;\r\n        // The data-number is the attribute used by components to store the section number.\r\n        target.dataset.number = element.number;\r\n\r\n        // Update title and title inplace editable, if any.\r\n        const inplace = inplaceeditable.getInplaceEditable(target.querySelector(this.selectors.SECTION_ITEM));\r\n        if (inplace) {\r\n            // The course content HTML can be modified at any moment, so the function need to do some checkings\r\n            // to make sure the inplace editable still represents the same itemid.\r\n            const currentvalue = inplace.getValue();\r\n            const currentitemid = inplace.getItemId();\r\n            // Unnamed sections must be recalculated.\r\n            if (inplace.getValue() === '') {\r\n                // The value to send can be an empty value if it is a default name.\r\n                if (currentitemid == element.id && (currentvalue != element.rawtitle || element.rawtitle == '')) {\r\n                    inplace.setValue(element.rawtitle);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Refresh a section cm list.\r\n     *\r\n     * @param {Object} param\r\n     * @param {Object} param.element details the update details.\r\n     */\r\n    _refreshSectionCmlist({element}) {\r\n        const cmlist = element.cmlist ?? [];\r\n        const section = this.getElement(this.selectors.SECTION, element.id);\r\n        const listparent = section?.querySelector(this.selectors.SECTION_CMLIST);\r\n        // A method to create a fake element to be replaced when the item is ready.\r\n        const createCm = this._createCmItem.bind(this);\r\n        if (listparent) {\r\n            this._fixOrder(listparent, cmlist, this.selectors.CM, this.dettachedCms, createCm);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Refresh the section list.\r\n     *\r\n     * @param {Object} param\r\n     * @param {Object} param.element details the update details.\r\n     */\r\n    _refreshCourseSectionlist({element}) {\r\n        // If we have a section return means we only show a single section so no need to fix order.\r\n        if (this.reactive.sectionReturn != 0) {\r\n            return;\r\n        }\r\n        const sectionlist = element.sectionlist ?? [];\r\n        const listparent = this.getElement(this.selectors.COURSE_SECTIONLIST);\r\n        // For now section cannot be created at a frontend level.\r\n        const createSection = this._createSectionItem.bind(this);\r\n        if (listparent) {\r\n            this._fixOrder(listparent, sectionlist, this.selectors.SECTION, this.dettachedSections, createSection);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Regenerate content indexes.\r\n     *\r\n     * This method is used when a legacy action refresh some content element.\r\n     */\r\n    _indexContents() {\r\n        // Find unindexed sections.\r\n        this._scanIndex(\r\n            this.selectors.SECTION,\r\n            this.sections,\r\n            (item) => {\r\n                return new Section(item);\r\n            }\r\n        );\r\n\r\n        // Find unindexed cms.\r\n        this._scanIndex(\r\n            this.selectors.CM,\r\n            this.cms,\r\n            (item) => {\r\n                return new CmItem(item);\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Reindex a content (section or cm) of the course content.\r\n     *\r\n     * This method is used internally by _indexContents.\r\n     *\r\n     * @param {string} selector the DOM selector to scan\r\n     * @param {*} index the index attribute to update\r\n     * @param {*} creationhandler method to create a new indexed element\r\n     */\r\n    _scanIndex(selector, index, creationhandler) {\r\n        const items = this.getElements(`${selector}:not([data-indexed])`);\r\n        items.forEach((item) => {\r\n            if (!item?.dataset?.id) {\r\n                return;\r\n            }\r\n            // Delete previous item component.\r\n            if (index[item.dataset.id] !== undefined) {\r\n                index[item.dataset.id].unregister();\r\n            }\r\n            // Create the new component.\r\n            index[item.dataset.id] = creationhandler({\r\n                ...this,\r\n                element: item,\r\n            });\r\n            // Mark as indexed.\r\n            item.dataset.indexed = true;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Reload a course module contents.\r\n     *\r\n     * Most course module HTML is still strongly backend dependant.\r\n     * Some changes require to get a new version of the module.\r\n     *\r\n     * @param {object} param0 the watcher details\r\n     * @param {object} param0.element the state object\r\n     */\r\n    _reloadCm({element}) {\r\n        const cmitem = this.getElement(this.selectors.CM, element.id);\r\n        if (cmitem) {\r\n            const promise = courseActions.refreshModule(cmitem, element.id);\r\n            promise.then(() => {\r\n                this._indexContents();\r\n                return;\r\n            }).catch();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reload a course section contents.\r\n     *\r\n     * Section HTML is still strongly backend dependant.\r\n     * Some changes require to get a new version of the section.\r\n     *\r\n     * @param {details} param0 the watcher details\r\n     * @param {object} param0.element the state object\r\n     */\r\n    _reloadSection({element}) {\r\n        const sectionitem = this.getElement(this.selectors.SECTION, element.id);\r\n        if (sectionitem) {\r\n            const promise = courseActions.refreshSection(sectionitem, element.id);\r\n            promise.then(() => {\r\n                this._indexContents();\r\n                return;\r\n            }).catch();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create a new course module item in a section.\r\n     *\r\n     * Thos method will append a fake item in the container and trigger an ajax request to\r\n     * replace the fake element by the real content.\r\n     *\r\n     * @param {Element} container the container element (section)\r\n     * @param {Number} cmid the course-module ID\r\n     * @returns {Element} the created element\r\n     */\r\n    _createCmItem(container, cmid) {\r\n        const newItem = document.createElement(this.selectors.ACTIVITYTAG);\r\n        newItem.dataset.for = 'cmitem';\r\n        newItem.dataset.id = cmid;\r\n        // The legacy actions.js requires a specific ID and class to refresh the CM.\r\n        newItem.id = `module-${cmid}`;\r\n        newItem.classList.add(this.classes.ACTIVITY);\r\n        container.append(newItem);\r\n        this._reloadCm({\r\n            element: this.reactive.get('cm', cmid),\r\n        });\r\n        return newItem;\r\n    }\r\n\r\n    /**\r\n     * Create a new section item.\r\n     *\r\n     * This method will append a fake item in the container and trigger an ajax request to\r\n     * replace the fake element by the real content.\r\n     *\r\n     * @param {Element} container the container element (section)\r\n     * @param {Number} sectionid the course-module ID\r\n     * @returns {Element} the created element\r\n     */\r\n    _createSectionItem(container, sectionid) {\r\n        const section = this.reactive.get('section', sectionid);\r\n        const newItem = document.createElement(this.selectors.SECTIONTAG);\r\n        newItem.dataset.for = 'section';\r\n        newItem.dataset.id = sectionid;\r\n        newItem.dataset.number = section.number;\r\n        // The legacy actions.js requires a specific ID and class to refresh the section.\r\n        newItem.id = `section-${sectionid}`;\r\n        newItem.classList.add(this.classes.SECTION);\r\n        container.append(newItem);\r\n        this._reloadSection({\r\n            element: section,\r\n        });\r\n        return newItem;\r\n    }\r\n\r\n    /**\r\n     * Fix/reorder the section or cms order.\r\n     *\r\n     * @param {Element} container the HTML element to reorder.\r\n     * @param {Array} neworder an array with the ids order\r\n     * @param {string} selector the element selector\r\n     * @param {Object} dettachedelements a list of dettached elements\r\n     * @param {function} createMethod method to create missing elements\r\n     */\r\n    async _fixOrder(container, neworder, selector, dettachedelements, createMethod) {\r\n        if (container === undefined) {\r\n            return;\r\n        }\r\n\r\n        // Empty lists should not be visible.\r\n        if (!neworder.length) {\r\n            container.classList.add('hidden');\r\n            container.innerHTML = '';\r\n            return;\r\n        }\r\n\r\n        // Grant the list is visible (in case it was empty).\r\n        container.classList.remove('hidden');\r\n\r\n        // Move the elements in order at the beginning of the list.\r\n        neworder.forEach((itemid, index) => {\r\n            let item = this.getElement(selector, itemid) ?? dettachedelements[itemid] ?? createMethod(container, itemid);\r\n            if (item === undefined) {\r\n                // Missing elements cannot be sorted.\r\n                return;\r\n            }\r\n            // Get the current elemnt at that position.\r\n            const currentitem = container.children[index];\r\n            if (currentitem === undefined) {\r\n                container.append(item);\r\n                return;\r\n            }\r\n            if (currentitem !== item) {\r\n                container.insertBefore(item, currentitem);\r\n            }\r\n        });\r\n\r\n        // Dndupload add a fake element we need to keep.\r\n        let dndFakeActivity;\r\n\r\n        // Remove the remaining elements.\r\n        while (container.children.length > neworder.length) {\r\n            const lastchild = container.lastChild;\r\n            if (lastchild?.classList?.contains('dndupload-preview')) {\r\n                dndFakeActivity = lastchild;\r\n            } else {\r\n                dettachedelements[lastchild?.dataset?.id ?? 0] = lastchild;\r\n            }\r\n            container.removeChild(lastchild);\r\n        }\r\n        // Restore dndupload fake element.\r\n        if (dndFakeActivity) {\r\n            container.append(dndFakeActivity);\r\n        }\r\n    }\r\n}\r\n"],"names":["Component","BaseComponent","create","descriptor","name","selectors","SECTION","SECTION_ITEM","SECTION_CMLIST","COURSE_SECTIONLIST","CM","PAGE","ACTIVITYTAG","SECTIONTAG","classes","ACTIVITY","STATEDREADY","dettachedCms","dettachedSections","sections","cms","sectionReturn","target","element","document","getElementById","reactive","stateReady","_indexContents","this","supportComponents","isEditing","DispatchActions","classList","add","addEventListener","CourseEvents","manualCompletionToggled","_completionHandler","querySelector","_scrollHandler","getWatchers","watch","handler","_reloadCm","_refreshSectionNumber","_startProcessing","_refreshCourseSectionlist","_refreshSectionCmlist","detail","undefined","dispatch","cmid","completed","pageOffset","scrollTop","items","getExporter","allItemsArray","state","pageItem","every","item","index","type","id","url","offsetTop","getElement","number","dataset","sectionid","inplace","inplaceeditable","getInplaceEditable","currentvalue","getValue","currentitemid","getItemId","rawtitle","setValue","cmlist","section","listparent","createCm","_createCmItem","bind","_fixOrder","sectionlist","createSection","_createSectionItem","_scanIndex","Section","CmItem","selector","creationhandler","getElements","forEach","_item$dataset","unregister","indexed","cmitem","courseActions","refreshModule","then","catch","_reloadSection","sectionitem","refreshSection","container","newItem","createElement","for","append","get","neworder","dettachedelements","createMethod","length","innerHTML","dndFakeActivity","remove","itemid","currentitem","children","insertBefore","lastchild","lastChild","_lastchild$classList","contains","_lastchild$dataset","removeChild"],"mappings":";;;;;;;;ihCAkCqBA,kBAAkBC,iBAOnCC,OAAOC,2CAEEC,KAAO,0BAEPC,UAAY,CACbC,+BACAC,0CACAC,qCACAC,qDACAC,yBACAC,aAEAC,YAAa,KACbC,WAAY,WAGXC,QAAU,CAGXC,oBACAC,yBACAV,wBAGCW,aAAe,QACfC,kBAAoB,QAEpBC,SAAW,QACXC,IAAM,QAENC,4CAAgBlB,WAAWkB,qEAAiB,cAWzCC,OAAQjB,UAAWgB,sBACpB,IAAIrB,UAAU,CACjBuB,QAASC,SAASC,eAAeH,QACjCI,UAAU,0CACVrB,UAAAA,UACAgB,cAAAA,gBAORM,kBACSC,iBAEDC,KAAKH,SAASI,oBAEVD,KAAKH,SAASK,eACVC,kBAAgBH,WAInBN,QAAQU,UAAUC,IAAIL,KAAKf,QAAQE,mBAIvCmB,iBACDN,KAAKN,QACLa,aAAaC,wBACbR,KAAKS,yBAIJH,iBACDX,SAASe,cAAcV,KAAKxB,UAAUM,MACtC,SACAkB,KAAKW,gBASbC,0BAGSf,SAASL,cAAgBQ,KAAKR,cAG9BQ,KAAKH,SAASI,kBAGZ,CAEH,CAACY,2BAA6BC,QAASd,KAAKe,WAC5C,CAACF,2BAA6BC,QAASd,KAAKe,WAE5C,CAACF,+BAAiCC,QAASd,KAAKgB,uBAEhD,CAACH,0BAA4BC,QAASd,KAAKiB,kBAC3C,CAACJ,mCAAqCC,QAASd,KAAKkB,2BACpD,CAACL,+BAAiCC,QAASd,KAAKmB,uBAEhD,CAACN,sBAAwBC,QAASd,KAAKD,gBAEvC,CAACc,2BAA6BC,QAASd,KAAKe,WAC5C,CAACF,6BAA+BC,QAASd,KAAKe,YAhBvC,GA2BfE,wBAGS7B,aAAe,QACfC,kBAAoB,GAQ7BoB,6BAAmBW,OAACA,kBACDC,IAAXD,aAGCvB,SAASyB,SAAS,eAAgB,CAACF,OAAOG,MAAOH,OAAOI,WAMjEb,uBACUc,WAAa9B,SAASe,cAAcV,KAAKxB,UAAUM,MAAM4C,UACzDC,MAAQ3B,KAAKH,SAAS+B,cAAcC,cAAc7B,KAAKH,SAASiC,WAElEC,SAAW,KACfJ,MAAMK,OAAMC,aACFC,MAAuB,YAAdD,KAAKE,KAAsBnC,KAAKV,SAAWU,KAAKT,YACxC8B,IAAnBa,MAAMD,KAAKG,WACJ,QAGL1C,QAAUwC,MAAMD,KAAKG,IAAI1C,cAEb,OAAduC,KAAKE,MAAkBF,KAAKI,KAAQrC,KAAKH,SAASK,WAGtD6B,SAAWE,KACJR,YAAc/B,QAAQ4C,WAHlBb,YAAc/B,QAAQ4C,aAKjCP,eACKlC,SAASyB,SAAS,cAAeS,SAASI,KAAMJ,SAASK,IAiBtEpB,iCAAsBtB,QAACA,qBAEbD,OAASO,KAAKuC,WAAWvC,KAAKxB,UAAUC,QAASiB,QAAQ0C,QAC1D3C,cAKLA,OAAO2C,qBAAgB1C,QAAQ8C,QAI/B/C,OAAOgD,QAAQC,UAAYhD,QAAQ8C,OAEnC/C,OAAOgD,QAAQD,OAAS9C,QAAQ8C,aAG1BG,QAAUC,0BAAgBC,mBAAmBpD,OAAOiB,cAAcV,KAAKxB,UAAUE,kBACnFiE,QAAS,OAGHG,aAAeH,QAAQI,WACvBC,cAAgBL,QAAQM,YAEH,KAAvBN,QAAQI,aAEJC,eAAiBtD,QAAQ0C,IAAOU,cAAgBpD,QAAQwD,UAAgC,IAApBxD,QAAQwD,UAC5EP,QAAQQ,SAASzD,QAAQwD,YAYzC/B,qDAAsBzB,QAACA,qBACb0D,+BAAS1D,QAAQ0D,kDAAU,GAC3BC,QAAUrD,KAAKuC,WAAWvC,KAAKxB,UAAUC,QAASiB,QAAQ0C,IAC1DkB,WAAaD,MAAAA,eAAAA,QAAS3C,cAAcV,KAAKxB,UAAUG,gBAEnD4E,SAAWvD,KAAKwD,cAAcC,KAAKzD,MACrCsD,iBACKI,UAAUJ,WAAYF,OAAQpD,KAAKxB,UAAUK,GAAImB,KAAKZ,aAAcmE,UAUjFrC,8DAA0BxB,QAACA,kBAEY,GAA/BM,KAAKH,SAASL,2BAGZmE,yCAAcjE,QAAQiE,iEAAe,GACrCL,WAAatD,KAAKuC,WAAWvC,KAAKxB,UAAUI,oBAE5CgF,cAAgB5D,KAAK6D,mBAAmBJ,KAAKzD,MAC/CsD,iBACKI,UAAUJ,WAAYK,YAAa3D,KAAKxB,UAAUC,QAASuB,KAAKX,kBAAmBuE,eAShG7D,sBAES+D,WACD9D,KAAKxB,UAAUC,QACfuB,KAAKV,UACJ2C,MACU,IAAI8B,iBAAQ9B,aAKtB6B,WACD9D,KAAKxB,UAAUK,GACfmB,KAAKT,KACJ0C,MACU,IAAI+B,gBAAO/B,QAc9B6B,WAAWG,SAAU/B,MAAOgC,iBACVlE,KAAKmE,sBAAeF,kCAC5BG,SAASnC,yBACNA,MAAAA,4BAAAA,KAAMQ,kCAAN4B,cAAejC,UAIWf,IAA3Ba,MAAMD,KAAKQ,QAAQL,KACnBF,MAAMD,KAAKQ,QAAQL,IAAIkC,aAG3BpC,MAAMD,KAAKQ,QAAQL,IAAM8B,gBAAgB,IAClClE,KACHN,QAASuC,OAGbA,KAAKQ,QAAQ8B,SAAU,MAa/BxD,qBAAUrB,QAACA,qBACD8E,OAASxE,KAAKuC,WAAWvC,KAAKxB,UAAUK,GAAIa,QAAQ0C,OACtDoC,OAAQ,CACQC,iBAAcC,cAAcF,OAAQ9E,QAAQ0C,IACpDuC,MAAK,UACJ5E,oBAEN6E,SAaXC,0BAAenF,QAACA,qBACNoF,YAAc9E,KAAKuC,WAAWvC,KAAKxB,UAAUC,QAASiB,QAAQ0C,OAChE0C,YAAa,CACGL,iBAAcM,eAAeD,YAAapF,QAAQ0C,IAC1DuC,MAAK,UACJ5E,oBAEN6E,SAcXpB,cAAcwB,UAAWzD,YACf0D,QAAUtF,SAASuF,cAAclF,KAAKxB,UAAUO,oBACtDkG,QAAQxC,QAAQ0C,IAAM,SACtBF,QAAQxC,QAAQL,GAAKb,KAErB0D,QAAQ7C,oBAAeb,MACvB0D,QAAQ7E,UAAUC,IAAIL,KAAKf,QAAQC,UACnC8F,UAAUI,OAAOH,cACZlE,UAAU,CACXrB,QAASM,KAAKH,SAASwF,IAAI,KAAM9D,QAE9B0D,QAaXpB,mBAAmBmB,UAAWtC,iBACpBW,QAAUrD,KAAKH,SAASwF,IAAI,UAAW3C,WACvCuC,QAAUtF,SAASuF,cAAclF,KAAKxB,UAAUQ,mBACtDiG,QAAQxC,QAAQ0C,IAAM,UACtBF,QAAQxC,QAAQL,GAAKM,UACrBuC,QAAQxC,QAAQD,OAASa,QAAQb,OAEjCyC,QAAQ7C,qBAAgBM,WACxBuC,QAAQ7E,UAAUC,IAAIL,KAAKf,QAAQR,SACnCuG,UAAUI,OAAOH,cACZJ,eAAe,CAChBnF,QAAS2D,UAEN4B,wBAYKD,UAAWM,SAAUrB,SAAUsB,kBAAmBC,sBAC5CnE,IAAd2D,qBAKCM,SAASG,cACVT,UAAU5E,UAAUC,IAAI,eACxB2E,UAAUU,UAAY,QA0BtBC,oBArBJX,UAAU5E,UAAUwF,OAAO,UAG3BN,SAASlB,SAAQ,CAACyB,OAAQ3D,wCAClBD,4CAAOjC,KAAKuC,WAAW0B,SAAU4B,qDAAWN,kBAAkBM,+BAAWL,aAAaR,UAAWa,gBACxFxE,IAATY,kBAKE6D,YAAcd,UAAUe,SAAS7D,YACnBb,IAAhByE,YAIAA,cAAgB7D,MAChB+C,UAAUgB,aAAa/D,KAAM6D,aAJ7Bd,UAAUI,OAAOnD,SAYlB+C,UAAUe,SAASN,OAASH,SAASG,QAAQ,gCAC1CQ,UAAYjB,UAAUkB,0DACxBD,MAAAA,wCAAAA,UAAW7F,2CAAX+F,qBAAsBC,SAAS,qBAC/BT,gBAAkBM,eAElBV,gDAAkBU,MAAAA,sCAAAA,UAAWxD,6CAAX4D,mBAAoBjE,0DAAM,GAAK6D,UAErDjB,UAAUsB,YAAYL,WAGtBN,iBACAX,UAAUI,OAAOO"}