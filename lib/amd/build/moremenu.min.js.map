{"version":3,"file":"moremenu.min.js","sources":["../src/moremenu.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Moves wrapping navigation items into a more menu.\n *\n * @module     core/moremenu\n * @copyright  2021 Moodle\n * @author     Bas Brands <bas@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport $ from 'jquery';\nimport menu_navigation from \"core/menu_navigation\";\n/**\n * Moremenu selectors.\n */\nconst Selectors = {\n    regions: {\n        moredropdown: '[data-region=\"moredropdown\"]',\n        morebutton: '[data-region=\"morebutton\"]'\n    },\n    classes: {\n        dropdownitem: 'dropdown-item',\n        dropdownmoremenu: 'dropdownmoremenu',\n        hidden: 'd-none',\n        active: 'active',\n        nav: 'nav',\n        navlink: 'nav-link',\n        observed: 'observed',\n    },\n    attributes: {\n        menu: '[role=\"menu\"]',\n        dropdowntoggle: '[data-toggle=\"dropdown\"]'\n    }\n};\n\nlet isTabListMenu = false;\n\n/**\n * Auto Collapse navigation items that wrap into a dropdown menu.\n *\n * @param {HTMLElement} menu The navbar container.\n */\nconst autoCollapse = menu => {\n\n    const maxHeight = menu.parentNode.offsetHeight + 1;\n\n    const moreDropdown = menu.querySelector(Selectors.regions.moredropdown);\n    const moreButton = menu.querySelector(Selectors.regions.morebutton);\n\n    // If the menu items wrap and the menu height is larger than the height of the\n    // parent then start pushing navlinks into the moreDropdown.\n    if (menu.offsetHeight > maxHeight) {\n        moreButton.classList.remove(Selectors.classes.hidden);\n\n        const menuNodes = Array.from(menu.children).reverse();\n        menuNodes.forEach(item => {\n            if (!item.classList.contains(Selectors.classes.dropdownmoremenu)) {\n                // After moving the menu items into the moreDropdown check again\n                // if the menu height is still larger then the height of the parent.\n                if (menu.offsetHeight > maxHeight) {\n                    const lastNode = menu.removeChild(item);\n                    // Move this node into the more dropdown menu.\n                    moveIntoMoreDropdown(menu, lastNode, true);\n                }\n            }\n        });\n    } else {\n        // If the menu height is smaller than the height of the parent, then try returning navlinks to the menu.\n        if ('children' in moreDropdown) {\n            // Iterate through the nodes within the more dropdown menu.\n            Array.from(moreDropdown.children).forEach(item => {\n                // Don't move the node to the more menu if it is explicitly defined that\n                // this node should be displayed in the more dropdown menu at all times.\n                if (menu.offsetHeight < maxHeight && item.dataset.forceintomoremenu !== 'true') {\n                    const lastNode = moreDropdown.removeChild(item);\n                    // Move this node from the more dropdown menu into the main section of the menu.\n                    moveOutOfMoreDropdown(menu, lastNode);\n                }\n            });\n            // If there are no more nodes in the more dropdown menu we can hide the moreButton.\n            if (Array.from(moreDropdown.children).length === 0) {\n                moreButton.classList.add(Selectors.classes.hidden);\n            }\n        }\n\n        if (menu.offsetHeight > maxHeight) {\n            autoCollapse(menu);\n        }\n    }\n    menu.parentNode.classList.add(Selectors.classes.observed);\n};\n\n/**\n * Move a node into the \"more\" dropdown menu.\n *\n * This method forces a given navigation node to be added and displayed within the \"more\" dropdown menu.\n *\n * @param {HTMLElement} menu The navbar moremenu.\n * @param {HTMLElement} navNode The navigation node.\n * @param {boolean} prepend Whether to prepend or append the node to the content in the more dropdown menu.\n */\nconst moveIntoMoreDropdown = (menu, navNode, prepend = false) => {\n    const moreDropdown = menu.querySelector(Selectors.regions.moredropdown);\n    const dropdownToggle = menu.querySelector(Selectors.attributes.dropdowntoggle);\n\n    const navLink = navNode.querySelector('.' + Selectors.classes.navlink);\n    // If there are navLinks that contain an active link in the moreDropdown\n    // make the dropdownToggle in the moreButton active.\n    if (navLink.classList.contains(Selectors.classes.active)) {\n        dropdownToggle.classList.add(Selectors.classes.active);\n        dropdownToggle.setAttribute('tabindex', '0');\n        navLink.setAttribute('tabindex', '-1'); // So that we don't have a single tabbable menu item.\n        // Remove aria-selected if the more menu is rendered as a tab list.\n        if (isTabListMenu) {\n            navLink.removeAttribute('aria-selected');\n        }\n        navLink.setAttribute('aria-current', 'true');\n    }\n\n    // This will become a menu item instead of a tab.\n    navLink.setAttribute('role', 'menuitem');\n\n    // Change the styling of the navLink to a dropdownitem and push it into\n    // the moreDropdown.\n    navLink.classList.remove(Selectors.classes.navlink);\n    navLink.classList.add(Selectors.classes.dropdownitem);\n    if (prepend) {\n        moreDropdown.prepend(navNode);\n    } else {\n        moreDropdown.append(navNode);\n    }\n};\n\n/**\n * Move a node out of the \"more\" dropdown menu.\n *\n * This method forces a given node from the \"more\" dropdown menu to be displayed in the main section of the menu.\n *\n * @param {HTMLElement} menu The navbar moremenu.\n * @param {HTMLElement} navNode The navigation node.\n */\nconst moveOutOfMoreDropdown = (menu, navNode) => {\n    const moreButton = menu.querySelector(Selectors.regions.morebutton);\n    const dropdownToggle = menu.querySelector(Selectors.attributes.dropdowntoggle);\n    const navLink = navNode.querySelector('.' + Selectors.classes.dropdownitem);\n\n    // If the more menu is rendered as a tab list,\n    // this will become a tab instead of a menuitem when moved out of the more menu dropdown.\n    if (isTabListMenu) {\n        navLink.setAttribute('role', 'tab');\n    }\n\n    // Stop displaying the active state on the dropdownToggle if\n    // the active navlink is removed.\n    if (navLink.classList.contains(Selectors.classes.active)) {\n        dropdownToggle.classList.remove(Selectors.classes.active);\n        dropdownToggle.setAttribute('tabindex', '-1');\n        navLink.setAttribute('tabindex', '0');\n        if (isTabListMenu) {\n            // Replace aria selection state when necessary.\n            navLink.removeAttribute('aria-current');\n            navLink.setAttribute('aria-selected', 'true');\n        }\n    }\n    navLink.classList.remove(Selectors.classes.dropdownitem);\n    navLink.classList.add(Selectors.classes.navlink);\n    menu.insertBefore(navNode, moreButton);\n};\n\n/**\n * Initialise the more menus.\n *\n * @param {HTMLElement} menu The navbar moremenu.\n */\nexport default menu => {\n    isTabListMenu = menu.getAttribute('role') === 'tablist';\n\n    // Select the first menu item if there's nothing initially selected.\n    const hash = window.location.hash;\n    if (!hash) {\n        const itemRole = isTabListMenu ? 'tab' : 'menuitem';\n        const menuListItem = menu.firstElementChild;\n        const roleSelector = `[role=${itemRole}]`;\n        const menuItem = menuListItem.querySelector(roleSelector);\n        const ariaAttribute = isTabListMenu ? 'aria-selected' : 'aria-current';\n        if (!menu.querySelector(`[${ariaAttribute}='true']`)) {\n            menuItem.setAttribute(ariaAttribute, 'true');\n            menuItem.setAttribute('tabindex', '0');\n        }\n    }\n\n    // Pre-populate the \"more\" dropdown menu with navigation nodes which are set to be displayed in this menu\n    // by default at all times.\n    if ('children' in menu) {\n        const moreButton = menu.querySelector(Selectors.regions.morebutton);\n        const menuNodes = Array.from(menu.children);\n        menuNodes.forEach((item) => {\n            if (!item.classList.contains(Selectors.classes.dropdownmoremenu) &&\n                    item.dataset.forceintomoremenu === 'true') {\n                // Append this node into the more dropdown menu.\n                moveIntoMoreDropdown(menu, item, false);\n                // After adding the node into the more dropdown menu, make sure that the more dropdown menu button\n                // is displayed.\n                if (moreButton.classList.contains(Selectors.classes.hidden)) {\n                    moreButton.classList.remove(Selectors.classes.hidden);\n                }\n            }\n        });\n    }\n    // Populate the more dropdown menu with additional nodes if necessary, depending on the current screen size.\n    autoCollapse(menu);\n    menu_navigation(menu);\n\n    // When the screen size changes make sure the menu still fits.\n    window.addEventListener('resize', () => {\n        autoCollapse(menu);\n        menu_navigation(menu);\n    });\n\n    const toggledropdown = e => {\n        const innerMenu = e.target.parentNode.querySelector(Selectors.attributes.menu);\n        if (innerMenu) {\n            innerMenu.classList.toggle('show');\n        }\n        e.stopPropagation();\n    };\n\n    // If there are dropdowns in the MoreMenu, add a new\n    // event listener to show the contents on click and prevent the\n    // moreMenu from closing.\n    $('.' + Selectors.classes.dropdownmoremenu).on('show.bs.dropdown', function() {\n        const moreDropdown = menu.querySelector(Selectors.regions.moredropdown);\n        moreDropdown.querySelectorAll('.dropdown').forEach((dropdown) => {\n            dropdown.removeEventListener('click', toggledropdown, true);\n            dropdown.addEventListener('click', toggledropdown, true);\n        });\n    });\n};\n"],"names":["_interopRequireDefault","obj","__esModule","default","_jquery","_menu_navigation","Selectors","regions","moredropdown","morebutton","classes","dropdownitem","dropdownmoremenu","hidden","active","nav","navlink","observed","attributes","menu","dropdowntoggle","isTabListMenu","autoCollapse","maxHeight","parentNode","offsetHeight","moreDropdown","querySelector","moreButton","classList","remove","Array","from","children","reverse","forEach","item","contains","lastNode","removeChild","moveIntoMoreDropdown","dataset","forceintomoremenu","moveOutOfMoreDropdown","length","add","navNode","prepend","arguments","undefined","dropdownToggle","navLink","setAttribute","removeAttribute","append","insertBefore","_exports","getAttribute","window","location","hash","itemRole","menuListItem","firstElementChild","roleSelector","concat","menuItem","ariaAttribute","menu_navigation","addEventListener","toggledropdown","e","innerMenu","target","toggle","stopPropagation","$","on","querySelectorAll","dropdown","removeEventListener"],"mappings":"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"}