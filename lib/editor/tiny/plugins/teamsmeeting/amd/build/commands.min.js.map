{"version":3,"file":"commands.min.js","sources":["../src/commands.js"],"sourcesContent":["/* eslint-disable max-len */\n// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Commands helper for the Moodle tiny_teamsmeeting plugin.\n *\n * @package     tiny_teamsmeeting\n * @copyright   2023 Enovation Solutions\n * @author      Oliwer Banach <oliwer.banach@enovation.ie>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getButtonImage} from 'editor_tiny/utils';\nimport {get_string as getString} from 'core/str';\nimport {component, createMeetingButtonName, icon} from './common';\nimport {getAppurl, getClientdomain, getLocaleValue, getMsession} from \"./options\";\nimport Ajax from 'core/ajax';\n\nconst dialogApiReference = { current: null };\n\n\n/**\n * Get the setup function for the buttons.\n *\n * This is performed in an async function which ultimately returns the registration function as the\n * Tiny.AddOnManager.Add() function does not support async functions.\n *\n * @returns {function} The registration function to call within the Plugin.add function.\n */\nexport const getSetup = async() => {\n    const [createMeetingButtonNameTitle, buttonImage] = await Promise.all([getString('pluginname', component), getButtonImage('icon', component)]);\n\n    return editor => {\n        editor.ui.registry.addIcon(icon, buttonImage.html);\n        editor.ui.registry.addToggleButton(createMeetingButtonName, {\n            icon,\n            tooltip: createMeetingButtonNameTitle,\n            onAction: openDialog(editor),\n            onSetup: toggleActiveState(editor)\n        });\n\n        window.addEventListener('message', event => {\n            if (event.data && event.data.action === 'meetingUrl') {\n                updateMeetingUrlInput(event.data.url);\n            }\n        });\n    };\n};\n\n/**\n * Opens a dialog for the editor to display a modal\n *\n * @param {Editor} editor - The editor object.\n * @returns {function} - The async function that opens the dialog.\n */\nconst openDialog = editor => async () => {\n    const [\n        modalTitle,\n        buttonPrimaryLabel,\n        buttonSecondaryLabel,\n        inputUrlLabel,\n        inputUrlPlaceholder,\n        checkboxNewWindowLabel,\n    ] = await Promise.all([\n        getString('tiny_modal_title', component),\n        getString('tiny_button_primary_label', component),\n        getString('tiny_button_secondary_label', component),\n        getString('tiny_input_url_label', component),\n        getString('tiny_input_url_placeholder', component),\n        getString('tiny_checkbox_new_window_label', component),\n    ]);\n\n    let iframeData = await getIframeData(editor);\n\n    dialogApiReference.current = editor.windowManager.open({\n        title: modalTitle,\n        body: {\n            type: 'panel',\n            items: [\n                { type: 'htmlpanel', html: `<iframe id=\"msteams-frame\" src=\"${iframeData.url}\" style=\"width: 100%; height: 480px\"></iframe>` },\n                { type: 'input', name: 'meetingUrl', label: inputUrlLabel, enabled: false, placeholder: inputUrlPlaceholder },\n                { type: 'checkbox', name: 'newWindowCheckbox', label: checkboxNewWindowLabel }\n            ]\n        },\n        buttons: [\n            { type: 'cancel', text: buttonSecondaryLabel },\n            { type: 'submit', text: buttonPrimaryLabel, primary: true }\n        ],\n        onSubmit: handleSubmitAction(editor)\n    });\n\n    dialogApiReference.current.setData({\n        meetingUrl: iframeData.meetingUrl,\n        newWindowCheckbox: iframeData.newWindow\n    });\n};\n\n/**\n * Handle the action of submitting the dialog.\n *\n * @param {Editor} editor The tinyMCE editor instance.\n */\nconst handleSubmitAction = (editor) => (api) => {\n    const data = api.getData();\n    const meetingUrl = data.meetingUrl;\n    const newWindow = data.newWindowCheckbox;\n    const targetType = newWindow ? '_blank' : '';\n\n    let selectedNode = editor.selection.getNode();\n    let linkNode = null;\n\n    if (selectedNode.nodeName === 'A' && selectedNode.id === 'tiny_meeting_link') {\n        linkNode = selectedNode;\n    } else if (selectedNode.parentNode?.nodeName === 'A' && selectedNode.parentNode?.id === 'tiny_meeting_link') {\n        linkNode = selectedNode.parentNode;\n    }\n\n    if (linkNode) {\n        editor.dom.setAttrib(linkNode, 'href', meetingUrl);\n        editor.dom.setAttrib(linkNode, 'target', targetType);\n    } else {\n        let selectedContent = editor.selection.getContent({ format: 'text' });\n        let contentToInsert = (selectedContent) ? selectedContent : meetingUrl;\n        editor.insertContent(`<a id=\"tiny_meeting_link\" href=\"${meetingUrl}\" target=\"${targetType}\">${contentToInsert}</a>`);\n    }\n    api.close();\n};\n\n/**\n * Updates the meeting URL in the dialog API.\n *\n * @param {string} url - The new meeting URL.\n */\nconst updateMeetingUrlInput = url => {\n    if (dialogApiReference.current) {\n        dialogApiReference.current.setData({ meetingUrl: url });\n    }\n};\n\n/**\n * Retrieves data for an iframe.\n *\n * @param {Editor} editor - The editor object.\n * @returns {{url: String, meetingUrl: String, newWindow: Boolean}} - An object containing information about the iframe.\n */\nconst getIframeData = async (editor) => {\n    let data = getMeetingUrlFormSelectedNode(editor);\n    if (data) {\n        const result = await Ajax.call([{ methodname: 'tiny_teamsmeeting_edit_meeting', args: { url: data['link'] } }])[0];\n        return {\n            url: result['url'],\n            meetingUrl: result['status'] ? data['link'] : '',\n            newWindow: data['target'] === '_blank'\n        };\n    }\n    return {\n        url: `${getAppurl(editor)}?url=${getClientdomain(editor)}&locale=${getLocaleValue(editor)}&msession=${getMsession(editor)}&editor=tiny`,\n        meetingUrl: '',\n        newWindow: false\n    };\n};\n\n/**\n * Retrieves the meeting URL and target from the selected node in the editor.\n *\n * @param {Editor} editor - The editor instance.\n * @returns {{link: String, target: String} | null} - The meeting URL and target, or null if not found.\n */\nconst getMeetingUrlFormSelectedNode = editor => {\n    let selectedNode = editor.selection.getNode();\n    let linkNode = null;\n\n    if (selectedNode.nodeName === 'A') {\n        linkNode = selectedNode;\n    } else if (selectedNode.parentNode?.nodeName === 'A') {\n        linkNode = selectedNode.parentNode;\n    }\n\n    if (linkNode?.id === 'tiny_meeting_link') {\n        return {\n            link: linkNode?.getAttribute('href'),\n            target: linkNode?.getAttribute('target')\n        };\n    }\n\n    return null;\n};\n\n/**\n * Toggles the active state of an editor.\n *\n * @param {Editor} editor - The editor instance.\n * @returns {Function} - A cleanup function to remove the event listener.\n * @throws {TypeError} - If editor parameter is not an instance of Editor.\n */\nconst toggleActiveState = editor => (buttonApi) => {\n    editor.on('NodeChange', () => handleNodeChange(editor, buttonApi));\n\n    return function cleanup () {\n        editor.on('NodeChange', () => handleNodeChange(editor, buttonApi));\n    };\n};\n\n/**\n * Handles the change in the selected node in the editor.\n *\n * @param {Object} editor - The editor object.\n * @param {Object} buttonApi - The button API object.\n *\n * @returns {void}\n */\nconst handleNodeChange = (editor, buttonApi) => {\n    const selectedNode = editor.selection.getNode();\n    const isActive = selectedNode.id === 'tiny_meeting_link' || selectedNode.parentNode?.id === 'tiny_meeting_link';\n\n    buttonApi.setActive(isActive);\n};"],"names":["dialogApiReference","current","async","createMeetingButtonNameTitle","buttonImage","Promise","all","component","editor","ui","registry","addIcon","icon","html","addToggleButton","createMeetingButtonName","tooltip","onAction","openDialog","onSetup","toggleActiveState","window","addEventListener","event","data","action","updateMeetingUrlInput","url","modalTitle","buttonPrimaryLabel","buttonSecondaryLabel","inputUrlLabel","inputUrlPlaceholder","checkboxNewWindowLabel","iframeData","getIframeData","windowManager","open","title","body","type","items","name","label","enabled","placeholder","buttons","text","primary","onSubmit","handleSubmitAction","setData","meetingUrl","newWindowCheckbox","newWindow","api","getData","targetType","selectedNode","selection","getNode","linkNode","nodeName","id","parentNode","dom","setAttrib","selectedContent","getContent","format","contentToInsert","insertContent","close","getMeetingUrlFormSelectedNode","result","Ajax","call","methodname","args","link","_linkNode2","getAttribute","target","_linkNode3","buttonApi","on","handleNodeChange","isActive","setActive"],"mappings":"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"}