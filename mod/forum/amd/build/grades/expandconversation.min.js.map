{"version":3,"file":"expandconversation.min.js","sources":["../../src/grades/expandconversation.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * This module handles the creation of a Modal that shows the user's post in context of the entire discussion.\n *\n * @module     mod_forum/grades/expandconversation\n * @copyright  2019 Mathew May <mathew.solutions>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport * as ForumSelectors from './grader/selectors';\nimport Repository from 'mod_forum/repository';\nimport {exception as showException} from \"core/notification\";\nimport Templates from 'core/templates';\nimport * as Modal from 'core/modal_factory';\nimport * as ModalEvents from 'core/modal_events';\n\n/**\n * Find the Node containing the gradable details from the provided node by searching up the tree.\n *\n * @param {HTMLElement} node\n * @returns {HTMLElement}\n */\nconst findGradableNode = node => node.closest(ForumSelectors.expandConversation);\n\n/**\n * Show the post in context in a modal.\n *\n * @param {HTMLElement} rootNode The button that has been clicked\n * @param {object} param\n * @param {bool} [param.focusOnClose=null]\n */\nconst showPostInContext = async(rootNode, {\n    focusOnClose = null,\n} = {}) => {\n    const postId = rootNode.dataset.postid;\n    const discussionId = rootNode.dataset.discussionid;\n    const discussionName = rootNode.dataset.name;\n    const experimentalDisplayMode = rootNode.dataset.experimentalDisplayMode == \"1\";\n\n    const [\n        allPosts,\n        modal,\n    ] = await Promise.all([\n        Repository.getDiscussionPosts(parseInt(discussionId)),\n        Modal.create({\n            title: discussionName,\n            large: true,\n            type: Modal.types.CANCEL\n        }),\n    ]);\n\n    const postsById = new Map(allPosts.posts.map(post => {\n        post.readonly = true;\n        post.hasreplies = false;\n        post.replies = [];\n        return [post.id, post];\n    }));\n\n    let posts = [];\n    allPosts.posts.forEach(post => {\n        if (post.parentid) {\n            const parent = postsById.get(post.parentid);\n            if (parent) {\n                post.parentauthorname = parent.author.fullname;\n                parent.hasreplies = true;\n                parent.replies.push(post);\n            } else {\n                posts.push(post);\n            }\n        } else {\n            posts.push(post);\n        }\n    });\n\n    // Handle hidden event.\n    modal.getRoot().on(ModalEvents.hidden, function() {\n        // Destroy when hidden.\n        modal.destroy();\n        try {\n            focusOnClose.focus();\n        } catch (e) {\n            // eslint-disable-line\n        }\n    });\n\n    modal.getRoot().on(ModalEvents.bodyRendered, () => {\n        const relevantPost = modal.getRoot()[0].querySelector(`#p${postId}`);\n        if (relevantPost) {\n            relevantPost.scrollIntoView({behavior: \"smooth\"});\n        }\n    });\n\n    modal.show();\n\n    // Note: We do not use await here because it messes with the Modal transitions.\n    const templatePromise = Templates.render('mod_forum/grades/grader/discussion/post_modal', {\n        posts,\n        experimentaldisplaymode: experimentalDisplayMode\n    });\n    modal.setBody(templatePromise);\n};\n\n/**\n * Register event listeners for the expand conversations button.\n *\n * @param {HTMLElement} rootNode The root to listen to.\n */\nexport const registerEventListeners = (rootNode) => {\n    rootNode.addEventListener('click', (e) => {\n        const rootNode = findGradableNode(e.target);\n\n        if (rootNode) {\n            e.preventDefault();\n\n            try {\n                showPostInContext(rootNode, {\n                    focusOnClose: e.target,\n                });\n            } catch (err) {\n                showException(err);\n            }\n        }\n    });\n};\n"],"names":["_interopRequireDefault","obj","__esModule","default","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","_interopRequireWildcard","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","ForumSelectors","_repository","_templates","Modal","ModalEvents","_exports","registerEventListeners","rootNode","addEventListener","e","target","closest","expandConversation","preventDefault","async","focusOnClose","arguments","length","undefined","postId","dataset","postid","discussionId","discussionid","discussionName","name","experimentalDisplayMode","allPosts","modal","Promise","all","Repository","getDiscussionPosts","parseInt","create","title","large","type","types","CANCEL","postsById","Map","posts","map","post","readonly","hasreplies","replies","id","forEach","parentid","parent","parentauthorname","author","fullname","push","getRoot","on","hidden","destroy","focus","bodyRendered","relevantPost","querySelector","concat","scrollIntoView","behavior","show","templatePromise","Templates","render","experimentaldisplaymode","setBody","showPostInContext","err","showException"],"mappings":"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"}