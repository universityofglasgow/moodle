{"version":3,"file":"saveaspreset.min.js","sources":["../src/saveaspreset.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript module for saving a database as a preset.\n *\n * @module      mod_data/saveaspreset\n * @copyright   2021 Mihail Geshoski <mihail@moodle.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport ModalForm from 'core_form/modalform';\nimport Notification from 'core/notification';\nimport {get_string as getString} from 'core/str';\n\nconst selectors = {\n    saveAsPresetButton: '[data-action=\"saveaspreset\"]',\n};\n\n/**\n * Initialize module.\n */\nexport const init = () => {\n\n    document.addEventListener('click', (event) => {\n        const saveAsPresetButton = event.target.closest(selectors.saveAsPresetButton);\n\n        if (!saveAsPresetButton) {\n            return;\n        }\n\n        event.preventDefault();\n        const modalForm = new ModalForm({\n            modalConfig: {\n                title: getString('savedataaspreset', 'mod_data'),\n            },\n            formClass: 'mod_data\\\\form\\\\save_as_preset',\n            args: {d: saveAsPresetButton.dataset.dataid},\n            saveButtonText: getString('save'),\n            returnFocus: saveAsPresetButton,\n        });\n\n        // Show a toast notification when the form is submitted.\n        modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, event => {\n            if (event.detail.result) {\n                window.location.reload();\n            } else {\n                Notification.addNotification({\n                    type: 'error',\n                    message:  event.detail.errors.join('<br>')\n                });\n            }\n        });\n\n        modalForm.show();\n    });\n};\n"],"names":["_interopRequireDefault","obj","__esModule","default","_modalform","_notification","selectors","_exports","init","document","addEventListener","event","saveAsPresetButton","target","closest","preventDefault","modalForm","ModalForm","modalConfig","title","getString","formClass","args","d","dataset","dataid","saveButtonText","get_string","returnFocus","events","FORM_SUBMITTED","detail","result","window","location","reload","Notification","addNotification","type","message","errors","join","show"],"mappings":"kJAwB6C,SAAAA,uBAAAC,KAAAA,OAAAA,KAAAA,IAAAC,WAAAD,IAAAE,CAAAA,QAAAF,IAAA;;;;;;;kFAD7CG,WAAAJ,uBAAAI,YACAC,cAAAL,uBAAAK,eAGA,MAAMC,6BACkB,+BAwCtBC,SAAAC,KAlCkBA,KAEhBC,SAASC,iBAAiB,SAAUC,QAChC,MAAMC,mBAAqBD,MAAME,OAAOC,QAAQR,8BAEhD,IAAKM,mBACD,OAGJD,MAAMI,iBACN,MAAMC,UAAY,IAAIC,WAAAA,QAAU,CAC5BC,YAAa,CACTC,OAAO,EAAAC,KAAAA,YAAU,mBAAoB,aAEzCC,UAAW,iCACXC,KAAM,CAACC,EAAGX,mBAAmBY,QAAQC,QACrCC,gBAAgB,EAAAN,KAASO,YAAC,QAC1BC,YAAahB,qBAIjBI,UAAUN,iBAAiBM,UAAUa,OAAOC,gBAAgBnB,QACpDA,MAAMoB,OAAOC,OACbC,OAAOC,SAASC,SAEhBC,cAAYjC,QAACkC,gBAAgB,CACzBC,KAAM,QACNC,QAAU5B,MAAMoB,OAAOS,OAAOC,KAAK,SAE3C,IAGJzB,UAAU0B,MAAM,GAClB,CACJ"}