{"version":3,"file":"lunr.min.js","sources":["../src/lunr.js"],"sourcesContent":["/**\n * moodle readme\n *\n * Lunrjs can be downloaded from https://github.com/olivernn/lunr.js. To update this library get the lunr.js file\n * from this project and replace the content below with the new content.\n */\n\n/**\n * lunr - http://lunrjs.com - A bit like Solr, but much smaller and not as bright - 2.3.9\n * Copyright (C) 2020 Oliver Nightingale\n * @license MIT\n */\n\n;(function(){\n\n/**\n * A convenience function for configuring and constructing\n * a new lunr Index.\n *\n * A lunr.Builder instance is created and the pipeline setup\n * with a trimmer, stop word filter and stemmer.\n *\n * This builder object is yielded to the configuration function\n * that is passed as a parameter, allowing the list of fields\n * and other builder parameters to be customised.\n *\n * All documents _must_ be added within the passed config function.\n *\n * @example\n * var idx = lunr(function () {\n *   this.field('title')\n *   this.field('body')\n *   this.ref('id')\n *\n *   documents.forEach(function (doc) {\n *     this.add(doc)\n *   }, this)\n * })\n *\n * @see {@link lunr.Builder}\n * @see {@link lunr.Pipeline}\n * @see {@link lunr.trimmer}\n * @see {@link lunr.stopWordFilter}\n * @see {@link lunr.stemmer}\n * @namespace {function} lunr\n */\nvar lunr = function (config) {\n  var builder = new lunr.Builder\n\n  builder.pipeline.add(\n    lunr.trimmer,\n    lunr.stopWordFilter,\n    lunr.stemmer\n  )\n\n  builder.searchPipeline.add(\n    lunr.stemmer\n  )\n\n  config.call(builder, builder)\n  return builder.build()\n}\n\nlunr.version = \"2.3.9\"\n/*!\n * lunr.utils\n * Copyright (C) 2020 Oliver Nightingale\n */\n\n/**\n * A namespace containing utils for the rest of the lunr library\n * @namespace lunr.utils\n */\nlunr.utils = {}\n\n/**\n * Print a warning message to the console.\n *\n * @param {String} message The message to be printed.\n * @memberOf lunr.utils\n * @function\n */\nlunr.utils.warn = (function (global) {\n  /* eslint-disable no-console */\n  return function (message) {\n    if (global.console && console.warn) {\n      console.warn(message)\n    }\n  }\n  /* eslint-enable no-console */\n})(this)\n\n/**\n * Convert an object to a string.\n *\n * In the case of `null` and `undefined` the function returns\n * the empty string, in all other cases the result of calling\n * `toString` on the passed object is returned.\n *\n * @param {Any} obj The object to convert to a string.\n * @return {String} string representation of the passed object.\n * @memberOf lunr.utils\n */\nlunr.utils.asString = function (obj) {\n  if (obj === void 0 || obj === null) {\n    return \"\"\n  } else {\n    return obj.toString()\n  }\n}\n\n/**\n * Clones an object.\n *\n * Will create a copy of an existing object such that any mutations\n * on the copy cannot affect the original.\n *\n * Only shallow objects are supported, passing a nested object to this\n * function will cause a TypeError.\n *\n * Objects with primitives, and arrays of primitives are supported.\n *\n * @param {Object} obj The object to clone.\n * @return {Object} a clone of the passed object.\n * @throws {TypeError} when a nested object is passed.\n * @memberOf Utils\n */\nlunr.utils.clone = function (obj) {\n  if (obj === null || obj === undefined) {\n    return obj\n  }\n\n  var clone = Object.create(null),\n      keys = Object.keys(obj)\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i],\n        val = obj[key]\n\n    if (Array.isArray(val)) {\n      clone[key] = val.slice()\n      continue\n    }\n\n    if (typeof val === 'string' ||\n        typeof val === 'number' ||\n        typeof val === 'boolean') {\n      clone[key] = val\n      continue\n    }\n\n    throw new TypeError(\"clone is not deep and does not support nested objects\")\n  }\n\n  return clone\n}\nlunr.FieldRef = function (docRef, fieldName, stringValue) {\n  this.docRef = docRef\n  this.fieldName = fieldName\n  this._stringValue = stringValue\n}\n\nlunr.FieldRef.joiner = \"/\"\n\nlunr.FieldRef.fromString = function (s) {\n  var n = s.indexOf(lunr.FieldRef.joiner)\n\n  if (n === -1) {\n    throw \"malformed field ref string\"\n  }\n\n  var fieldRef = s.slice(0, n),\n      docRef = s.slice(n + 1)\n\n  return new lunr.FieldRef (docRef, fieldRef, s)\n}\n\nlunr.FieldRef.prototype.toString = function () {\n  if (this._stringValue == undefined) {\n    this._stringValue = this.fieldName + lunr.FieldRef.joiner + this.docRef\n  }\n\n  return this._stringValue\n}\n/*!\n * lunr.Set\n * Copyright (C) 2020 Oliver Nightingale\n */\n\n/**\n * A lunr set.\n *\n * @constructor\n */\nlunr.Set = function (elements) {\n  this.elements = Object.create(null)\n\n  if (elements) {\n    this.length = elements.length\n\n    for (var i = 0; i < this.length; i++) {\n      this.elements[elements[i]] = true\n    }\n  } else {\n    this.length = 0\n  }\n}\n\n/**\n * A complete set that contains all elements.\n *\n * @static\n * @readonly\n * @type {lunr.Set}\n */\nlunr.Set.complete = {\n  intersect: function (other) {\n    return other\n  },\n\n  union: function () {\n    return this\n  },\n\n  contains: function () {\n    return true\n  }\n}\n\n/**\n * An empty set that contains no elements.\n *\n * @static\n * @readonly\n * @type {lunr.Set}\n */\nlunr.Set.empty = {\n  intersect: function () {\n    return this\n  },\n\n  union: function (other) {\n    return other\n  },\n\n  contains: function () {\n    return false\n  }\n}\n\n/**\n * Returns true if this set contains the specified object.\n *\n * @param {object} object - Object whose presence in this set is to be tested.\n * @returns {boolean} - True if this set contains the specified object.\n */\nlunr.Set.prototype.contains = function (object) {\n  return !!this.elements[object]\n}\n\n/**\n * Returns a new set containing only the elements that are present in both\n * this set and the specified set.\n *\n * @param {lunr.Set} other - set to intersect with this set.\n * @returns {lunr.Set} a new set that is the intersection of this and the specified set.\n */\n\nlunr.Set.prototype.intersect = function (other) {\n  var a, b, elements, intersection = []\n\n  if (other === lunr.Set.complete) {\n    return this\n  }\n\n  if (other === lunr.Set.empty) {\n    return other\n  }\n\n  if (this.length < other.length) {\n    a = this\n    b = other\n  } else {\n    a = other\n    b = this\n  }\n\n  elements = Object.keys(a.elements)\n\n  for (var i = 0; i < elements.length; i++) {\n    var element = elements[i]\n    if (element in b.elements) {\n      intersection.push(element)\n    }\n  }\n\n  return new lunr.Set (intersection)\n}\n\n/**\n * Returns a new set combining the elements of this and the specified set.\n *\n * @param {lunr.Set} other - set to union with this set.\n * @return {lunr.Set} a new set that is the union of this and the specified set.\n */\n\nlunr.Set.prototype.union = function (other) {\n  if (other === lunr.Set.complete) {\n    return lunr.Set.complete\n  }\n\n  if (other === lunr.Set.empty) {\n    return this\n  }\n\n  return new lunr.Set(Object.keys(this.elements).concat(Object.keys(other.elements)))\n}\n/**\n * A function to calculate the inverse document frequency for\n * a posting. This is shared between the builder and the index\n *\n * @private\n * @param {object} posting - The posting for a given term\n * @param {number} documentCount - The total number of documents.\n */\nlunr.idf = function (posting, documentCount) {\n  var documentsWithTerm = 0\n\n  for (var fieldName in posting) {\n    if (fieldName == '_index') continue // Ignore the term index, its not a field\n    documentsWithTerm += Object.keys(posting[fieldName]).length\n  }\n\n  var x = (documentCount - documentsWithTerm + 0.5) / (documentsWithTerm + 0.5)\n\n  return Math.log(1 + Math.abs(x))\n}\n\n/**\n * A token wraps a string representation of a token\n * as it is passed through the text processing pipeline.\n *\n * @constructor\n * @param {string} [str=''] - The string token being wrapped.\n * @param {object} [metadata={}] - Metadata associated with this token.\n */\nlunr.Token = function (str, metadata) {\n  this.str = str || \"\"\n  this.metadata = metadata || {}\n}\n\n/**\n * Returns the token string that is being wrapped by this object.\n *\n * @returns {string}\n */\nlunr.Token.prototype.toString = function () {\n  return this.str\n}\n\n/**\n * A token update function is used when updating or optionally\n * when cloning a token.\n *\n * @callback lunr.Token~updateFunction\n * @param {string} str - The string representation of the token.\n * @param {Object} metadata - All metadata associated with this token.\n */\n\n/**\n * Applies the given function to the wrapped string token.\n *\n * @example\n * token.update(function (str, metadata) {\n *   return str.toUpperCase()\n * })\n *\n * @param {lunr.Token~updateFunction} fn - A function to apply to the token string.\n * @returns {lunr.Token}\n */\nlunr.Token.prototype.update = function (fn) {\n  this.str = fn(this.str, this.metadata)\n  return this\n}\n\n/**\n * Creates a clone of this token. Optionally a function can be\n * applied to the cloned token.\n *\n * @param {lunr.Token~updateFunction} [fn] - An optional function to apply to the cloned token.\n * @returns {lunr.Token}\n */\nlunr.Token.prototype.clone = function (fn) {\n  fn = fn || function (s) { return s }\n  return new lunr.Token (fn(this.str, this.metadata), this.metadata)\n}\n/*!\n * lunr.tokenizer\n * Copyright (C) 2020 Oliver Nightingale\n */\n\n/**\n * A function for splitting a string into tokens ready to be inserted into\n * the search index. Uses `lunr.tokenizer.separator` to split strings, change\n * the value of this property to change how strings are split into tokens.\n *\n * This tokenizer will convert its parameter to a string by calling `toString` and\n * then will split this string on the character in `lunr.tokenizer.separator`.\n * Arrays will have their elements converted to strings and wrapped in a lunr.Token.\n *\n * Optional metadata can be passed to the tokenizer, this metadata will be cloned and\n * added as metadata to every token that is created from the object to be tokenized.\n *\n * @static\n * @param {?(string|object|object[])} obj - The object to convert into tokens\n * @param {?object} metadata - Optional metadata to associate with every token\n * @returns {lunr.Token[]}\n * @see {@link lunr.Pipeline}\n */\nlunr.tokenizer = function (obj, metadata) {\n  if (obj == null || obj == undefined) {\n    return []\n  }\n\n  if (Array.isArray(obj)) {\n    return obj.map(function (t) {\n      return new lunr.Token(\n        lunr.utils.asString(t).toLowerCase(),\n        lunr.utils.clone(metadata)\n      )\n    })\n  }\n\n  var str = obj.toString().toLowerCase(),\n      len = str.length,\n      tokens = []\n\n  for (var sliceEnd = 0, sliceStart = 0; sliceEnd <= len; sliceEnd++) {\n    var char = str.charAt(sliceEnd),\n        sliceLength = sliceEnd - sliceStart\n\n    if ((char.match(lunr.tokenizer.separator) || sliceEnd == len)) {\n\n      if (sliceLength > 0) {\n        var tokenMetadata = lunr.utils.clone(metadata) || {}\n        tokenMetadata[\"position\"] = [sliceStart, sliceLength]\n        tokenMetadata[\"index\"] = tokens.length\n\n        tokens.push(\n          new lunr.Token (\n            str.slice(sliceStart, sliceEnd),\n            tokenMetadata\n          )\n        )\n      }\n\n      sliceStart = sliceEnd + 1\n    }\n\n  }\n\n  return tokens\n}\n\n/**\n * The separator used to split a string into tokens. Override this property to change the behaviour of\n * `lunr.tokenizer` behaviour when tokenizing strings. By default this splits on whitespace and hyphens.\n *\n * @static\n * @see lunr.tokenizer\n */\nlunr.tokenizer.separator = /[\\s\\-]+/\n/*!\n * lunr.Pipeline\n * Copyright (C) 2020 Oliver Nightingale\n */\n\n/**\n * lunr.Pipelines maintain an ordered list of functions to be applied to all\n * tokens in documents entering the search index and queries being ran against\n * the index.\n *\n * An instance of lunr.Index created with the lunr shortcut will contain a\n * pipeline with a stop word filter and an English language stemmer. Extra\n * functions can be added before or after either of these functions or these\n * default functions can be removed.\n *\n * When run the pipeline will call each function in turn, passing a token, the\n * index of that token in the original list of all tokens and finally a list of\n * all the original tokens.\n *\n * The output of functions in the pipeline will be passed to the next function\n * in the pipeline. To exclude a token from entering the index the function\n * should return undefined, the rest of the pipeline will not be called with\n * this token.\n *\n * For serialisation of pipelines to work, all functions used in an instance of\n * a pipeline should be registered with lunr.Pipeline. Registered functions can\n * then be loaded. If trying to load a serialised pipeline that uses functions\n * that are not registered an error will be thrown.\n *\n * If not planning on serialising the pipeline then registering pipeline functions\n * is not necessary.\n *\n * @constructor\n */\nlunr.Pipeline = function () {\n  this._stack = []\n}\n\nlunr.Pipeline.registeredFunctions = Object.create(null)\n\n/**\n * A pipeline function maps lunr.Token to lunr.Token. A lunr.Token contains the token\n * string as well as all known metadata. A pipeline function can mutate the token string\n * or mutate (or add) metadata for a given token.\n *\n * A pipeline function can indicate that the passed token should be discarded by returning\n * null, undefined or an empty string. This token will not be passed to any downstream pipeline\n * functions and will not be added to the index.\n *\n * Multiple tokens can be returned by returning an array of tokens. Each token will be passed\n * to any downstream pipeline functions and all will returned tokens will be added to the index.\n *\n * Any number of pipeline functions may be chained together using a lunr.Pipeline.\n *\n * @interface lunr.PipelineFunction\n * @param {lunr.Token} token - A token from the document being processed.\n * @param {number} i - The index of this token in the complete list of tokens for this document/field.\n * @param {lunr.Token[]} tokens - All tokens for this document/field.\n * @returns {(?lunr.Token|lunr.Token[])}\n */\n\n/**\n * Register a function with the pipeline.\n *\n * Functions that are used in the pipeline should be registered if the pipeline\n * needs to be serialised, or a serialised pipeline needs to be loaded.\n *\n * Registering a function does not add it to a pipeline, functions must still be\n * added to instances of the pipeline for them to be used when running a pipeline.\n *\n * @param {lunr.PipelineFunction} fn - The function to check for.\n * @param {String} label - The label to register this function with\n */\nlunr.Pipeline.registerFunction = function (fn, label) {\n  if (label in this.registeredFunctions) {\n    lunr.utils.warn('Overwriting existing registered function: ' + label)\n  }\n\n  fn.label = label\n  lunr.Pipeline.registeredFunctions[fn.label] = fn\n}\n\n/**\n * Warns if the function is not registered as a Pipeline function.\n *\n * @param {lunr.PipelineFunction} fn - The function to check for.\n * @private\n */\nlunr.Pipeline.warnIfFunctionNotRegistered = function (fn) {\n  var isRegistered = fn.label && (fn.label in this.registeredFunctions)\n\n  if (!isRegistered) {\n    lunr.utils.warn('Function is not registered with pipeline. This may cause problems when serialising the index.\\n', fn)\n  }\n}\n\n/**\n * Loads a previously serialised pipeline.\n *\n * All functions to be loaded must already be registered with lunr.Pipeline.\n * If any function from the serialised data has not been registered then an\n * error will be thrown.\n *\n * @param {Object} serialised - The serialised pipeline to load.\n * @returns {lunr.Pipeline}\n */\nlunr.Pipeline.load = function (serialised) {\n  var pipeline = new lunr.Pipeline\n\n  serialised.forEach(function (fnName) {\n    var fn = lunr.Pipeline.registeredFunctions[fnName]\n\n    if (fn) {\n      pipeline.add(fn)\n    } else {\n      throw new Error('Cannot load unregistered function: ' + fnName)\n    }\n  })\n\n  return pipeline\n}\n\n/**\n * Adds new functions to the end of the pipeline.\n *\n * Logs a warning if the function has not been registered.\n *\n * @param {lunr.PipelineFunction[]} functions - Any number of functions to add to the pipeline.\n */\nlunr.Pipeline.prototype.add = function () {\n  var fns = Array.prototype.slice.call(arguments)\n\n  fns.forEach(function (fn) {\n    lunr.Pipeline.warnIfFunctionNotRegistered(fn)\n    this._stack.push(fn)\n  }, this)\n}\n\n/**\n * Adds a single function after a function that already exists in the\n * pipeline.\n *\n * Logs a warning if the function has not been registered.\n *\n * @param {lunr.PipelineFunction} existingFn - A function that already exists in the pipeline.\n * @param {lunr.PipelineFunction} newFn - The new function to add to the pipeline.\n */\nlunr.Pipeline.prototype.after = function (existingFn, newFn) {\n  lunr.Pipeline.warnIfFunctionNotRegistered(newFn)\n\n  var pos = this._stack.indexOf(existingFn)\n  if (pos == -1) {\n    throw new Error('Cannot find existingFn')\n  }\n\n  pos = pos + 1\n  this._stack.splice(pos, 0, newFn)\n}\n\n/**\n * Adds a single function before a function that already exists in the\n * pipeline.\n *\n * Logs a warning if the function has not been registered.\n *\n * @param {lunr.PipelineFunction} existingFn - A function that already exists in the pipeline.\n * @param {lunr.PipelineFunction} newFn - The new function to add to the pipeline.\n */\nlunr.Pipeline.prototype.before = function (existingFn, newFn) {\n  lunr.Pipeline.warnIfFunctionNotRegistered(newFn)\n\n  var pos = this._stack.indexOf(existingFn)\n  if (pos == -1) {\n    throw new Error('Cannot find existingFn')\n  }\n\n  this._stack.splice(pos, 0, newFn)\n}\n\n/**\n * Removes a function from the pipeline.\n *\n * @param {lunr.PipelineFunction} fn The function to remove from the pipeline.\n */\nlunr.Pipeline.prototype.remove = function (fn) {\n  var pos = this._stack.indexOf(fn)\n  if (pos == -1) {\n    return\n  }\n\n  this._stack.splice(pos, 1)\n}\n\n/**\n * Runs the current list of functions that make up the pipeline against the\n * passed tokens.\n *\n * @param {Array} tokens The tokens to run through the pipeline.\n * @returns {Array}\n */\nlunr.Pipeline.prototype.run = function (tokens) {\n  var stackLength = this._stack.length\n\n  for (var i = 0; i < stackLength; i++) {\n    var fn = this._stack[i]\n    var memo = []\n\n    for (var j = 0; j < tokens.length; j++) {\n      var result = fn(tokens[j], j, tokens)\n\n      if (result === null || result === void 0 || result === '') continue\n\n      if (Array.isArray(result)) {\n        for (var k = 0; k < result.length; k++) {\n          memo.push(result[k])\n        }\n      } else {\n        memo.push(result)\n      }\n    }\n\n    tokens = memo\n  }\n\n  return tokens\n}\n\n/**\n * Convenience method for passing a string through a pipeline and getting\n * strings out. This method takes care of wrapping the passed string in a\n * token and mapping the resulting tokens back to strings.\n *\n * @param {string} str - The string to pass through the pipeline.\n * @param {?object} metadata - Optional metadata to associate with the token\n * passed to the pipeline.\n * @returns {string[]}\n */\nlunr.Pipeline.prototype.runString = function (str, metadata) {\n  var token = new lunr.Token (str, metadata)\n\n  return this.run([token]).map(function (t) {\n    return t.toString()\n  })\n}\n\n/**\n * Resets the pipeline by removing any existing processors.\n *\n */\nlunr.Pipeline.prototype.reset = function () {\n  this._stack = []\n}\n\n/**\n * Returns a representation of the pipeline ready for serialisation.\n *\n * Logs a warning if the function has not been registered.\n *\n * @returns {Array}\n */\nlunr.Pipeline.prototype.toJSON = function () {\n  return this._stack.map(function (fn) {\n    lunr.Pipeline.warnIfFunctionNotRegistered(fn)\n\n    return fn.label\n  })\n}\n/*!\n * lunr.Vector\n * Copyright (C) 2020 Oliver Nightingale\n */\n\n/**\n * A vector is used to construct the vector space of documents and queries. These\n * vectors support operations to determine the similarity between two documents or\n * a document and a query.\n *\n * Normally no parameters are required for initializing a vector, but in the case of\n * loading a previously dumped vector the raw elements can be provided to the constructor.\n *\n * For performance reasons vectors are implemented with a flat array, where an elements\n * index is immediately followed by its value. E.g. [index, value, index, value]. This\n * allows the underlying array to be as sparse as possible and still offer decent\n * performance when being used for vector calculations.\n *\n * @constructor\n * @param {Number[]} [elements] - The flat list of element index and element value pairs.\n */\nlunr.Vector = function (elements) {\n  this._magnitude = 0\n  this.elements = elements || []\n}\n\n\n/**\n * Calculates the position within the vector to insert a given index.\n *\n * This is used internally by insert and upsert. If there are duplicate indexes then\n * the position is returned as if the value for that index were to be updated, but it\n * is the callers responsibility to check whether there is a duplicate at that index\n *\n * @param {Number} insertIdx - The index at which the element should be inserted.\n * @returns {Number}\n */\nlunr.Vector.prototype.positionForIndex = function (index) {\n  // For an empty vector the tuple can be inserted at the beginning\n  if (this.elements.length == 0) {\n    return 0\n  }\n\n  var start = 0,\n      end = this.elements.length / 2,\n      sliceLength = end - start,\n      pivotPoint = Math.floor(sliceLength / 2),\n      pivotIndex = this.elements[pivotPoint * 2]\n\n  while (sliceLength > 1) {\n    if (pivotIndex < index) {\n      start = pivotPoint\n    }\n\n    if (pivotIndex > index) {\n      end = pivotPoint\n    }\n\n    if (pivotIndex == index) {\n      break\n    }\n\n    sliceLength = end - start\n    pivotPoint = start + Math.floor(sliceLength / 2)\n    pivotIndex = this.elements[pivotPoint * 2]\n  }\n\n  if (pivotIndex == index) {\n    return pivotPoint * 2\n  }\n\n  if (pivotIndex > index) {\n    return pivotPoint * 2\n  }\n\n  if (pivotIndex < index) {\n    return (pivotPoint + 1) * 2\n  }\n}\n\n/**\n * Inserts an element at an index within the vector.\n *\n * Does not allow duplicates, will throw an error if there is already an entry\n * for this index.\n *\n * @param {Number} insertIdx - The index at which the element should be inserted.\n * @param {Number} val - The value to be inserted into the vector.\n */\nlunr.Vector.prototype.insert = function (insertIdx, val) {\n  this.upsert(insertIdx, val, function () {\n    throw \"duplicate index\"\n  })\n}\n\n/**\n * Inserts or updates an existing index within the vector.\n *\n * @param {Number} insertIdx - The index at which the element should be inserted.\n * @param {Number} val - The value to be inserted into the vector.\n * @param {function} fn - A function that is called for updates, the existing value and the\n * requested value are passed as arguments\n */\nlunr.Vector.prototype.upsert = function (insertIdx, val, fn) {\n  this._magnitude = 0\n  var position = this.positionForIndex(insertIdx)\n\n  if (this.elements[position] == insertIdx) {\n    this.elements[position + 1] = fn(this.elements[position + 1], val)\n  } else {\n    this.elements.splice(position, 0, insertIdx, val)\n  }\n}\n\n/**\n * Calculates the magnitude of this vector.\n *\n * @returns {Number}\n */\nlunr.Vector.prototype.magnitude = function () {\n  if (this._magnitude) return this._magnitude\n\n  var sumOfSquares = 0,\n      elementsLength = this.elements.length\n\n  for (var i = 1; i < elementsLength; i += 2) {\n    var val = this.elements[i]\n    sumOfSquares += val * val\n  }\n\n  return this._magnitude = Math.sqrt(sumOfSquares)\n}\n\n/**\n * Calculates the dot product of this vector and another vector.\n *\n * @param {lunr.Vector} otherVector - The vector to compute the dot product with.\n * @returns {Number}\n */\nlunr.Vector.prototype.dot = function (otherVector) {\n  var dotProduct = 0,\n      a = this.elements, b = otherVector.elements,\n      aLen = a.length, bLen = b.length,\n      aVal = 0, bVal = 0,\n      i = 0, j = 0\n\n  while (i < aLen && j < bLen) {\n    aVal = a[i], bVal = b[j]\n    if (aVal < bVal) {\n      i += 2\n    } else if (aVal > bVal) {\n      j += 2\n    } else if (aVal == bVal) {\n      dotProduct += a[i + 1] * b[j + 1]\n      i += 2\n      j += 2\n    }\n  }\n\n  return dotProduct\n}\n\n/**\n * Calculates the similarity between this vector and another vector.\n *\n * @param {lunr.Vector} otherVector - The other vector to calculate the\n * similarity with.\n * @returns {Number}\n */\nlunr.Vector.prototype.similarity = function (otherVector) {\n  return this.dot(otherVector) / this.magnitude() || 0\n}\n\n/**\n * Converts the vector to an array of the elements within the vector.\n *\n * @returns {Number[]}\n */\nlunr.Vector.prototype.toArray = function () {\n  var output = new Array (this.elements.length / 2)\n\n  for (var i = 1, j = 0; i < this.elements.length; i += 2, j++) {\n    output[j] = this.elements[i]\n  }\n\n  return output\n}\n\n/**\n * A JSON serializable representation of the vector.\n *\n * @returns {Number[]}\n */\nlunr.Vector.prototype.toJSON = function () {\n  return this.elements\n}\n/* eslint-disable */\n/*!\n * lunr.stemmer\n * Copyright (C) 2020 Oliver Nightingale\n * Includes code from - http://tartarus.org/~martin/PorterStemmer/js.txt\n */\n\n/**\n * lunr.stemmer is an english language stemmer, this is a JavaScript\n * implementation of the PorterStemmer taken from http://tartarus.org/~martin\n *\n * @static\n * @implements {lunr.PipelineFunction}\n * @param {lunr.Token} token - The string to stem\n * @returns {lunr.Token}\n * @see {@link lunr.Pipeline}\n * @function\n */\nlunr.stemmer = (function(){\n  var step2list = {\n      \"ational\" : \"ate\",\n      \"tional\" : \"tion\",\n      \"enci\" : \"ence\",\n      \"anci\" : \"ance\",\n      \"izer\" : \"ize\",\n      \"bli\" : \"ble\",\n      \"alli\" : \"al\",\n      \"entli\" : \"ent\",\n      \"eli\" : \"e\",\n      \"ousli\" : \"ous\",\n      \"ization\" : \"ize\",\n      \"ation\" : \"ate\",\n      \"ator\" : \"ate\",\n      \"alism\" : \"al\",\n      \"iveness\" : \"ive\",\n      \"fulness\" : \"ful\",\n      \"ousness\" : \"ous\",\n      \"aliti\" : \"al\",\n      \"iviti\" : \"ive\",\n      \"biliti\" : \"ble\",\n      \"logi\" : \"log\"\n    },\n\n    step3list = {\n      \"icate\" : \"ic\",\n      \"ative\" : \"\",\n      \"alize\" : \"al\",\n      \"iciti\" : \"ic\",\n      \"ical\" : \"ic\",\n      \"ful\" : \"\",\n      \"ness\" : \"\"\n    },\n\n    c = \"[^aeiou]\",          // consonant\n    v = \"[aeiouy]\",          // vowel\n    C = c + \"[^aeiouy]*\",    // consonant sequence\n    V = v + \"[aeiou]*\",      // vowel sequence\n\n    mgr0 = \"^(\" + C + \")?\" + V + C,               // [C]VC... is m>0\n    meq1 = \"^(\" + C + \")?\" + V + C + \"(\" + V + \")?$\",  // [C]VC[V] is m=1\n    mgr1 = \"^(\" + C + \")?\" + V + C + V + C,       // [C]VCVC... is m>1\n    s_v = \"^(\" + C + \")?\" + v;                   // vowel in stem\n\n  var re_mgr0 = new RegExp(mgr0);\n  var re_mgr1 = new RegExp(mgr1);\n  var re_meq1 = new RegExp(meq1);\n  var re_s_v = new RegExp(s_v);\n\n  var re_1a = /^(.+?)(ss|i)es$/;\n  var re2_1a = /^(.+?)([^s])s$/;\n  var re_1b = /^(.+?)eed$/;\n  var re2_1b = /^(.+?)(ed|ing)$/;\n  var re_1b_2 = /.$/;\n  var re2_1b_2 = /(at|bl|iz)$/;\n  var re3_1b_2 = new RegExp(\"([^aeiouylsz])\\\\1$\");\n  var re4_1b_2 = new RegExp(\"^\" + C + v + \"[^aeiouwxy]$\");\n\n  var re_1c = /^(.+?[^aeiou])y$/;\n  var re_2 = /^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/;\n\n  var re_3 = /^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/;\n\n  var re_4 = /^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/;\n  var re2_4 = /^(.+?)(s|t)(ion)$/;\n\n  var re_5 = /^(.+?)e$/;\n  var re_5_1 = /ll$/;\n  var re3_5 = new RegExp(\"^\" + C + v + \"[^aeiouwxy]$\");\n\n  var porterStemmer = function porterStemmer(w) {\n    var stem,\n      suffix,\n      firstch,\n      re,\n      re2,\n      re3,\n      re4;\n\n    if (w.length < 3) { return w; }\n\n    firstch = w.substr(0,1);\n    if (firstch == \"y\") {\n      w = firstch.toUpperCase() + w.substr(1);\n    }\n\n    // Step 1a\n    re = re_1a\n    re2 = re2_1a;\n\n    if (re.test(w)) { w = w.replace(re,\"$1$2\"); }\n    else if (re2.test(w)) { w = w.replace(re2,\"$1$2\"); }\n\n    // Step 1b\n    re = re_1b;\n    re2 = re2_1b;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      re = re_mgr0;\n      if (re.test(fp[1])) {\n        re = re_1b_2;\n        w = w.replace(re,\"\");\n      }\n    } else if (re2.test(w)) {\n      var fp = re2.exec(w);\n      stem = fp[1];\n      re2 = re_s_v;\n      if (re2.test(stem)) {\n        w = stem;\n        re2 = re2_1b_2;\n        re3 = re3_1b_2;\n        re4 = re4_1b_2;\n        if (re2.test(w)) { w = w + \"e\"; }\n        else if (re3.test(w)) { re = re_1b_2; w = w.replace(re,\"\"); }\n        else if (re4.test(w)) { w = w + \"e\"; }\n      }\n    }\n\n    // Step 1c - replace suffix y or Y by i if preceded by a non-vowel which is not the first letter of the word (so cry -> cri, by -> by, say -> say)\n    re = re_1c;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      w = stem + \"i\";\n    }\n\n    // Step 2\n    re = re_2;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      suffix = fp[2];\n      re = re_mgr0;\n      if (re.test(stem)) {\n        w = stem + step2list[suffix];\n      }\n    }\n\n    // Step 3\n    re = re_3;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      suffix = fp[2];\n      re = re_mgr0;\n      if (re.test(stem)) {\n        w = stem + step3list[suffix];\n      }\n    }\n\n    // Step 4\n    re = re_4;\n    re2 = re2_4;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      re = re_mgr1;\n      if (re.test(stem)) {\n        w = stem;\n      }\n    } else if (re2.test(w)) {\n      var fp = re2.exec(w);\n      stem = fp[1] + fp[2];\n      re2 = re_mgr1;\n      if (re2.test(stem)) {\n        w = stem;\n      }\n    }\n\n    // Step 5\n    re = re_5;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      re = re_mgr1;\n      re2 = re_meq1;\n      re3 = re3_5;\n      if (re.test(stem) || (re2.test(stem) && !(re3.test(stem)))) {\n        w = stem;\n      }\n    }\n\n    re = re_5_1;\n    re2 = re_mgr1;\n    if (re.test(w) && re2.test(w)) {\n      re = re_1b_2;\n      w = w.replace(re,\"\");\n    }\n\n    // and turn initial Y back to y\n\n    if (firstch == \"y\") {\n      w = firstch.toLowerCase() + w.substr(1);\n    }\n\n    return w;\n  };\n\n  return function (token) {\n    return token.update(porterStemmer);\n  }\n})();\n\nlunr.Pipeline.registerFunction(lunr.stemmer, 'stemmer')\n/*!\n * lunr.stopWordFilter\n * Copyright (C) 2020 Oliver Nightingale\n */\n\n/**\n * lunr.generateStopWordFilter builds a stopWordFilter function from the provided\n * list of stop words.\n *\n * The built in lunr.stopWordFilter is built using this generator and can be used\n * to generate custom stopWordFilters for applications or non English languages.\n *\n * @function\n * @param {Array} token The token to pass through the filter\n * @returns {lunr.PipelineFunction}\n * @see lunr.Pipeline\n * @see lunr.stopWordFilter\n */\nlunr.generateStopWordFilter = function (stopWords) {\n  var words = stopWords.reduce(function (memo, stopWord) {\n    memo[stopWord] = stopWord\n    return memo\n  }, {})\n\n  return function (token) {\n    if (token && words[token.toString()] !== token.toString()) return token\n  }\n}\n\n/**\n * lunr.stopWordFilter is an English language stop word list filter, any words\n * contained in the list will not be passed through the filter.\n *\n * This is intended to be used in the Pipeline. If the token does not pass the\n * filter then undefined will be returned.\n *\n * @function\n * @implements {lunr.PipelineFunction}\n * @params {lunr.Token} token - A token to check for being a stop word.\n * @returns {lunr.Token}\n * @see {@link lunr.Pipeline}\n */\nlunr.stopWordFilter = lunr.generateStopWordFilter([\n  'a',\n  'able',\n  'about',\n  'across',\n  'after',\n  'all',\n  'almost',\n  'also',\n  'am',\n  'among',\n  'an',\n  'and',\n  'any',\n  'are',\n  'as',\n  'at',\n  'be',\n  'because',\n  'been',\n  'but',\n  'by',\n  'can',\n  'cannot',\n  'could',\n  'dear',\n  'did',\n  'do',\n  'does',\n  'either',\n  'else',\n  'ever',\n  'every',\n  'for',\n  'from',\n  'get',\n  'got',\n  'had',\n  'has',\n  'have',\n  'he',\n  'her',\n  'hers',\n  'him',\n  'his',\n  'how',\n  'however',\n  'i',\n  'if',\n  'in',\n  'into',\n  'is',\n  'it',\n  'its',\n  'just',\n  'least',\n  'let',\n  'like',\n  'likely',\n  'may',\n  'me',\n  'might',\n  'most',\n  'must',\n  'my',\n  'neither',\n  'no',\n  'nor',\n  'not',\n  'of',\n  'off',\n  'often',\n  'on',\n  'only',\n  'or',\n  'other',\n  'our',\n  'own',\n  'rather',\n  'said',\n  'say',\n  'says',\n  'she',\n  'should',\n  'since',\n  'so',\n  'some',\n  'than',\n  'that',\n  'the',\n  'their',\n  'them',\n  'then',\n  'there',\n  'these',\n  'they',\n  'this',\n  'tis',\n  'to',\n  'too',\n  'twas',\n  'us',\n  'wants',\n  'was',\n  'we',\n  'were',\n  'what',\n  'when',\n  'where',\n  'which',\n  'while',\n  'who',\n  'whom',\n  'why',\n  'will',\n  'with',\n  'would',\n  'yet',\n  'you',\n  'your'\n])\n\nlunr.Pipeline.registerFunction(lunr.stopWordFilter, 'stopWordFilter')\n/*!\n * lunr.trimmer\n * Copyright (C) 2020 Oliver Nightingale\n */\n\n/**\n * lunr.trimmer is a pipeline function for trimming non word\n * characters from the beginning and end of tokens before they\n * enter the index.\n *\n * This implementation may not work correctly for non latin\n * characters and should either be removed or adapted for use\n * with languages with non-latin characters.\n *\n * @static\n * @implements {lunr.PipelineFunction}\n * @param {lunr.Token} token The token to pass through the filter\n * @returns {lunr.Token}\n * @see lunr.Pipeline\n */\nlunr.trimmer = function (token) {\n  return token.update(function (s) {\n    return s.replace(/^\\W+/, '').replace(/\\W+$/, '')\n  })\n}\n\nlunr.Pipeline.registerFunction(lunr.trimmer, 'trimmer')\n/*!\n * lunr.TokenSet\n * Copyright (C) 2020 Oliver Nightingale\n */\n\n/**\n * A token set is used to store the unique list of all tokens\n * within an index. Token sets are also used to represent an\n * incoming query to the index, this query token set and index\n * token set are then intersected to find which tokens to look\n * up in the inverted index.\n *\n * A token set can hold multiple tokens, as in the case of the\n * index token set, or it can hold a single token as in the\n * case of a simple query token set.\n *\n * Additionally token sets are used to perform wildcard matching.\n * Leading, contained and trailing wildcards are supported, and\n * from this edit distance matching can also be provided.\n *\n * Token sets are implemented as a minimal finite state automata,\n * where both common prefixes and suffixes are shared between tokens.\n * This helps to reduce the space used for storing the token set.\n *\n * @constructor\n */\nlunr.TokenSet = function () {\n  this.final = false\n  this.edges = {}\n  this.id = lunr.TokenSet._nextId\n  lunr.TokenSet._nextId += 1\n}\n\n/**\n * Keeps track of the next, auto increment, identifier to assign\n * to a new tokenSet.\n *\n * TokenSets require a unique identifier to be correctly minimised.\n *\n * @private\n */\nlunr.TokenSet._nextId = 1\n\n/**\n * Creates a TokenSet instance from the given sorted array of words.\n *\n * @param {String[]} arr - A sorted array of strings to create the set from.\n * @returns {lunr.TokenSet}\n * @throws Will throw an error if the input array is not sorted.\n */\nlunr.TokenSet.fromArray = function (arr) {\n  var builder = new lunr.TokenSet.Builder\n\n  for (var i = 0, len = arr.length; i < len; i++) {\n    builder.insert(arr[i])\n  }\n\n  builder.finish()\n  return builder.root\n}\n\n/**\n * Creates a token set from a query clause.\n *\n * @private\n * @param {Object} clause - A single clause from lunr.Query.\n * @param {string} clause.term - The query clause term.\n * @param {number} [clause.editDistance] - The optional edit distance for the term.\n * @returns {lunr.TokenSet}\n */\nlunr.TokenSet.fromClause = function (clause) {\n  if ('editDistance' in clause) {\n    return lunr.TokenSet.fromFuzzyString(clause.term, clause.editDistance)\n  } else {\n    return lunr.TokenSet.fromString(clause.term)\n  }\n}\n\n/**\n * Creates a token set representing a single string with a specified\n * edit distance.\n *\n * Insertions, deletions, substitutions and transpositions are each\n * treated as an edit distance of 1.\n *\n * Increasing the allowed edit distance will have a dramatic impact\n * on the performance of both creating and intersecting these TokenSets.\n * It is advised to keep the edit distance less than 3.\n *\n * @param {string} str - The string to create the token set from.\n * @param {number} editDistance - The allowed edit distance to match.\n * @returns {lunr.Vector}\n */\nlunr.TokenSet.fromFuzzyString = function (str, editDistance) {\n  var root = new lunr.TokenSet\n\n  var stack = [{\n    node: root,\n    editsRemaining: editDistance,\n    str: str\n  }]\n\n  while (stack.length) {\n    var frame = stack.pop()\n\n    // no edit\n    if (frame.str.length > 0) {\n      var char = frame.str.charAt(0),\n          noEditNode\n\n      if (char in frame.node.edges) {\n        noEditNode = frame.node.edges[char]\n      } else {\n        noEditNode = new lunr.TokenSet\n        frame.node.edges[char] = noEditNode\n      }\n\n      if (frame.str.length == 1) {\n        noEditNode.final = true\n      }\n\n      stack.push({\n        node: noEditNode,\n        editsRemaining: frame.editsRemaining,\n        str: frame.str.slice(1)\n      })\n    }\n\n    if (frame.editsRemaining == 0) {\n      continue\n    }\n\n    // insertion\n    if (\"*\" in frame.node.edges) {\n      var insertionNode = frame.node.edges[\"*\"]\n    } else {\n      var insertionNode = new lunr.TokenSet\n      frame.node.edges[\"*\"] = insertionNode\n    }\n\n    if (frame.str.length == 0) {\n      insertionNode.final = true\n    }\n\n    stack.push({\n      node: insertionNode,\n      editsRemaining: frame.editsRemaining - 1,\n      str: frame.str\n    })\n\n    // deletion\n    // can only do a deletion if we have enough edits remaining\n    // and if there are characters left to delete in the string\n    if (frame.str.length > 1) {\n      stack.push({\n        node: frame.node,\n        editsRemaining: frame.editsRemaining - 1,\n        str: frame.str.slice(1)\n      })\n    }\n\n    // deletion\n    // just removing the last character from the str\n    if (frame.str.length == 1) {\n      frame.node.final = true\n    }\n\n    // substitution\n    // can only do a substitution if we have enough edits remaining\n    // and if there are characters left to substitute\n    if (frame.str.length >= 1) {\n      if (\"*\" in frame.node.edges) {\n        var substitutionNode = frame.node.edges[\"*\"]\n      } else {\n        var substitutionNode = new lunr.TokenSet\n        frame.node.edges[\"*\"] = substitutionNode\n      }\n\n      if (frame.str.length == 1) {\n        substitutionNode.final = true\n      }\n\n      stack.push({\n        node: substitutionNode,\n        editsRemaining: frame.editsRemaining - 1,\n        str: frame.str.slice(1)\n      })\n    }\n\n    // transposition\n    // can only do a transposition if there are edits remaining\n    // and there are enough characters to transpose\n    if (frame.str.length > 1) {\n      var charA = frame.str.charAt(0),\n          charB = frame.str.charAt(1),\n          transposeNode\n\n      if (charB in frame.node.edges) {\n        transposeNode = frame.node.edges[charB]\n      } else {\n        transposeNode = new lunr.TokenSet\n        frame.node.edges[charB] = transposeNode\n      }\n\n      if (frame.str.length == 1) {\n        transposeNode.final = true\n      }\n\n      stack.push({\n        node: transposeNode,\n        editsRemaining: frame.editsRemaining - 1,\n        str: charA + frame.str.slice(2)\n      })\n    }\n  }\n\n  return root\n}\n\n/**\n * Creates a TokenSet from a string.\n *\n * The string may contain one or more wildcard characters (*)\n * that will allow wildcard matching when intersecting with\n * another TokenSet.\n *\n * @param {string} str - The string to create a TokenSet from.\n * @returns {lunr.TokenSet}\n */\nlunr.TokenSet.fromString = function (str) {\n  var node = new lunr.TokenSet,\n      root = node\n\n  /*\n   * Iterates through all characters within the passed string\n   * appending a node for each character.\n   *\n   * When a wildcard character is found then a self\n   * referencing edge is introduced to continually match\n   * any number of any characters.\n   */\n  for (var i = 0, len = str.length; i < len; i++) {\n    var char = str[i],\n        final = (i == len - 1)\n\n    if (char == \"*\") {\n      node.edges[char] = node\n      node.final = final\n\n    } else {\n      var next = new lunr.TokenSet\n      next.final = final\n\n      node.edges[char] = next\n      node = next\n    }\n  }\n\n  return root\n}\n\n/**\n * Converts this TokenSet into an array of strings\n * contained within the TokenSet.\n *\n * This is not intended to be used on a TokenSet that\n * contains wildcards, in these cases the results are\n * undefined and are likely to cause an infinite loop.\n *\n * @returns {string[]}\n */\nlunr.TokenSet.prototype.toArray = function () {\n  var words = []\n\n  var stack = [{\n    prefix: \"\",\n    node: this\n  }]\n\n  while (stack.length) {\n    var frame = stack.pop(),\n        edges = Object.keys(frame.node.edges),\n        len = edges.length\n\n    if (frame.node.final) {\n      /* In Safari, at this point the prefix is sometimes corrupted, see:\n       * https://github.com/olivernn/lunr.js/issues/279 Calling any\n       * String.prototype method forces Safari to \"cast\" this string to what\n       * it's supposed to be, fixing the bug. */\n      frame.prefix.charAt(0)\n      words.push(frame.prefix)\n    }\n\n    for (var i = 0; i < len; i++) {\n      var edge = edges[i]\n\n      stack.push({\n        prefix: frame.prefix.concat(edge),\n        node: frame.node.edges[edge]\n      })\n    }\n  }\n\n  return words\n}\n\n/**\n * Generates a string representation of a TokenSet.\n *\n * This is intended to allow TokenSets to be used as keys\n * in objects, largely to aid the construction and minimisation\n * of a TokenSet. As such it is not designed to be a human\n * friendly representation of the TokenSet.\n *\n * @returns {string}\n */\nlunr.TokenSet.prototype.toString = function () {\n  // NOTE: Using Object.keys here as this.edges is very likely\n  // to enter 'hash-mode' with many keys being added\n  //\n  // avoiding a for-in loop here as it leads to the function\n  // being de-optimised (at least in V8). From some simple\n  // benchmarks the performance is comparable, but allowing\n  // V8 to optimize may mean easy performance wins in the future.\n\n  if (this._str) {\n    return this._str\n  }\n\n  var str = this.final ? '1' : '0',\n      labels = Object.keys(this.edges).sort(),\n      len = labels.length\n\n  for (var i = 0; i < len; i++) {\n    var label = labels[i],\n        node = this.edges[label]\n\n    str = str + label + node.id\n  }\n\n  return str\n}\n\n/**\n * Returns a new TokenSet that is the intersection of\n * this TokenSet and the passed TokenSet.\n *\n * This intersection will take into account any wildcards\n * contained within the TokenSet.\n *\n * @param {lunr.TokenSet} b - An other TokenSet to intersect with.\n * @returns {lunr.TokenSet}\n */\nlunr.TokenSet.prototype.intersect = function (b) {\n  var output = new lunr.TokenSet,\n      frame = undefined\n\n  var stack = [{\n    qNode: b,\n    output: output,\n    node: this\n  }]\n\n  while (stack.length) {\n    frame = stack.pop()\n\n    // NOTE: As with the #toString method, we are using\n    // Object.keys and a for loop instead of a for-in loop\n    // as both of these objects enter 'hash' mode, causing\n    // the function to be de-optimised in V8\n    var qEdges = Object.keys(frame.qNode.edges),\n        qLen = qEdges.length,\n        nEdges = Object.keys(frame.node.edges),\n        nLen = nEdges.length\n\n    for (var q = 0; q < qLen; q++) {\n      var qEdge = qEdges[q]\n\n      for (var n = 0; n < nLen; n++) {\n        var nEdge = nEdges[n]\n\n        if (nEdge == qEdge || qEdge == '*') {\n          var node = frame.node.edges[nEdge],\n              qNode = frame.qNode.edges[qEdge],\n              final = node.final && qNode.final,\n              next = undefined\n\n          if (nEdge in frame.output.edges) {\n            // an edge already exists for this character\n            // no need to create a new node, just set the finality\n            // bit unless this node is already final\n            next = frame.output.edges[nEdge]\n            next.final = next.final || final\n\n          } else {\n            // no edge exists yet, must create one\n            // set the finality bit and insert it\n            // into the output\n            next = new lunr.TokenSet\n            next.final = final\n            frame.output.edges[nEdge] = next\n          }\n\n          stack.push({\n            qNode: qNode,\n            output: next,\n            node: node\n          })\n        }\n      }\n    }\n  }\n\n  return output\n}\nlunr.TokenSet.Builder = function () {\n  this.previousWord = \"\"\n  this.root = new lunr.TokenSet\n  this.uncheckedNodes = []\n  this.minimizedNodes = {}\n}\n\nlunr.TokenSet.Builder.prototype.insert = function (word) {\n  var node,\n      commonPrefix = 0\n\n  if (word < this.previousWord) {\n    throw new Error (\"Out of order word insertion\")\n  }\n\n  for (var i = 0; i < word.length && i < this.previousWord.length; i++) {\n    if (word[i] != this.previousWord[i]) break\n    commonPrefix++\n  }\n\n  this.minimize(commonPrefix)\n\n  if (this.uncheckedNodes.length == 0) {\n    node = this.root\n  } else {\n    node = this.uncheckedNodes[this.uncheckedNodes.length - 1].child\n  }\n\n  for (var i = commonPrefix; i < word.length; i++) {\n    var nextNode = new lunr.TokenSet,\n        char = word[i]\n\n    node.edges[char] = nextNode\n\n    this.uncheckedNodes.push({\n      parent: node,\n      char: char,\n      child: nextNode\n    })\n\n    node = nextNode\n  }\n\n  node.final = true\n  this.previousWord = word\n}\n\nlunr.TokenSet.Builder.prototype.finish = function () {\n  this.minimize(0)\n}\n\nlunr.TokenSet.Builder.prototype.minimize = function (downTo) {\n  for (var i = this.uncheckedNodes.length - 1; i >= downTo; i--) {\n    var node = this.uncheckedNodes[i],\n        childKey = node.child.toString()\n\n    if (childKey in this.minimizedNodes) {\n      node.parent.edges[node.char] = this.minimizedNodes[childKey]\n    } else {\n      // Cache the key for this node since\n      // we know it can't change anymore\n      node.child._str = childKey\n\n      this.minimizedNodes[childKey] = node.child\n    }\n\n    this.uncheckedNodes.pop()\n  }\n}\n/*!\n * lunr.Index\n * Copyright (C) 2020 Oliver Nightingale\n */\n\n/**\n * An index contains the built index of all documents and provides a query interface\n * to the index.\n *\n * Usually instances of lunr.Index will not be created using this constructor, instead\n * lunr.Builder should be used to construct new indexes, or lunr.Index.load should be\n * used to load previously built and serialized indexes.\n *\n * @constructor\n * @param {Object} attrs - The attributes of the built search index.\n * @param {Object} attrs.invertedIndex - An index of term/field to document reference.\n * @param {Object<string, lunr.Vector>} attrs.fieldVectors - Field vectors\n * @param {lunr.TokenSet} attrs.tokenSet - An set of all corpus tokens.\n * @param {string[]} attrs.fields - The names of indexed document fields.\n * @param {lunr.Pipeline} attrs.pipeline - The pipeline to use for search terms.\n */\nlunr.Index = function (attrs) {\n  this.invertedIndex = attrs.invertedIndex\n  this.fieldVectors = attrs.fieldVectors\n  this.tokenSet = attrs.tokenSet\n  this.fields = attrs.fields\n  this.pipeline = attrs.pipeline\n}\n\n/**\n * A result contains details of a document matching a search query.\n * @typedef {Object} lunr.Index~Result\n * @property {string} ref - The reference of the document this result represents.\n * @property {number} score - A number between 0 and 1 representing how similar this document is to the query.\n * @property {lunr.MatchData} matchData - Contains metadata about this match including which term(s) caused the match.\n */\n\n/**\n * Although lunr provides the ability to create queries using lunr.Query, it also provides a simple\n * query language which itself is parsed into an instance of lunr.Query.\n *\n * For programmatically building queries it is advised to directly use lunr.Query, the query language\n * is best used for human entered text rather than program generated text.\n *\n * At its simplest queries can just be a single term, e.g. `hello`, multiple terms are also supported\n * and will be combined with OR, e.g `hello world` will match documents that contain either 'hello'\n * or 'world', though those that contain both will rank higher in the results.\n *\n * Wildcards can be included in terms to match one or more unspecified characters, these wildcards can\n * be inserted anywhere within the term, and more than one wildcard can exist in a single term. Adding\n * wildcards will increase the number of documents that will be found but can also have a negative\n * impact on query performance, especially with wildcards at the beginning of a term.\n *\n * Terms can be restricted to specific fields, e.g. `title:hello`, only documents with the term\n * hello in the title field will match this query. Using a field not present in the index will lead\n * to an error being thrown.\n *\n * Modifiers can also be added to terms, lunr supports edit distance and boost modifiers on terms. A term\n * boost will make documents matching that term score higher, e.g. `foo^5`. Edit distance is also supported\n * to provide fuzzy matching, e.g. 'hello~2' will match documents with hello with an edit distance of 2.\n * Avoid large values for edit distance to improve query performance.\n *\n * Each term also supports a presence modifier. By default a term's presence in document is optional, however\n * this can be changed to either required or prohibited. For a term's presence to be required in a document the\n * term should be prefixed with a '+', e.g. `+foo bar` is a search for documents that must contain 'foo' and\n * optionally contain 'bar'. Conversely a leading '-' sets the terms presence to prohibited, i.e. it must not\n * appear in a document, e.g. `-foo bar` is a search for documents that do not contain 'foo' but may contain 'bar'.\n *\n * To escape special characters the backslash character '\\' can be used, this allows searches to include\n * characters that would normally be considered modifiers, e.g. `foo\\~2` will search for a term \"foo~2\" instead\n * of attempting to apply a boost of 2 to the search term \"foo\".\n *\n * @typedef {string} lunr.Index~QueryString\n * @example <caption>Simple single term query</caption>\n * hello\n * @example <caption>Multiple term query</caption>\n * hello world\n * @example <caption>term scoped to a field</caption>\n * title:hello\n * @example <caption>term with a boost of 10</caption>\n * hello^10\n * @example <caption>term with an edit distance of 2</caption>\n * hello~2\n * @example <caption>terms with presence modifiers</caption>\n * -foo +bar baz\n */\n\n/**\n * Performs a search against the index using lunr query syntax.\n *\n * Results will be returned sorted by their score, the most relevant results\n * will be returned first.  For details on how the score is calculated, please see\n * the {@link https://lunrjs.com/guides/searching.html#scoring|guide}.\n *\n * For more programmatic querying use lunr.Index#query.\n *\n * @param {lunr.Index~QueryString} queryString - A string containing a lunr query.\n * @throws {lunr.QueryParseError} If the passed query string cannot be parsed.\n * @returns {lunr.Index~Result[]}\n */\nlunr.Index.prototype.search = function (queryString) {\n  return this.query(function (query) {\n    var parser = new lunr.QueryParser(queryString, query)\n    parser.parse()\n  })\n}\n\n/**\n * A query builder callback provides a query object to be used to express\n * the query to perform on the index.\n *\n * @callback lunr.Index~queryBuilder\n * @param {lunr.Query} query - The query object to build up.\n * @this lunr.Query\n */\n\n/**\n * Performs a query against the index using the yielded lunr.Query object.\n *\n * If performing programmatic queries against the index, this method is preferred\n * over lunr.Index#search so as to avoid the additional query parsing overhead.\n *\n * A query object is yielded to the supplied function which should be used to\n * express the query to be run against the index.\n *\n * Note that although this function takes a callback parameter it is _not_ an\n * asynchronous operation, the callback is just yielded a query object to be\n * customized.\n *\n * @param {lunr.Index~queryBuilder} fn - A function that is used to build the query.\n * @returns {lunr.Index~Result[]}\n */\nlunr.Index.prototype.query = function (fn) {\n  // for each query clause\n  // * process terms\n  // * expand terms from token set\n  // * find matching documents and metadata\n  // * get document vectors\n  // * score documents\n\n  var query = new lunr.Query(this.fields),\n      matchingFields = Object.create(null),\n      queryVectors = Object.create(null),\n      termFieldCache = Object.create(null),\n      requiredMatches = Object.create(null),\n      prohibitedMatches = Object.create(null)\n\n  /*\n   * To support field level boosts a query vector is created per\n   * field. An empty vector is eagerly created to support negated\n   * queries.\n   */\n  for (var i = 0; i < this.fields.length; i++) {\n    queryVectors[this.fields[i]] = new lunr.Vector\n  }\n\n  fn.call(query, query)\n\n  for (var i = 0; i < query.clauses.length; i++) {\n    /*\n     * Unless the pipeline has been disabled for this term, which is\n     * the case for terms with wildcards, we need to pass the clause\n     * term through the search pipeline. A pipeline returns an array\n     * of processed terms. Pipeline functions may expand the passed\n     * term, which means we may end up performing multiple index lookups\n     * for a single query term.\n     */\n    var clause = query.clauses[i],\n        terms = null,\n        clauseMatches = lunr.Set.empty\n\n    if (clause.usePipeline) {\n      terms = this.pipeline.runString(clause.term, {\n        fields: clause.fields\n      })\n    } else {\n      terms = [clause.term]\n    }\n\n    for (var m = 0; m < terms.length; m++) {\n      var term = terms[m]\n\n      /*\n       * Each term returned from the pipeline needs to use the same query\n       * clause object, e.g. the same boost and or edit distance. The\n       * simplest way to do this is to re-use the clause object but mutate\n       * its term property.\n       */\n      clause.term = term\n\n      /*\n       * From the term in the clause we create a token set which will then\n       * be used to intersect the indexes token set to get a list of terms\n       * to lookup in the inverted index\n       */\n      var termTokenSet = lunr.TokenSet.fromClause(clause),\n          expandedTerms = this.tokenSet.intersect(termTokenSet).toArray()\n\n      /*\n       * If a term marked as required does not exist in the tokenSet it is\n       * impossible for the search to return any matches. We set all the field\n       * scoped required matches set to empty and stop examining any further\n       * clauses.\n       */\n      if (expandedTerms.length === 0 && clause.presence === lunr.Query.presence.REQUIRED) {\n        for (var k = 0; k < clause.fields.length; k++) {\n          var field = clause.fields[k]\n          requiredMatches[field] = lunr.Set.empty\n        }\n\n        break\n      }\n\n      for (var j = 0; j < expandedTerms.length; j++) {\n        /*\n         * For each term get the posting and termIndex, this is required for\n         * building the query vector.\n         */\n        var expandedTerm = expandedTerms[j],\n            posting = this.invertedIndex[expandedTerm],\n            termIndex = posting._index\n\n        for (var k = 0; k < clause.fields.length; k++) {\n          /*\n           * For each field that this query term is scoped by (by default\n           * all fields are in scope) we need to get all the document refs\n           * that have this term in that field.\n           *\n           * The posting is the entry in the invertedIndex for the matching\n           * term from above.\n           */\n          var field = clause.fields[k],\n              fieldPosting = posting[field],\n              matchingDocumentRefs = Object.keys(fieldPosting),\n              termField = expandedTerm + \"/\" + field,\n              matchingDocumentsSet = new lunr.Set(matchingDocumentRefs)\n\n          /*\n           * if the presence of this term is required ensure that the matching\n           * documents are added to the set of required matches for this clause.\n           *\n           */\n          if (clause.presence == lunr.Query.presence.REQUIRED) {\n            clauseMatches = clauseMatches.union(matchingDocumentsSet)\n\n            if (requiredMatches[field] === undefined) {\n              requiredMatches[field] = lunr.Set.complete\n            }\n          }\n\n          /*\n           * if the presence of this term is prohibited ensure that the matching\n           * documents are added to the set of prohibited matches for this field,\n           * creating that set if it does not yet exist.\n           */\n          if (clause.presence == lunr.Query.presence.PROHIBITED) {\n            if (prohibitedMatches[field] === undefined) {\n              prohibitedMatches[field] = lunr.Set.empty\n            }\n\n            prohibitedMatches[field] = prohibitedMatches[field].union(matchingDocumentsSet)\n\n            /*\n             * Prohibited matches should not be part of the query vector used for\n             * similarity scoring and no metadata should be extracted so we continue\n             * to the next field\n             */\n            continue\n          }\n\n          /*\n           * The query field vector is populated using the termIndex found for\n           * the term and a unit value with the appropriate boost applied.\n           * Using upsert because there could already be an entry in the vector\n           * for the term we are working with. In that case we just add the scores\n           * together.\n           */\n          queryVectors[field].upsert(termIndex, clause.boost, function (a, b) { return a + b })\n\n          /**\n           * If we've already seen this term, field combo then we've already collected\n           * the matching documents and metadata, no need to go through all that again\n           */\n          if (termFieldCache[termField]) {\n            continue\n          }\n\n          for (var l = 0; l < matchingDocumentRefs.length; l++) {\n            /*\n             * All metadata for this term/field/document triple\n             * are then extracted and collected into an instance\n             * of lunr.MatchData ready to be returned in the query\n             * results\n             */\n            var matchingDocumentRef = matchingDocumentRefs[l],\n                matchingFieldRef = new lunr.FieldRef (matchingDocumentRef, field),\n                metadata = fieldPosting[matchingDocumentRef],\n                fieldMatch\n\n            if ((fieldMatch = matchingFields[matchingFieldRef]) === undefined) {\n              matchingFields[matchingFieldRef] = new lunr.MatchData (expandedTerm, field, metadata)\n            } else {\n              fieldMatch.add(expandedTerm, field, metadata)\n            }\n\n          }\n\n          termFieldCache[termField] = true\n        }\n      }\n    }\n\n    /**\n     * If the presence was required we need to update the requiredMatches field sets.\n     * We do this after all fields for the term have collected their matches because\n     * the clause terms presence is required in _any_ of the fields not _all_ of the\n     * fields.\n     */\n    if (clause.presence === lunr.Query.presence.REQUIRED) {\n      for (var k = 0; k < clause.fields.length; k++) {\n        var field = clause.fields[k]\n        requiredMatches[field] = requiredMatches[field].intersect(clauseMatches)\n      }\n    }\n  }\n\n  /**\n   * Need to combine the field scoped required and prohibited\n   * matching documents into a global set of required and prohibited\n   * matches\n   */\n  var allRequiredMatches = lunr.Set.complete,\n      allProhibitedMatches = lunr.Set.empty\n\n  for (var i = 0; i < this.fields.length; i++) {\n    var field = this.fields[i]\n\n    if (requiredMatches[field]) {\n      allRequiredMatches = allRequiredMatches.intersect(requiredMatches[field])\n    }\n\n    if (prohibitedMatches[field]) {\n      allProhibitedMatches = allProhibitedMatches.union(prohibitedMatches[field])\n    }\n  }\n\n  var matchingFieldRefs = Object.keys(matchingFields),\n      results = [],\n      matches = Object.create(null)\n\n  /*\n   * If the query is negated (contains only prohibited terms)\n   * we need to get _all_ fieldRefs currently existing in the\n   * index. This is only done when we know that the query is\n   * entirely prohibited terms to avoid any cost of getting all\n   * fieldRefs unnecessarily.\n   *\n   * Additionally, blank MatchData must be created to correctly\n   * populate the results.\n   */\n  if (query.isNegated()) {\n    matchingFieldRefs = Object.keys(this.fieldVectors)\n\n    for (var i = 0; i < matchingFieldRefs.length; i++) {\n      var matchingFieldRef = matchingFieldRefs[i]\n      var fieldRef = lunr.FieldRef.fromString(matchingFieldRef)\n      matchingFields[matchingFieldRef] = new lunr.MatchData\n    }\n  }\n\n  for (var i = 0; i < matchingFieldRefs.length; i++) {\n    /*\n     * Currently we have document fields that match the query, but we\n     * need to return documents. The matchData and scores are combined\n     * from multiple fields belonging to the same document.\n     *\n     * Scores are calculated by field, using the query vectors created\n     * above, and combined into a final document score using addition.\n     */\n    var fieldRef = lunr.FieldRef.fromString(matchingFieldRefs[i]),\n        docRef = fieldRef.docRef\n\n    if (!allRequiredMatches.contains(docRef)) {\n      continue\n    }\n\n    if (allProhibitedMatches.contains(docRef)) {\n      continue\n    }\n\n    var fieldVector = this.fieldVectors[fieldRef],\n        score = queryVectors[fieldRef.fieldName].similarity(fieldVector),\n        docMatch\n\n    if ((docMatch = matches[docRef]) !== undefined) {\n      docMatch.score += score\n      docMatch.matchData.combine(matchingFields[fieldRef])\n    } else {\n      var match = {\n        ref: docRef,\n        score: score,\n        matchData: matchingFields[fieldRef]\n      }\n      matches[docRef] = match\n      results.push(match)\n    }\n  }\n\n  /*\n   * Sort the results objects by score, highest first.\n   */\n  return results.sort(function (a, b) {\n    return b.score - a.score\n  })\n}\n\n/**\n * Prepares the index for JSON serialization.\n *\n * The schema for this JSON blob will be described in a\n * separate JSON schema file.\n *\n * @returns {Object}\n */\nlunr.Index.prototype.toJSON = function () {\n  var invertedIndex = Object.keys(this.invertedIndex)\n    .sort()\n    .map(function (term) {\n      return [term, this.invertedIndex[term]]\n    }, this)\n\n  var fieldVectors = Object.keys(this.fieldVectors)\n    .map(function (ref) {\n      return [ref, this.fieldVectors[ref].toJSON()]\n    }, this)\n\n  return {\n    version: lunr.version,\n    fields: this.fields,\n    fieldVectors: fieldVectors,\n    invertedIndex: invertedIndex,\n    pipeline: this.pipeline.toJSON()\n  }\n}\n\n/**\n * Loads a previously serialized lunr.Index\n *\n * @param {Object} serializedIndex - A previously serialized lunr.Index\n * @returns {lunr.Index}\n */\nlunr.Index.load = function (serializedIndex) {\n  var attrs = {},\n      fieldVectors = {},\n      serializedVectors = serializedIndex.fieldVectors,\n      invertedIndex = Object.create(null),\n      serializedInvertedIndex = serializedIndex.invertedIndex,\n      tokenSetBuilder = new lunr.TokenSet.Builder,\n      pipeline = lunr.Pipeline.load(serializedIndex.pipeline)\n\n  if (serializedIndex.version != lunr.version) {\n    lunr.utils.warn(\"Version mismatch when loading serialised index. Current version of lunr '\" + lunr.version + \"' does not match serialized index '\" + serializedIndex.version + \"'\")\n  }\n\n  for (var i = 0; i < serializedVectors.length; i++) {\n    var tuple = serializedVectors[i],\n        ref = tuple[0],\n        elements = tuple[1]\n\n    fieldVectors[ref] = new lunr.Vector(elements)\n  }\n\n  for (var i = 0; i < serializedInvertedIndex.length; i++) {\n    var tuple = serializedInvertedIndex[i],\n        term = tuple[0],\n        posting = tuple[1]\n\n    tokenSetBuilder.insert(term)\n    invertedIndex[term] = posting\n  }\n\n  tokenSetBuilder.finish()\n\n  attrs.fields = serializedIndex.fields\n\n  attrs.fieldVectors = fieldVectors\n  attrs.invertedIndex = invertedIndex\n  attrs.tokenSet = tokenSetBuilder.root\n  attrs.pipeline = pipeline\n\n  return new lunr.Index(attrs)\n}\n/*!\n * lunr.Builder\n * Copyright (C) 2020 Oliver Nightingale\n */\n\n/**\n * lunr.Builder performs indexing on a set of documents and\n * returns instances of lunr.Index ready for querying.\n *\n * All configuration of the index is done via the builder, the\n * fields to index, the document reference, the text processing\n * pipeline and document scoring parameters are all set on the\n * builder before indexing.\n *\n * @constructor\n * @property {string} _ref - Internal reference to the document reference field.\n * @property {string[]} _fields - Internal reference to the document fields to index.\n * @property {object} invertedIndex - The inverted index maps terms to document fields.\n * @property {object} documentTermFrequencies - Keeps track of document term frequencies.\n * @property {object} documentLengths - Keeps track of the length of documents added to the index.\n * @property {lunr.tokenizer} tokenizer - Function for splitting strings into tokens for indexing.\n * @property {lunr.Pipeline} pipeline - The pipeline performs text processing on tokens before indexing.\n * @property {lunr.Pipeline} searchPipeline - A pipeline for processing search terms before querying the index.\n * @property {number} documentCount - Keeps track of the total number of documents indexed.\n * @property {number} _b - A parameter to control field length normalization, setting this to 0 disabled normalization, 1 fully normalizes field lengths, the default value is 0.75.\n * @property {number} _k1 - A parameter to control how quickly an increase in term frequency results in term frequency saturation, the default value is 1.2.\n * @property {number} termIndex - A counter incremented for each unique term, used to identify a terms position in the vector space.\n * @property {array} metadataWhitelist - A list of metadata keys that have been whitelisted for entry in the index.\n */\nlunr.Builder = function () {\n  this._ref = \"id\"\n  this._fields = Object.create(null)\n  this._documents = Object.create(null)\n  this.invertedIndex = Object.create(null)\n  this.fieldTermFrequencies = {}\n  this.fieldLengths = {}\n  this.tokenizer = lunr.tokenizer\n  this.pipeline = new lunr.Pipeline\n  this.searchPipeline = new lunr.Pipeline\n  this.documentCount = 0\n  this._b = 0.75\n  this._k1 = 1.2\n  this.termIndex = 0\n  this.metadataWhitelist = []\n}\n\n/**\n * Sets the document field used as the document reference. Every document must have this field.\n * The type of this field in the document should be a string, if it is not a string it will be\n * coerced into a string by calling toString.\n *\n * The default ref is 'id'.\n *\n * The ref should _not_ be changed during indexing, it should be set before any documents are\n * added to the index. Changing it during indexing can lead to inconsistent results.\n *\n * @param {string} ref - The name of the reference field in the document.\n */\nlunr.Builder.prototype.ref = function (ref) {\n  this._ref = ref\n}\n\n/**\n * A function that is used to extract a field from a document.\n *\n * Lunr expects a field to be at the top level of a document, if however the field\n * is deeply nested within a document an extractor function can be used to extract\n * the right field for indexing.\n *\n * @callback fieldExtractor\n * @param {object} doc - The document being added to the index.\n * @returns {?(string|object|object[])} obj - The object that will be indexed for this field.\n * @example <caption>Extracting a nested field</caption>\n * function (doc) { return doc.nested.field }\n */\n\n/**\n * Adds a field to the list of document fields that will be indexed. Every document being\n * indexed should have this field. Null values for this field in indexed documents will\n * not cause errors but will limit the chance of that document being retrieved by searches.\n *\n * All fields should be added before adding documents to the index. Adding fields after\n * a document has been indexed will have no effect on already indexed documents.\n *\n * Fields can be boosted at build time. This allows terms within that field to have more\n * importance when ranking search results. Use a field boost to specify that matches within\n * one field are more important than other fields.\n *\n * @param {string} fieldName - The name of a field to index in all documents.\n * @param {object} attributes - Optional attributes associated with this field.\n * @param {number} [attributes.boost=1] - Boost applied to all terms within this field.\n * @param {fieldExtractor} [attributes.extractor] - Function to extract a field from a document.\n * @throws {RangeError} fieldName cannot contain unsupported characters '/'\n */\nlunr.Builder.prototype.field = function (fieldName, attributes) {\n  if (/\\//.test(fieldName)) {\n    throw new RangeError (\"Field '\" + fieldName + \"' contains illegal character '/'\")\n  }\n\n  this._fields[fieldName] = attributes || {}\n}\n\n/**\n * A parameter to tune the amount of field length normalisation that is applied when\n * calculating relevance scores. A value of 0 will completely disable any normalisation\n * and a value of 1 will fully normalise field lengths. The default is 0.75. Values of b\n * will be clamped to the range 0 - 1.\n *\n * @param {number} number - The value to set for this tuning parameter.\n */\nlunr.Builder.prototype.b = function (number) {\n  if (number < 0) {\n    this._b = 0\n  } else if (number > 1) {\n    this._b = 1\n  } else {\n    this._b = number\n  }\n}\n\n/**\n * A parameter that controls the speed at which a rise in term frequency results in term\n * frequency saturation. The default value is 1.2. Setting this to a higher value will give\n * slower saturation levels, a lower value will result in quicker saturation.\n *\n * @param {number} number - The value to set for this tuning parameter.\n */\nlunr.Builder.prototype.k1 = function (number) {\n  this._k1 = number\n}\n\n/**\n * Adds a document to the index.\n *\n * Before adding fields to the index the index should have been fully setup, with the document\n * ref and all fields to index already having been specified.\n *\n * The document must have a field name as specified by the ref (by default this is 'id') and\n * it should have all fields defined for indexing, though null or undefined values will not\n * cause errors.\n *\n * Entire documents can be boosted at build time. Applying a boost to a document indicates that\n * this document should rank higher in search results than other documents.\n *\n * @param {object} doc - The document to add to the index.\n * @param {object} attributes - Optional attributes associated with this document.\n * @param {number} [attributes.boost=1] - Boost applied to all terms within this document.\n */\nlunr.Builder.prototype.add = function (doc, attributes) {\n  var docRef = doc[this._ref],\n      fields = Object.keys(this._fields)\n\n  this._documents[docRef] = attributes || {}\n  this.documentCount += 1\n\n  for (var i = 0; i < fields.length; i++) {\n    var fieldName = fields[i],\n        extractor = this._fields[fieldName].extractor,\n        field = extractor ? extractor(doc) : doc[fieldName],\n        tokens = this.tokenizer(field, {\n          fields: [fieldName]\n        }),\n        terms = this.pipeline.run(tokens),\n        fieldRef = new lunr.FieldRef (docRef, fieldName),\n        fieldTerms = Object.create(null)\n\n    this.fieldTermFrequencies[fieldRef] = fieldTerms\n    this.fieldLengths[fieldRef] = 0\n\n    // store the length of this field for this document\n    this.fieldLengths[fieldRef] += terms.length\n\n    // calculate term frequencies for this field\n    for (var j = 0; j < terms.length; j++) {\n      var term = terms[j]\n\n      if (fieldTerms[term] == undefined) {\n        fieldTerms[term] = 0\n      }\n\n      fieldTerms[term] += 1\n\n      // add to inverted index\n      // create an initial posting if one doesn't exist\n      if (this.invertedIndex[term] == undefined) {\n        var posting = Object.create(null)\n        posting[\"_index\"] = this.termIndex\n        this.termIndex += 1\n\n        for (var k = 0; k < fields.length; k++) {\n          posting[fields[k]] = Object.create(null)\n        }\n\n        this.invertedIndex[term] = posting\n      }\n\n      // add an entry for this term/fieldName/docRef to the invertedIndex\n      if (this.invertedIndex[term][fieldName][docRef] == undefined) {\n        this.invertedIndex[term][fieldName][docRef] = Object.create(null)\n      }\n\n      // store all whitelisted metadata about this token in the\n      // inverted index\n      for (var l = 0; l < this.metadataWhitelist.length; l++) {\n        var metadataKey = this.metadataWhitelist[l],\n            metadata = term.metadata[metadataKey]\n\n        if (this.invertedIndex[term][fieldName][docRef][metadataKey] == undefined) {\n          this.invertedIndex[term][fieldName][docRef][metadataKey] = []\n        }\n\n        this.invertedIndex[term][fieldName][docRef][metadataKey].push(metadata)\n      }\n    }\n\n  }\n}\n\n/**\n * Calculates the average document length for this index\n *\n * @private\n */\nlunr.Builder.prototype.calculateAverageFieldLengths = function () {\n\n  var fieldRefs = Object.keys(this.fieldLengths),\n      numberOfFields = fieldRefs.length,\n      accumulator = {},\n      documentsWithField = {}\n\n  for (var i = 0; i < numberOfFields; i++) {\n    var fieldRef = lunr.FieldRef.fromString(fieldRefs[i]),\n        field = fieldRef.fieldName\n\n    documentsWithField[field] || (documentsWithField[field] = 0)\n    documentsWithField[field] += 1\n\n    accumulator[field] || (accumulator[field] = 0)\n    accumulator[field] += this.fieldLengths[fieldRef]\n  }\n\n  var fields = Object.keys(this._fields)\n\n  for (var i = 0; i < fields.length; i++) {\n    var fieldName = fields[i]\n    accumulator[fieldName] = accumulator[fieldName] / documentsWithField[fieldName]\n  }\n\n  this.averageFieldLength = accumulator\n}\n\n/**\n * Builds a vector space model of every document using lunr.Vector\n *\n * @private\n */\nlunr.Builder.prototype.createFieldVectors = function () {\n  var fieldVectors = {},\n      fieldRefs = Object.keys(this.fieldTermFrequencies),\n      fieldRefsLength = fieldRefs.length,\n      termIdfCache = Object.create(null)\n\n  for (var i = 0; i < fieldRefsLength; i++) {\n    var fieldRef = lunr.FieldRef.fromString(fieldRefs[i]),\n        fieldName = fieldRef.fieldName,\n        fieldLength = this.fieldLengths[fieldRef],\n        fieldVector = new lunr.Vector,\n        termFrequencies = this.fieldTermFrequencies[fieldRef],\n        terms = Object.keys(termFrequencies),\n        termsLength = terms.length\n\n\n    var fieldBoost = this._fields[fieldName].boost || 1,\n        docBoost = this._documents[fieldRef.docRef].boost || 1\n\n    for (var j = 0; j < termsLength; j++) {\n      var term = terms[j],\n          tf = termFrequencies[term],\n          termIndex = this.invertedIndex[term]._index,\n          idf, score, scoreWithPrecision\n\n      if (termIdfCache[term] === undefined) {\n        idf = lunr.idf(this.invertedIndex[term], this.documentCount)\n        termIdfCache[term] = idf\n      } else {\n        idf = termIdfCache[term]\n      }\n\n      score = idf * ((this._k1 + 1) * tf) / (this._k1 * (1 - this._b + this._b * (fieldLength / this.averageFieldLength[fieldName])) + tf)\n      score *= fieldBoost\n      score *= docBoost\n      scoreWithPrecision = Math.round(score * 1000) / 1000\n      // Converts 1.23456789 to 1.234.\n      // Reducing the precision so that the vectors take up less\n      // space when serialised. Doing it now so that they behave\n      // the same before and after serialisation. Also, this is\n      // the fastest approach to reducing a number's precision in\n      // JavaScript.\n\n      fieldVector.insert(termIndex, scoreWithPrecision)\n    }\n\n    fieldVectors[fieldRef] = fieldVector\n  }\n\n  this.fieldVectors = fieldVectors\n}\n\n/**\n * Creates a token set of all tokens in the index using lunr.TokenSet\n *\n * @private\n */\nlunr.Builder.prototype.createTokenSet = function () {\n  this.tokenSet = lunr.TokenSet.fromArray(\n    Object.keys(this.invertedIndex).sort()\n  )\n}\n\n/**\n * Builds the index, creating an instance of lunr.Index.\n *\n * This completes the indexing process and should only be called\n * once all documents have been added to the index.\n *\n * @returns {lunr.Index}\n */\nlunr.Builder.prototype.build = function () {\n  this.calculateAverageFieldLengths()\n  this.createFieldVectors()\n  this.createTokenSet()\n\n  return new lunr.Index({\n    invertedIndex: this.invertedIndex,\n    fieldVectors: this.fieldVectors,\n    tokenSet: this.tokenSet,\n    fields: Object.keys(this._fields),\n    pipeline: this.searchPipeline\n  })\n}\n\n/**\n * Applies a plugin to the index builder.\n *\n * A plugin is a function that is called with the index builder as its context.\n * Plugins can be used to customise or extend the behaviour of the index\n * in some way. A plugin is just a function, that encapsulated the custom\n * behaviour that should be applied when building the index.\n *\n * The plugin function will be called with the index builder as its argument, additional\n * arguments can also be passed when calling use. The function will be called\n * with the index builder as its context.\n *\n * @param {Function} plugin The plugin to apply.\n */\nlunr.Builder.prototype.use = function (fn) {\n  var args = Array.prototype.slice.call(arguments, 1)\n  args.unshift(this)\n  fn.apply(this, args)\n}\n/**\n * Contains and collects metadata about a matching document.\n * A single instance of lunr.MatchData is returned as part of every\n * lunr.Index~Result.\n *\n * @constructor\n * @param {string} term - The term this match data is associated with\n * @param {string} field - The field in which the term was found\n * @param {object} metadata - The metadata recorded about this term in this field\n * @property {object} metadata - A cloned collection of metadata associated with this document.\n * @see {@link lunr.Index~Result}\n */\nlunr.MatchData = function (term, field, metadata) {\n  var clonedMetadata = Object.create(null),\n      metadataKeys = Object.keys(metadata || {})\n\n  // Cloning the metadata to prevent the original\n  // being mutated during match data combination.\n  // Metadata is kept in an array within the inverted\n  // index so cloning the data can be done with\n  // Array#slice\n  for (var i = 0; i < metadataKeys.length; i++) {\n    var key = metadataKeys[i]\n    clonedMetadata[key] = metadata[key].slice()\n  }\n\n  this.metadata = Object.create(null)\n\n  if (term !== undefined) {\n    this.metadata[term] = Object.create(null)\n    this.metadata[term][field] = clonedMetadata\n  }\n}\n\n/**\n * An instance of lunr.MatchData will be created for every term that matches a\n * document. However only one instance is required in a lunr.Index~Result. This\n * method combines metadata from another instance of lunr.MatchData with this\n * objects metadata.\n *\n * @param {lunr.MatchData} otherMatchData - Another instance of match data to merge with this one.\n * @see {@link lunr.Index~Result}\n */\nlunr.MatchData.prototype.combine = function (otherMatchData) {\n  var terms = Object.keys(otherMatchData.metadata)\n\n  for (var i = 0; i < terms.length; i++) {\n    var term = terms[i],\n        fields = Object.keys(otherMatchData.metadata[term])\n\n    if (this.metadata[term] == undefined) {\n      this.metadata[term] = Object.create(null)\n    }\n\n    for (var j = 0; j < fields.length; j++) {\n      var field = fields[j],\n          keys = Object.keys(otherMatchData.metadata[term][field])\n\n      if (this.metadata[term][field] == undefined) {\n        this.metadata[term][field] = Object.create(null)\n      }\n\n      for (var k = 0; k < keys.length; k++) {\n        var key = keys[k]\n\n        if (this.metadata[term][field][key] == undefined) {\n          this.metadata[term][field][key] = otherMatchData.metadata[term][field][key]\n        } else {\n          this.metadata[term][field][key] = this.metadata[term][field][key].concat(otherMatchData.metadata[term][field][key])\n        }\n\n      }\n    }\n  }\n}\n\n/**\n * Add metadata for a term/field pair to this instance of match data.\n *\n * @param {string} term - The term this match data is associated with\n * @param {string} field - The field in which the term was found\n * @param {object} metadata - The metadata recorded about this term in this field\n */\nlunr.MatchData.prototype.add = function (term, field, metadata) {\n  if (!(term in this.metadata)) {\n    this.metadata[term] = Object.create(null)\n    this.metadata[term][field] = metadata\n    return\n  }\n\n  if (!(field in this.metadata[term])) {\n    this.metadata[term][field] = metadata\n    return\n  }\n\n  var metadataKeys = Object.keys(metadata)\n\n  for (var i = 0; i < metadataKeys.length; i++) {\n    var key = metadataKeys[i]\n\n    if (key in this.metadata[term][field]) {\n      this.metadata[term][field][key] = this.metadata[term][field][key].concat(metadata[key])\n    } else {\n      this.metadata[term][field][key] = metadata[key]\n    }\n  }\n}\n/**\n * A lunr.Query provides a programmatic way of defining queries to be performed\n * against a {@link lunr.Index}.\n *\n * Prefer constructing a lunr.Query using the {@link lunr.Index#query} method\n * so the query object is pre-initialized with the right index fields.\n *\n * @constructor\n * @property {lunr.Query~Clause[]} clauses - An array of query clauses.\n * @property {string[]} allFields - An array of all available fields in a lunr.Index.\n */\nlunr.Query = function (allFields) {\n  this.clauses = []\n  this.allFields = allFields\n}\n\n/**\n * Constants for indicating what kind of automatic wildcard insertion will be used when constructing a query clause.\n *\n * This allows wildcards to be added to the beginning and end of a term without having to manually do any string\n * concatenation.\n *\n * The wildcard constants can be bitwise combined to select both leading and trailing wildcards.\n *\n * @constant\n * @default\n * @property {number} wildcard.NONE - The term will have no wildcards inserted, this is the default behaviour\n * @property {number} wildcard.LEADING - Prepend the term with a wildcard, unless a leading wildcard already exists\n * @property {number} wildcard.TRAILING - Append a wildcard to the term, unless a trailing wildcard already exists\n * @see lunr.Query~Clause\n * @see lunr.Query#clause\n * @see lunr.Query#term\n * @example <caption>query term with trailing wildcard</caption>\n * query.term('foo', { wildcard: lunr.Query.wildcard.TRAILING })\n * @example <caption>query term with leading and trailing wildcard</caption>\n * query.term('foo', {\n *   wildcard: lunr.Query.wildcard.LEADING | lunr.Query.wildcard.TRAILING\n * })\n */\n\nlunr.Query.wildcard = new String (\"*\")\nlunr.Query.wildcard.NONE = 0\nlunr.Query.wildcard.LEADING = 1\nlunr.Query.wildcard.TRAILING = 2\n\n/**\n * Constants for indicating what kind of presence a term must have in matching documents.\n *\n * @constant\n * @enum {number}\n * @see lunr.Query~Clause\n * @see lunr.Query#clause\n * @see lunr.Query#term\n * @example <caption>query term with required presence</caption>\n * query.term('foo', { presence: lunr.Query.presence.REQUIRED })\n */\nlunr.Query.presence = {\n  /**\n   * Term's presence in a document is optional, this is the default value.\n   */\n  OPTIONAL: 1,\n\n  /**\n   * Term's presence in a document is required, documents that do not contain\n   * this term will not be returned.\n   */\n  REQUIRED: 2,\n\n  /**\n   * Term's presence in a document is prohibited, documents that do contain\n   * this term will not be returned.\n   */\n  PROHIBITED: 3\n}\n\n/**\n * A single clause in a {@link lunr.Query} contains a term and details on how to\n * match that term against a {@link lunr.Index}.\n *\n * @typedef {Object} lunr.Query~Clause\n * @property {string[]} fields - The fields in an index this clause should be matched against.\n * @property {number} [boost=1] - Any boost that should be applied when matching this clause.\n * @property {number} [editDistance] - Whether the term should have fuzzy matching applied, and how fuzzy the match should be.\n * @property {boolean} [usePipeline] - Whether the term should be passed through the search pipeline.\n * @property {number} [wildcard=lunr.Query.wildcard.NONE] - Whether the term should have wildcards appended or prepended.\n * @property {number} [presence=lunr.Query.presence.OPTIONAL] - The terms presence in any matching documents.\n */\n\n/**\n * Adds a {@link lunr.Query~Clause} to this query.\n *\n * Unless the clause contains the fields to be matched all fields will be matched. In addition\n * a default boost of 1 is applied to the clause.\n *\n * @param {lunr.Query~Clause} clause - The clause to add to this query.\n * @see lunr.Query~Clause\n * @returns {lunr.Query}\n */\nlunr.Query.prototype.clause = function (clause) {\n  if (!('fields' in clause)) {\n    clause.fields = this.allFields\n  }\n\n  if (!('boost' in clause)) {\n    clause.boost = 1\n  }\n\n  if (!('usePipeline' in clause)) {\n    clause.usePipeline = true\n  }\n\n  if (!('wildcard' in clause)) {\n    clause.wildcard = lunr.Query.wildcard.NONE\n  }\n\n  if ((clause.wildcard & lunr.Query.wildcard.LEADING) && (clause.term.charAt(0) != lunr.Query.wildcard)) {\n    clause.term = \"*\" + clause.term\n  }\n\n  if ((clause.wildcard & lunr.Query.wildcard.TRAILING) && (clause.term.slice(-1) != lunr.Query.wildcard)) {\n    clause.term = \"\" + clause.term + \"*\"\n  }\n\n  if (!('presence' in clause)) {\n    clause.presence = lunr.Query.presence.OPTIONAL\n  }\n\n  this.clauses.push(clause)\n\n  return this\n}\n\n/**\n * A negated query is one in which every clause has a presence of\n * prohibited. These queries require some special processing to return\n * the expected results.\n *\n * @returns boolean\n */\nlunr.Query.prototype.isNegated = function () {\n  for (var i = 0; i < this.clauses.length; i++) {\n    if (this.clauses[i].presence != lunr.Query.presence.PROHIBITED) {\n      return false\n    }\n  }\n\n  return true\n}\n\n/**\n * Adds a term to the current query, under the covers this will create a {@link lunr.Query~Clause}\n * to the list of clauses that make up this query.\n *\n * The term is used as is, i.e. no tokenization will be performed by this method. Instead conversion\n * to a token or token-like string should be done before calling this method.\n *\n * The term will be converted to a string by calling `toString`. Multiple terms can be passed as an\n * array, each term in the array will share the same options.\n *\n * @param {object|object[]} term - The term(s) to add to the query.\n * @param {object} [options] - Any additional properties to add to the query clause.\n * @returns {lunr.Query}\n * @see lunr.Query#clause\n * @see lunr.Query~Clause\n * @example <caption>adding a single term to a query</caption>\n * query.term(\"foo\")\n * @example <caption>adding a single term to a query and specifying search fields, term boost and automatic trailing wildcard</caption>\n * query.term(\"foo\", {\n *   fields: [\"title\"],\n *   boost: 10,\n *   wildcard: lunr.Query.wildcard.TRAILING\n * })\n * @example <caption>using lunr.tokenizer to convert a string to tokens before using them as terms</caption>\n * query.term(lunr.tokenizer(\"foo bar\"))\n */\nlunr.Query.prototype.term = function (term, options) {\n  if (Array.isArray(term)) {\n    term.forEach(function (t) { this.term(t, lunr.utils.clone(options)) }, this)\n    return this\n  }\n\n  var clause = options || {}\n  clause.term = term.toString()\n\n  this.clause(clause)\n\n  return this\n}\nlunr.QueryParseError = function (message, start, end) {\n  this.name = \"QueryParseError\"\n  this.message = message\n  this.start = start\n  this.end = end\n}\n\nlunr.QueryParseError.prototype = new Error\nlunr.QueryLexer = function (str) {\n  this.lexemes = []\n  this.str = str\n  this.length = str.length\n  this.pos = 0\n  this.start = 0\n  this.escapeCharPositions = []\n}\n\nlunr.QueryLexer.prototype.run = function () {\n  var state = lunr.QueryLexer.lexText\n\n  while (state) {\n    state = state(this)\n  }\n}\n\nlunr.QueryLexer.prototype.sliceString = function () {\n  var subSlices = [],\n      sliceStart = this.start,\n      sliceEnd = this.pos\n\n  for (var i = 0; i < this.escapeCharPositions.length; i++) {\n    sliceEnd = this.escapeCharPositions[i]\n    subSlices.push(this.str.slice(sliceStart, sliceEnd))\n    sliceStart = sliceEnd + 1\n  }\n\n  subSlices.push(this.str.slice(sliceStart, this.pos))\n  this.escapeCharPositions.length = 0\n\n  return subSlices.join('')\n}\n\nlunr.QueryLexer.prototype.emit = function (type) {\n  this.lexemes.push({\n    type: type,\n    str: this.sliceString(),\n    start: this.start,\n    end: this.pos\n  })\n\n  this.start = this.pos\n}\n\nlunr.QueryLexer.prototype.escapeCharacter = function () {\n  this.escapeCharPositions.push(this.pos - 1)\n  this.pos += 1\n}\n\nlunr.QueryLexer.prototype.next = function () {\n  if (this.pos >= this.length) {\n    return lunr.QueryLexer.EOS\n  }\n\n  var char = this.str.charAt(this.pos)\n  this.pos += 1\n  return char\n}\n\nlunr.QueryLexer.prototype.width = function () {\n  return this.pos - this.start\n}\n\nlunr.QueryLexer.prototype.ignore = function () {\n  if (this.start == this.pos) {\n    this.pos += 1\n  }\n\n  this.start = this.pos\n}\n\nlunr.QueryLexer.prototype.backup = function () {\n  this.pos -= 1\n}\n\nlunr.QueryLexer.prototype.acceptDigitRun = function () {\n  var char, charCode\n\n  do {\n    char = this.next()\n    charCode = char.charCodeAt(0)\n  } while (charCode > 47 && charCode < 58)\n\n  if (char != lunr.QueryLexer.EOS) {\n    this.backup()\n  }\n}\n\nlunr.QueryLexer.prototype.more = function () {\n  return this.pos < this.length\n}\n\nlunr.QueryLexer.EOS = 'EOS'\nlunr.QueryLexer.FIELD = 'FIELD'\nlunr.QueryLexer.TERM = 'TERM'\nlunr.QueryLexer.EDIT_DISTANCE = 'EDIT_DISTANCE'\nlunr.QueryLexer.BOOST = 'BOOST'\nlunr.QueryLexer.PRESENCE = 'PRESENCE'\n\nlunr.QueryLexer.lexField = function (lexer) {\n  lexer.backup()\n  lexer.emit(lunr.QueryLexer.FIELD)\n  lexer.ignore()\n  return lunr.QueryLexer.lexText\n}\n\nlunr.QueryLexer.lexTerm = function (lexer) {\n  if (lexer.width() > 1) {\n    lexer.backup()\n    lexer.emit(lunr.QueryLexer.TERM)\n  }\n\n  lexer.ignore()\n\n  if (lexer.more()) {\n    return lunr.QueryLexer.lexText\n  }\n}\n\nlunr.QueryLexer.lexEditDistance = function (lexer) {\n  lexer.ignore()\n  lexer.acceptDigitRun()\n  lexer.emit(lunr.QueryLexer.EDIT_DISTANCE)\n  return lunr.QueryLexer.lexText\n}\n\nlunr.QueryLexer.lexBoost = function (lexer) {\n  lexer.ignore()\n  lexer.acceptDigitRun()\n  lexer.emit(lunr.QueryLexer.BOOST)\n  return lunr.QueryLexer.lexText\n}\n\nlunr.QueryLexer.lexEOS = function (lexer) {\n  if (lexer.width() > 0) {\n    lexer.emit(lunr.QueryLexer.TERM)\n  }\n}\n\n// This matches the separator used when tokenising fields\n// within a document. These should match otherwise it is\n// not possible to search for some tokens within a document.\n//\n// It is possible for the user to change the separator on the\n// tokenizer so it _might_ clash with any other of the special\n// characters already used within the search string, e.g. :.\n//\n// This means that it is possible to change the separator in\n// such a way that makes some words unsearchable using a search\n// string.\nlunr.QueryLexer.termSeparator = lunr.tokenizer.separator\n\nlunr.QueryLexer.lexText = function (lexer) {\n  while (true) {\n    var char = lexer.next()\n\n    if (char == lunr.QueryLexer.EOS) {\n      return lunr.QueryLexer.lexEOS\n    }\n\n    // Escape character is '\\'\n    if (char.charCodeAt(0) == 92) {\n      lexer.escapeCharacter()\n      continue\n    }\n\n    if (char == \":\") {\n      return lunr.QueryLexer.lexField\n    }\n\n    if (char == \"~\") {\n      lexer.backup()\n      if (lexer.width() > 0) {\n        lexer.emit(lunr.QueryLexer.TERM)\n      }\n      return lunr.QueryLexer.lexEditDistance\n    }\n\n    if (char == \"^\") {\n      lexer.backup()\n      if (lexer.width() > 0) {\n        lexer.emit(lunr.QueryLexer.TERM)\n      }\n      return lunr.QueryLexer.lexBoost\n    }\n\n    // \"+\" indicates term presence is required\n    // checking for length to ensure that only\n    // leading \"+\" are considered\n    if (char == \"+\" && lexer.width() === 1) {\n      lexer.emit(lunr.QueryLexer.PRESENCE)\n      return lunr.QueryLexer.lexText\n    }\n\n    // \"-\" indicates term presence is prohibited\n    // checking for length to ensure that only\n    // leading \"-\" are considered\n    if (char == \"-\" && lexer.width() === 1) {\n      lexer.emit(lunr.QueryLexer.PRESENCE)\n      return lunr.QueryLexer.lexText\n    }\n\n    if (char.match(lunr.QueryLexer.termSeparator)) {\n      return lunr.QueryLexer.lexTerm\n    }\n  }\n}\n\nlunr.QueryParser = function (str, query) {\n  this.lexer = new lunr.QueryLexer (str)\n  this.query = query\n  this.currentClause = {}\n  this.lexemeIdx = 0\n}\n\nlunr.QueryParser.prototype.parse = function () {\n  this.lexer.run()\n  this.lexemes = this.lexer.lexemes\n\n  var state = lunr.QueryParser.parseClause\n\n  while (state) {\n    state = state(this)\n  }\n\n  return this.query\n}\n\nlunr.QueryParser.prototype.peekLexeme = function () {\n  return this.lexemes[this.lexemeIdx]\n}\n\nlunr.QueryParser.prototype.consumeLexeme = function () {\n  var lexeme = this.peekLexeme()\n  this.lexemeIdx += 1\n  return lexeme\n}\n\nlunr.QueryParser.prototype.nextClause = function () {\n  var completedClause = this.currentClause\n  this.query.clause(completedClause)\n  this.currentClause = {}\n}\n\nlunr.QueryParser.parseClause = function (parser) {\n  var lexeme = parser.peekLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  switch (lexeme.type) {\n    case lunr.QueryLexer.PRESENCE:\n      return lunr.QueryParser.parsePresence\n    case lunr.QueryLexer.FIELD:\n      return lunr.QueryParser.parseField\n    case lunr.QueryLexer.TERM:\n      return lunr.QueryParser.parseTerm\n    default:\n      var errorMessage = \"expected either a field or a term, found \" + lexeme.type\n\n      if (lexeme.str.length >= 1) {\n        errorMessage += \" with value '\" + lexeme.str + \"'\"\n      }\n\n      throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n}\n\nlunr.QueryParser.parsePresence = function (parser) {\n  var lexeme = parser.consumeLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  switch (lexeme.str) {\n    case \"-\":\n      parser.currentClause.presence = lunr.Query.presence.PROHIBITED\n      break\n    case \"+\":\n      parser.currentClause.presence = lunr.Query.presence.REQUIRED\n      break\n    default:\n      var errorMessage = \"unrecognised presence operator'\" + lexeme.str + \"'\"\n      throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n\n  var nextLexeme = parser.peekLexeme()\n\n  if (nextLexeme == undefined) {\n    var errorMessage = \"expecting term or field, found nothing\"\n    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n\n  switch (nextLexeme.type) {\n    case lunr.QueryLexer.FIELD:\n      return lunr.QueryParser.parseField\n    case lunr.QueryLexer.TERM:\n      return lunr.QueryParser.parseTerm\n    default:\n      var errorMessage = \"expecting term or field, found '\" + nextLexeme.type + \"'\"\n      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)\n  }\n}\n\nlunr.QueryParser.parseField = function (parser) {\n  var lexeme = parser.consumeLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  if (parser.query.allFields.indexOf(lexeme.str) == -1) {\n    var possibleFields = parser.query.allFields.map(function (f) { return \"'\" + f + \"'\" }).join(', '),\n        errorMessage = \"unrecognised field '\" + lexeme.str + \"', possible fields: \" + possibleFields\n\n    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n\n  parser.currentClause.fields = [lexeme.str]\n\n  var nextLexeme = parser.peekLexeme()\n\n  if (nextLexeme == undefined) {\n    var errorMessage = \"expecting term, found nothing\"\n    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n\n  switch (nextLexeme.type) {\n    case lunr.QueryLexer.TERM:\n      return lunr.QueryParser.parseTerm\n    default:\n      var errorMessage = \"expecting term, found '\" + nextLexeme.type + \"'\"\n      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)\n  }\n}\n\nlunr.QueryParser.parseTerm = function (parser) {\n  var lexeme = parser.consumeLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  parser.currentClause.term = lexeme.str.toLowerCase()\n\n  if (lexeme.str.indexOf(\"*\") != -1) {\n    parser.currentClause.usePipeline = false\n  }\n\n  var nextLexeme = parser.peekLexeme()\n\n  if (nextLexeme == undefined) {\n    parser.nextClause()\n    return\n  }\n\n  switch (nextLexeme.type) {\n    case lunr.QueryLexer.TERM:\n      parser.nextClause()\n      return lunr.QueryParser.parseTerm\n    case lunr.QueryLexer.FIELD:\n      parser.nextClause()\n      return lunr.QueryParser.parseField\n    case lunr.QueryLexer.EDIT_DISTANCE:\n      return lunr.QueryParser.parseEditDistance\n    case lunr.QueryLexer.BOOST:\n      return lunr.QueryParser.parseBoost\n    case lunr.QueryLexer.PRESENCE:\n      parser.nextClause()\n      return lunr.QueryParser.parsePresence\n    default:\n      var errorMessage = \"Unexpected lexeme type '\" + nextLexeme.type + \"'\"\n      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)\n  }\n}\n\nlunr.QueryParser.parseEditDistance = function (parser) {\n  var lexeme = parser.consumeLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  var editDistance = parseInt(lexeme.str, 10)\n\n  if (isNaN(editDistance)) {\n    var errorMessage = \"edit distance must be numeric\"\n    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n\n  parser.currentClause.editDistance = editDistance\n\n  var nextLexeme = parser.peekLexeme()\n\n  if (nextLexeme == undefined) {\n    parser.nextClause()\n    return\n  }\n\n  switch (nextLexeme.type) {\n    case lunr.QueryLexer.TERM:\n      parser.nextClause()\n      return lunr.QueryParser.parseTerm\n    case lunr.QueryLexer.FIELD:\n      parser.nextClause()\n      return lunr.QueryParser.parseField\n    case lunr.QueryLexer.EDIT_DISTANCE:\n      return lunr.QueryParser.parseEditDistance\n    case lunr.QueryLexer.BOOST:\n      return lunr.QueryParser.parseBoost\n    case lunr.QueryLexer.PRESENCE:\n      parser.nextClause()\n      return lunr.QueryParser.parsePresence\n    default:\n      var errorMessage = \"Unexpected lexeme type '\" + nextLexeme.type + \"'\"\n      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)\n  }\n}\n\nlunr.QueryParser.parseBoost = function (parser) {\n  var lexeme = parser.consumeLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  var boost = parseInt(lexeme.str, 10)\n\n  if (isNaN(boost)) {\n    var errorMessage = \"boost must be numeric\"\n    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n\n  parser.currentClause.boost = boost\n\n  var nextLexeme = parser.peekLexeme()\n\n  if (nextLexeme == undefined) {\n    parser.nextClause()\n    return\n  }\n\n  switch (nextLexeme.type) {\n    case lunr.QueryLexer.TERM:\n      parser.nextClause()\n      return lunr.QueryParser.parseTerm\n    case lunr.QueryLexer.FIELD:\n      parser.nextClause()\n      return lunr.QueryParser.parseField\n    case lunr.QueryLexer.EDIT_DISTANCE:\n      return lunr.QueryParser.parseEditDistance\n    case lunr.QueryLexer.BOOST:\n      return lunr.QueryParser.parseBoost\n    case lunr.QueryLexer.PRESENCE:\n      parser.nextClause()\n      return lunr.QueryParser.parsePresence\n    default:\n      var errorMessage = \"Unexpected lexeme type '\" + nextLexeme.type + \"'\"\n      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)\n  }\n}\n\n  /**\n   * export the module via AMD, CommonJS or as a browser global\n   * Export code from https://github.com/umdjs/umd/blob/master/returnExports.js\n   */\n  ;(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n      // AMD. Register as an anonymous module.\n      define(factory)\n    } else if (typeof exports === 'object') {\n      /**\n       * Node. Does not work with strict CommonJS, but\n       * only CommonJS-like enviroments that support module.exports,\n       * like Node.\n       */\n      module.exports = factory()\n    } else {\n      // Browser globals (root is window)\n      root.lunr = factory()\n    }\n  }(this, function () {\n    /**\n     * Just return a value to define the module export.\n     * This example returns an object, but the module\n     * can return a function as the exported value.\n     */\n    return lunr\n  }))\n})();\n"],"names":["global","step2list","step3list","v","C","V","meq1","mgr1","s_v","re_mgr0","re_mgr1","re_meq1","re_s_v","re_1a","re2_1a","re_1b","re2_1b","re_1b_2","re2_1b_2","re3_1b_2","re4_1b_2","re_1c","re_2","re_3","re_4","re2_4","re_5","re_5_1","re3_5","porterStemmer","root","factory","lunr","config","builder","Builder","pipeline","add","trimmer","stopWordFilter","stemmer","searchPipeline","call","build","version","utils","warn","this","message","console","asString","obj","toString","clone","Object","create","keys","i","length","key","val","Array","isArray","slice","TypeError","FieldRef","docRef","fieldName","stringValue","_stringValue","joiner","fromString","s","n","indexOf","fieldRef","prototype","undefined","Set","elements","complete","intersect","other","union","contains","empty","object","a","b","intersection","element","push","concat","idf","posting","documentCount","documentsWithTerm","x","Math","log","abs","Token","str","metadata","update","fn","tokenizer","map","t","toLowerCase","len","tokens","sliceEnd","sliceStart","sliceLength","charAt","match","separator","tokenMetadata","Pipeline","_stack","registeredFunctions","registerFunction","label","warnIfFunctionNotRegistered","load","serialised","forEach","fnName","Error","arguments","after","existingFn","newFn","pos","splice","before","remove","run","stackLength","memo","j","result","k","runString","token","reset","toJSON","Vector","_magnitude","positionForIndex","index","start","end","pivotPoint","floor","pivotIndex","insert","insertIdx","upsert","position","magnitude","sumOfSquares","elementsLength","sqrt","dot","otherVector","dotProduct","aLen","bLen","aVal","bVal","similarity","toArray","output","ational","tional","enci","anci","izer","bli","alli","entli","eli","ousli","ization","ation","ator","alism","iveness","fulness","ousness","aliti","iviti","biliti","logi","icate","ative","alize","iciti","ical","ful","ness","c","RegExp","w","stem","suffix","firstch","re","re2","re3","re4","substr","toUpperCase","test","replace","fp","exec","generateStopWordFilter","stopWords","words","reduce","stopWord","TokenSet","final","edges","id","_nextId","fromArray","arr","finish","fromClause","clause","fromFuzzyString","term","editDistance","stack","node","editsRemaining","frame","pop","noEditNode","char","insertionNode","substitutionNode","transposeNode","charA","charB","next","prefix","edge","_str","labels","sort","qNode","qEdges","qLen","nEdges","nLen","q","qEdge","nEdge","previousWord","uncheckedNodes","minimizedNodes","word","commonPrefix","minimize","child","nextNode","parent","downTo","childKey","Index","attrs","invertedIndex","fieldVectors","tokenSet","fields","search","queryString","query","QueryParser","parse","Query","matchingFields","queryVectors","termFieldCache","requiredMatches","prohibitedMatches","clauses","terms","clauseMatches","usePipeline","m","termTokenSet","expandedTerms","presence","REQUIRED","field","expandedTerm","termIndex","_index","fieldPosting","matchingDocumentRefs","termField","matchingDocumentsSet","PROHIBITED","boost","l","fieldMatch","matchingDocumentRef","matchingFieldRef","MatchData","allRequiredMatches","allProhibitedMatches","matchingFieldRefs","results","matches","isNegated","docMatch","fieldVector","score","matchData","combine","ref","serializedIndex","serializedVectors","serializedInvertedIndex","tokenSetBuilder","tuple","_ref","_fields","_documents","fieldTermFrequencies","fieldLengths","_b","_k1","metadataWhitelist","attributes","RangeError","number","k1","doc","extractor","fieldTerms","metadataKey","calculateAverageFieldLengths","fieldRefs","numberOfFields","accumulator","documentsWithField","averageFieldLength","createFieldVectors","fieldRefsLength","termIdfCache","fieldLength","termFrequencies","termsLength","fieldBoost","docBoost","scoreWithPrecision","tf","round","createTokenSet","use","args","unshift","apply","clonedMetadata","metadataKeys","otherMatchData","allFields","wildcard","String","NONE","LEADING","TRAILING","OPTIONAL","options","QueryParseError","name","QueryLexer","lexemes","escapeCharPositions","state","lexText","sliceString","subSlices","join","emit","type","escapeCharacter","EOS","width","ignore","backup","acceptDigitRun","charCode","charCodeAt","more","FIELD","TERM","EDIT_DISTANCE","BOOST","PRESENCE","lexField","lexer","lexTerm","lexEditDistance","lexBoost","lexEOS","termSeparator","currentClause","lexemeIdx","parseClause","peekLexeme","consumeLexeme","lexeme","nextClause","completedClause","parser","parsePresence","parseField","parseTerm","errorMessage","nextLexeme","possibleFields","f","parseEditDistance","parseBoost","parseInt","isNaN","define","amd","exports","module"],"mappings":"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"}