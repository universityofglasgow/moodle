{"version":3,"file":"filters.min.js","sources":["../src/filters.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Report builder filter management\n *\n * @module      core_reportbuilder/filters\n * @copyright   2021 Paul Holden <paulh@moodle.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {dispatchEvent} from 'core/event_dispatcher';\nimport {loadFragment} from 'core/fragment';\nimport Notification from 'core/notification';\nimport Pending from 'core/pending';\nimport {get_string as getString} from 'core/str';\nimport Templates from 'core/templates';\nimport {add as addToast} from 'core/toast';\nimport DynamicForm from 'core_form/dynamicform';\nimport * as reportEvents from 'core_reportbuilder/local/events';\nimport * as reportSelectors from 'core_reportbuilder/local/selectors';\nimport {resetFilters} from 'core_reportbuilder/local/repository/filters';\n\n/**\n * Update filter button text to indicate applied filter count\n *\n * @param {Element} reportElement\n * @param {Number} filterCount\n */\nconst setFilterButtonCount = async(reportElement, filterCount) => {\n    const filterButtonLabel = reportElement.querySelector(reportSelectors.regions.filterButtonLabel);\n\n    if (filterCount > 0) {\n        filterButtonLabel.textContent = await getString('filtersappliedx', 'core_reportbuilder', filterCount);\n    } else {\n        filterButtonLabel.textContent = await getString('filters', 'moodle');\n    }\n};\n\n/**\n * Initialise module for given report\n *\n * @method\n * @param {Number} reportId\n * @param {Number} contextId\n */\nexport const init = (reportId, contextId) => {\n    const reportElement = document.querySelector(reportSelectors.forReport(reportId));\n    const filterFormContainer = reportElement.querySelector(reportSelectors.regions.filtersForm);\n\n    // Ensure we only add our listeners once (can be called multiple times by mustache template).\n    if (filterFormContainer.dataset.initialized) {\n        return;\n    }\n    filterFormContainer.dataset.initialized = true;\n\n    const filterForm = new DynamicForm(filterFormContainer, '\\\\core_reportbuilder\\\\form\\\\filter');\n\n    // Submit report filters.\n    filterForm.addEventListener(filterForm.events.FORM_SUBMITTED, event => {\n        event.preventDefault();\n\n        // After the form has been submitted, we should trigger report table reload.\n        dispatchEvent(reportEvents.tableReload, {}, reportElement);\n        setFilterButtonCount(reportElement, event.detail);\n\n        getString('filtersapplied', 'core_reportbuilder')\n            .then(addToast)\n            .catch(Notification.exception);\n    });\n\n    // Reset report filters.\n    filterForm.addEventListener(filterForm.events.NOSUBMIT_BUTTON_PRESSED, event => {\n        event.preventDefault();\n\n        const pendingPromise = new Pending('core_reportbuilder/filters:reset');\n        const reportParameters = reportElement.dataset.parameter;\n\n        resetFilters(reportId, reportParameters)\n            .then(() => getString('filtersreset', 'core_reportbuilder'))\n            .then(addToast)\n            .then(() => loadFragment('core_reportbuilder', 'filters_form', contextId, {\n                reportid: reportId,\n                parameters: reportParameters,\n            }))\n            .then((html, js) => {\n                Templates.replaceNodeContents(filterFormContainer, html, js);\n\n                dispatchEvent(reportEvents.tableReload, {}, reportElement);\n                setFilterButtonCount(reportElement, 0);\n\n                return pendingPromise.resolve();\n            })\n            .catch(Notification.exception);\n    });\n\n    // Modify \"region-main\" overflow for big filter forms.\n    document.querySelector('#region-main').style.overflowX = \"visible\";\n};\n"],"names":["_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","_interopRequireWildcard","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_interopRequireDefault","_notification","_pending","_templates","_dynamicform","reportEvents","reportSelectors","setFilterButtonCount","async","reportElement","filterCount","filterButtonLabel","querySelector","regions","textContent","getString","_exports","init","reportId","contextId","document","forReport","filterFormContainer","filtersForm","dataset","initialized","filterForm","DynamicForm","addEventListener","events","FORM_SUBMITTED","event","preventDefault","dispatchEvent","tableReload","detail","then","addToast","catch","Notification","exception","NOSUBMIT_BUTTON_PRESSED","pendingPromise","Pending","reportParameters","parameter","resetFilters","loadFragment","reportid","parameters","html","js","Templates","replaceNodeContents","resolve","style","overflowX"],"mappings":"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"}