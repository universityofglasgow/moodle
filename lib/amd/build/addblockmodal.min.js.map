{"version":3,"sources":["../src/addblockmodal.js"],"names":["SELECTORS","ADD_BLOCK","listenerEventsRegistered","registerListenerEvents","pageType","pageLayout","addBlockUrl","document","addEventListener","e","addBlock","target","closest","preventDefault","addBlockModal","addBlockModalUrl","dataset","url","buildAddBlockModal","then","modal","modalBody","renderBlocks","setBody","show","catch","destroy","ModalFactory","create","type","types","CANCEL","title","getAddableBlocks","blocks","Templates","render","request","methodname","args","pagecontextid","M","cfg","contextid","pagetype","pagelayout","Ajax","call","init"],"mappings":"sMAuBA,OACA,OAEA,O,qXAEMA,CAAAA,CAAS,CAAG,CACdC,SAAS,CAAE,yBADG,C,CAKdC,CAAwB,G,CAUtBC,CAAsB,CAAG,SAACC,CAAD,CAAWC,CAAX,CAAuBC,CAAvB,CAAuC,CAClEC,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,CAAmC,SAAAC,CAAC,CAAI,CAEpC,GAAMC,CAAAA,CAAQ,CAAGD,CAAC,CAACE,MAAF,CAASC,OAAT,CAAiBZ,CAAS,CAACC,SAA3B,CAAjB,CACA,GAAIS,CAAJ,CAAc,CACVD,CAAC,CAACI,cAAF,GADU,GAGNC,CAAAA,CAAa,CAAG,IAHV,CAINC,CAAgB,QAAGT,CAAH,WAAGA,CAAH,CAAGA,CAAH,CAAkBI,CAAQ,CAACM,OAAT,CAAiBC,GAJ7C,CAMVC,CAAkB,GACbC,IADL,CACU,SAAAC,CAAK,CAAI,CACXN,CAAa,CAAGM,CAAhB,CACA,GAAMC,CAAAA,CAAS,CAAGC,CAAY,CAACP,CAAD,CAAmBX,CAAnB,CAA6BC,CAA7B,CAA9B,CACAe,CAAK,CAACG,OAAN,CAAcF,CAAd,EACAD,CAAK,CAACI,IAAN,GAEA,MAAOH,CAAAA,CACV,CARL,EASKI,KATL,CASW,UAAM,CACTX,CAAa,CAACY,OAAd,EACH,CAXL,CAYH,CACJ,CAtBD,CAuBH,C,CAQKR,CAAkB,CAAG,UAAM,CAC7B,MAAOS,WAAaC,MAAb,CAAoB,CACvBC,IAAI,CAAEF,UAAaG,KAAb,CAAmBC,MADF,CAEvBC,KAAK,CAAE,iBAAU,UAAV,CAFgB,CAApB,CAIV,C,CAWKV,CAAY,4CAAG,WAAMhB,CAAN,CAAmBF,CAAnB,CAA6BC,CAA7B,wGAEI4B,CAAAA,CAAgB,CAAC7B,CAAD,CAAWC,CAAX,CAFpB,QAEX6B,CAFW,iCAIVC,UAAUC,MAAV,CAAiB,qBAAjB,CAAwC,CAC3CF,MAAM,CAAEA,CADmC,CAE3CjB,GAAG,CAAEX,CAFsC,CAAxC,CAJU,0CAAH,uD,CAkBZ2B,CAAgB,4CAAG,WAAM7B,CAAN,CAAgBC,CAAhB,yFACfgC,CADe,CACL,CACZC,UAAU,CAAE,iCADA,CAEZC,IAAI,CAAE,CACFC,aAAa,CAAEC,CAAC,CAACC,GAAF,CAAMC,SADnB,CAEFC,QAAQ,CAAExC,CAFR,CAGFyC,UAAU,CAAExC,CAHV,CAFM,CADK,0BAUdyC,UAAKC,IAAL,CAAU,CAACV,CAAD,CAAV,EAAqB,CAArB,CAVc,0CAAH,uD,CAqBTW,CAAI,CAAG,SAAC5C,CAAD,CAAWC,CAAX,CAA8C,IAAvBC,CAAAA,CAAuB,wDAAT,IAAS,CAC9D,GAAI,CAACJ,CAAL,CAA+B,CAC3BC,CAAsB,CAACC,CAAD,CAAWC,CAAX,CAAuBC,CAAvB,CAAtB,CACAJ,CAAwB,GAC3B,CACJ,C","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Show an add block modal instead of doing it on a separate page.\n *\n * @module     core/addblockmodal\n * @copyright  2016 Damyon Wiese <damyon@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport ModalFactory from 'core/modal_factory';\nimport Templates from 'core/templates';\nimport {get_string as getString} from 'core/str';\nimport Ajax from 'core/ajax';\n\nconst SELECTORS = {\n    ADD_BLOCK: '[data-key=\"addblock\"]'\n};\n\n// Ensure we only add our listeners once.\nlet listenerEventsRegistered = false;\n\n/**\n * Register related event listeners.\n *\n * @method registerListenerEvents\n * @param {String} pageType The type of the page\n * @param {String} pageLayout The layout of the page\n * @param {String|null} addBlockUrl The add block URL\n */\nconst registerListenerEvents = (pageType, pageLayout, addBlockUrl) => {\n    document.addEventListener('click', e => {\n\n        const addBlock = e.target.closest(SELECTORS.ADD_BLOCK);\n        if (addBlock) {\n            e.preventDefault();\n\n            let addBlockModal = null;\n            let addBlockModalUrl = addBlockUrl ?? addBlock.dataset.url;\n\n            buildAddBlockModal()\n                .then(modal => {\n                    addBlockModal = modal;\n                    const modalBody = renderBlocks(addBlockModalUrl, pageType, pageLayout);\n                    modal.setBody(modalBody);\n                    modal.show();\n\n                    return modalBody;\n                })\n                .catch(() => {\n                    addBlockModal.destroy();\n                });\n        }\n    });\n};\n\n/**\n * Method that creates the 'add block' modal.\n *\n * @method buildAddBlockModal\n * @returns {Promise} The modal promise (modal's body will be rendered later).\n */\nconst buildAddBlockModal = () => {\n    return ModalFactory.create({\n        type: ModalFactory.types.CANCEL,\n        title: getString('addblock')\n    });\n};\n\n/**\n * Method that renders the list of available blocks.\n *\n * @method renderBlocks\n * @param {String} addBlockUrl The add block URL\n * @param {String} pageType The type of the page\n * @param {String} pageLayout The layout of the page\n * @return {Promise}\n */\nconst renderBlocks = async(addBlockUrl, pageType, pageLayout) => {\n    // Fetch all addable blocks in the given page.\n    const blocks = await getAddableBlocks(pageType, pageLayout);\n\n    return Templates.render('core/add_block_body', {\n        blocks: blocks,\n        url: addBlockUrl\n    });\n};\n\n/**\n * Method that fetches all addable blocks in a given page.\n *\n * @method getAddableBlocks\n * @param {String} pageType The type of the page\n * @param {String} pageLayout The layout of the page\n * @return {Promise}\n */\nconst getAddableBlocks = async(pageType, pageLayout) => {\n    const request = {\n        methodname: 'core_block_fetch_addable_blocks',\n        args: {\n            pagecontextid: M.cfg.contextid,\n            pagetype: pageType,\n            pagelayout: pageLayout\n        },\n    };\n\n    return Ajax.call([request])[0];\n};\n\n/**\n * Set up the actions.\n *\n * @method init\n * @param {String} pageType The type of the page\n * @param {String} pageLayout The layout of the page\n * @param {String|null} addBlockUrl The add block URL\n */\nexport const init = (pageType, pageLayout, addBlockUrl = null) => {\n    if (!listenerEventsRegistered) {\n        registerListenerEvents(pageType, pageLayout, addBlockUrl);\n        listenerEventsRegistered = true;\n    }\n};\n"],"file":"addblockmodal.min.js"}