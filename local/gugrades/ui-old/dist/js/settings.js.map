{"version":3,"file":"js/settings.js","mappings":"mYAsCUA,GAAYC,EAAAA,EAAAA,IAAMC,EAAO,QAGzBC,GAAWC,EAAAA,EAAAA,IAAO,Y,6pBCtC5B,MAAMC,EAAc,EAEpB,Q,iCCQI,MAAMC,GAAgBC,EAAAA,EAAAA,KAAI,GACpBC,GAAcD,EAAAA,EAAAA,KAAI,GAClBJ,GAAWC,EAAAA,EAAAA,IAAO,YAElBK,GAAQC,EAAAA,EAAAA,MAKd,SAASC,EAAcC,GACnB,MAAMC,EAAKC,OAAOD,GACZE,EAAWF,EAAGE,SACdC,EAAYH,EAAGG,UAEjBJ,GACAI,EAAU,CAAC,CACPC,WAAY,uBACZC,KAAM,CACFH,SAAUA,MAEd,GACHI,MAAK,KACFV,EAAMW,QAAQjB,EAASkB,aAAvB,IAEHC,OAAOC,IACJT,OAAOU,QAAQD,MAAMA,GACrBd,EAAMc,MAAM,gDAAZ,IAIRf,EAAYiB,OAAQ,CACvB,C,OAKDC,EAAAA,EAAAA,KAAU,KACN,MAAMb,EAAKC,OAAOD,GACZE,EAAWF,EAAGE,SACdC,EAAYH,EAAGG,UAErBA,EAAU,CAAC,CACPC,WAAY,gCACZC,KAAM,CACFH,SAAUA,EACVY,WAAY,iCAEhB,GACHR,MAAMS,IACHtB,EAAcmB,MAAQG,EAAO,gBAA7B,IAEHN,OAAOC,IACJT,OAAOU,QAAQD,MAAMA,GACrBd,EAAMc,MAAM,gDAAZ,GAZJ,I,gVCnDR,MAAM,EAAc,EAEpB,Q,6DCoBI,MAAMpB,GAAWC,EAAAA,EAAAA,IAAO,YAClByB,GAAkBtB,EAAAA,EAAAA,KAAI,GAEtBE,GAAQC,EAAAA,EAAAA,MAKd,SAASoB,IAGL,MAAMC,EAAIjB,OAAOkB,OAEbH,EAAgBJ,MAChBM,EAAE,iBAAiBE,IAAI,SAAU,gBAEjCF,EAAE,iBAAiBE,IAAI,SAAU,eAIxC,CAKD,SAASC,IACL,MAAMrB,EAAKC,OAAOD,GACZE,EAAWF,EAAGE,SACdC,EAAYH,EAAGG,UAErBA,EAAU,CAAC,CACPC,WAAY,+BACZC,KAAM,CACFH,SAAUA,EACVoB,YAAa,EACbC,SAAU,CACN,CACIC,KAAM,kBACNZ,MAAOI,EAAgBJ,YAInC,GACHN,MAAK,KACFV,EAAMW,QAAQjB,EAASmC,cAAvB,IAEHhB,OAAOC,IACJT,OAAOU,QAAQD,MAAMA,GACrBd,EAAMc,MAAM,gDAAZ,IAGJO,GACH,C,OAKDJ,EAAAA,EAAAA,KAAU,KACN,MAAMb,EAAKC,OAAOD,GACZE,EAAWF,EAAGE,SACdC,EAAYH,EAAGG,UAErBA,EAAU,CAAC,CACPC,WAAY,8BACZC,KAAM,CACFH,SAAUA,EACVoB,YAAa,MAEjB,GACHhB,MAAMiB,IACHA,EAASG,SAASC,IAGM,mBAAhBA,EAAQH,OACRR,EAAgBJ,QAAQe,EAAQf,MACnC,GALL,IAQHH,OAAOC,IACJT,OAAOU,QAAQD,MAAMA,GACrBd,EAAMc,MAAM,gDAAZ,GAlBJ,I,6ZCpFR,MAAM,EAAc,EAEpB,O","sources":["webpack://gugrades_ui/./src/components/ConfirmModal.vue","webpack://gugrades_ui/./src/components/ConfirmModal.vue?51f7","webpack://gugrades_ui/./src/components/ResetButton.vue","webpack://gugrades_ui/./src/components/ResetButton.vue?edd7","webpack://gugrades_ui/./src/views/SettingsPage.vue","webpack://gugrades_ui/./src/views/SettingsPage.vue?3715"],"sourcesContent":["<template>\n    <!--\n    <ModalForm>\n        <template #header>\n            <h4>{{ mstrings.confirm }}</h4>\n        </template>\n        <template #body>\n            <div class=\"alert alert-danger\">\n                <p><strong>{{  props.message }}</strong></p>\n                <p>{{ mstrings.areyousure }}</p>\n            </div>\n        </template>\n        <template #footer>\n            <button class=\"btn btn-primary\" @click=\"emit('confirm', true)\">{{ mstrings.yes }}</button>\n            <button class=\"btn btn-warning\" @click=\"emit('confirm', false)\">{{ mstrings.no }}</button>\n        </template>\n    </ModalForm>\n-->\n    <VueModal v-model=\"showmodal\" modalClass=\"col-11 col-lg-5 rounded\" :title=\"mstrings.confirm\">\n        <div class=\"alert alert-danger\">\n            <p><strong>{{  props.message }}</strong></p>\n            <p>{{ mstrings.areyousure }}</p>\n        </div>\n        <div class=\"mt-2 pt-2 border-top\">\n            <button class=\"btn btn-primary mr-1\" @click=\"emit('confirm', true)\">{{ mstrings.yes }}</button>\n            <button class=\"btn btn-warning\" @click=\"emit('confirm', false)\">{{ mstrings.no }}</button>\n        </div>\n    </VueModal>\n</template>\n\n<script setup>\n    import {defineProps, defineEmits, inject, toRef} from '@vue/runtime-core';\n\n    const props = defineProps({\n        show: Boolean,\n        message: String,\n    });\n\n    const showmodal = toRef(props, 'show');\n\n    const emit = defineEmits(['confirm']);\n    const mstrings = inject('mstrings');\n</script>","import script from \"./ConfirmModal.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ConfirmModal.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n    <button v-if=\"hascapability\" type=\"button\" class=\"btn btn-danger  mr-1\" @click=\"showconfirm = true\">\n        {{ mstrings.resetcourse }}\n    </button>\n\n    <ConfirmModal :show=\"showconfirm\" :message=\"mstrings.resetcourseconfirm\" @confirm=\"confirmdelete\"></ConfirmModal>\n</template>\n\n<script setup>\n    import {ref, onMounted, inject} from '@vue/runtime-core';\n    import ConfirmModal from '@/components/ConfirmModal.vue';\n    import { useToast } from \"vue-toastification\";\n\n    const hascapability = ref(false);\n    const showconfirm = ref(false);\n    const mstrings = inject('mstrings');\n\n    const toast = useToast();\n\n    /**\n     * Process confirmation\n     */\n    function confirmdelete(confirmyes) {\n        const GU = window.GU;\n        const courseid = GU.courseid;\n        const fetchMany = GU.fetchMany;\n\n        if (confirmyes) {\n            fetchMany([{\n                methodname: 'local_gugrades_reset',\n                args: {\n                    courseid: courseid,\n                }\n            }])[0]\n            .then(() => {\n                toast.success(mstrings.resetsuccess)\n            })\n            .catch((error) => {\n                window.console.error(error);\n                toast.error('Error communicating with server (see console)');\n            });\n        }\n\n        showconfirm.value = false;\n    }\n\n    /**\n     * Check capability\n     */\n    onMounted(() => {\n        const GU = window.GU;\n        const courseid = GU.courseid;\n        const fetchMany = GU.fetchMany;\n\n        fetchMany([{\n            methodname: 'local_gugrades_has_capability',\n            args: {\n                courseid: courseid,\n                capability: 'local/gugrades:resetcourse'\n            }\n        }])[0]\n        .then((result) => {\n            hascapability.value = result['hascapability'];\n        })\n        .catch((error) => {\n            window.console.error(error);\n            toast.error('Error communicating with server (see console)');\n        });\n\n    });\n\n</script>","import script from \"./ResetButton.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ResetButton.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n    <div>\n        <h1>{{ mstrings.settings }}</h1>\n\n        <FormKit type=\"form\" @submit=\"submit_form\">\n            <FormKit\n                type=\"checkbox\"\n                :label=\"mstrings.enabledashboard\"\n                v-model=\"enabledashboard\"\n                >\n            </FormKit>\n\n        </FormKit>\n\n        <div class=\"mt-5\">\n            <ResetButton></ResetButton>\n        </div>\n    </div>\n</template>\n\n<script setup>\n    import {ref, inject, onMounted} from '@vue/runtime-core';\n    import { useToast } from \"vue-toastification\";\n    import ResetButton from '@/components/ResetButton.vue';\n\n    const mstrings = inject('mstrings');\n    const enabledashboard = ref(false);\n\n    const toast = useToast();\n\n    /**\n     * Greyscale MyGrades icon if not enabled :)\n     */\n    function greyscale_icon() {\n\n        // Bodge to get jQuery needed for Bootstrap JS.\n        const $ = window.jQuery;\n\n        if (enabledashboard.value) {\n            $('#mygradeslogo').css('filter', 'grayscale(0)');\n        } else {\n            $('#mygradeslogo').css('filter', 'grayscale(1)');\n        }\n\n        //const selector = $('#mygradeslogo');\n    }\n\n    /**\n     * Submit button clicked\n     */\n    function submit_form() {\n        const GU = window.GU;\n        const courseid = GU.courseid;\n        const fetchMany = GU.fetchMany;\n\n        fetchMany([{\n            methodname: 'local_gugrades_save_settings',\n            args: {\n                courseid: courseid,\n                gradeitemid: 0,\n                settings: [\n                    {\n                        name: 'enabledashboard',\n                        value: enabledashboard.value,\n                    },\n                ]\n            }\n        }])[0]\n        .then(() => {\n            toast.success(mstrings.settingssaved);\n        })\n        .catch((error) => {\n            window.console.error(error);\n            toast.error('Error communicating with server (see console)');\n        });\n\n        greyscale_icon();\n    }\n\n    /**\n     * Load initial page\n     */\n    onMounted(() => {\n        const GU = window.GU;\n        const courseid = GU.courseid;\n        const fetchMany = GU.fetchMany;\n\n        fetchMany([{\n            methodname: 'local_gugrades_get_settings',\n            args: {\n                courseid: courseid,\n                gradeitemid: 0,\n            }\n        }])[0]\n        .then((settings) => {\n            settings.forEach((setting) => {\n\n                // TODO: Something a bit cleverer than this\n                if (setting.name == 'enabledashboard') {\n                    enabledashboard.value = setting.value ? true : false;\n                }\n            })\n        })\n        .catch((error) => {\n            window.console.error(error);\n            toast.error('Error communicating with server (see console)');\n        });\n    })\n\n</script>","import script from \"./SettingsPage.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./SettingsPage.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["showmodal","toRef","props","mstrings","inject","__exports__","hascapability","ref","showconfirm","toast","useToast","confirmdelete","confirmyes","GU","window","courseid","fetchMany","methodname","args","then","success","resetsuccess","catch","error","console","value","onMounted","capability","result","enabledashboard","greyscale_icon","$","jQuery","css","submit_form","gradeitemid","settings","name","settingssaved","forEach","setting"],"sourceRoot":""}