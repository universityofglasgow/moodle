{"version":3,"file":"dynamic.min.js","sources":["../src/dynamic.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Module to handle dynamic table features.\n *\n * @module     core_table/dynamic\n * @copyright  2020 Simey Lameze <simey@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport * as Selectors from 'core_table/local/dynamic/selectors';\nimport Events from './local/dynamic/events';\nimport Pending from 'core/pending';\nimport {addIconToContainer} from 'core/loadingicon';\nimport {fetch as fetchTableData} from 'core_table/local/dynamic/repository';\nimport Notification from 'core/notification';\n\nlet watching = false;\n\n/**\n * Ensure that a table is a dynamic table.\n *\n * @param {HTMLElement} tableRoot\n * @returns {Bool}\n */\nconst checkTableIsDynamic = tableRoot => {\n    if (!tableRoot) {\n        // The table is not a dynamic table.\n        throw new Error(\"The table specified is not a dynamic table and cannot be updated\");\n    }\n\n    if (!tableRoot.matches(Selectors.main.region)) {\n        // The table is not a dynamic table.\n        throw new Error(\"The table specified is not a dynamic table and cannot be updated\");\n    }\n\n    return true;\n};\n\n/**\n * Get the filterset data from a known dynamic table.\n *\n * @param {HTMLElement} tableRoot\n * @returns {Object}\n */\nconst getFiltersetFromTable = tableRoot => {\n    return JSON.parse(tableRoot.dataset.tableFilters);\n};\n\n/**\n * Update the specified table based on its current values.\n *\n * @param {HTMLElement} tableRoot\n * @param {Bool} resetContent\n * @returns {Promise}\n */\nexport const refreshTableContent = (tableRoot, resetContent = false) => {\n    const filterset = getFiltersetFromTable(tableRoot);\n    addIconToContainer(tableRoot);\n\n    const pendingPromise = new Pending('core_table/dynamic:refreshTableContent');\n\n    return fetchTableData(\n        tableRoot.dataset.tableComponent,\n        tableRoot.dataset.tableHandler,\n        tableRoot.dataset.tableUniqueid,\n        {\n            sortData: JSON.parse(tableRoot.dataset.tableSortData),\n            joinType: filterset.jointype,\n            filters: filterset.filters,\n            firstinitial: tableRoot.dataset.tableFirstInitial,\n            lastinitial: tableRoot.dataset.tableLastInitial,\n            pageNumber: tableRoot.dataset.tablePageNumber,\n            pageSize: tableRoot.dataset.tablePageSize,\n            hiddenColumns: JSON.parse(tableRoot.dataset.tableHiddenColumns),\n        },\n        resetContent,\n    )\n    .then(data => {\n        const placeholder = document.createElement('div');\n        placeholder.innerHTML = data.html;\n        tableRoot.replaceWith(...placeholder.childNodes);\n\n        // Update the tableRoot.\n        return getTableFromId(tableRoot.dataset.tableUniqueid);\n    }).then(tableRoot => {\n        tableRoot.dispatchEvent(new CustomEvent(Events.tableContentRefreshed, {\n            bubbles: true,\n        }));\n\n        return tableRoot;\n    })\n    .then(tableRoot => {\n        pendingPromise.resolve();\n\n        return tableRoot;\n    });\n};\n\nexport const updateTable = (tableRoot, {\n    sortBy = null,\n    sortOrder = null,\n    filters = null,\n    firstInitial = null,\n    lastInitial = null,\n    pageNumber = null,\n    pageSize = null,\n    hiddenColumns = null,\n} = {}, refreshContent = true) => {\n    checkTableIsDynamic(tableRoot);\n\n    const pendingPromise = new Pending('core_table/dynamic:updateTable');\n    let tableConfigChanged = false;\n\n    // Update sort fields.\n    if (sortBy && sortOrder) {\n        // Always update the table if requested and there were sort fields.\n        // These fields are only ever normalised in the backend.\n        tableConfigChanged = true;\n\n        const sortData = JSON.parse(tableRoot.dataset.tableSortData);\n        sortData.unshift({\n            sortby: sortBy,\n            sortorder: parseInt(sortOrder, 10),\n        });\n        tableRoot.dataset.tableSortData = JSON.stringify(sortData);\n    }\n\n    // Update initials.\n    if (firstInitial !== null) {\n        if (tableRoot.dataset.tableFirstInitial !== firstInitial) {\n            tableConfigChanged = true;\n        }\n\n        tableRoot.dataset.tableFirstInitial = firstInitial;\n    }\n\n    if (lastInitial !== null) {\n        if (tableRoot.dataset.tableLastInitial !== lastInitial) {\n            tableConfigChanged = true;\n        }\n\n        tableRoot.dataset.tableLastInitial = lastInitial;\n    }\n\n    if (pageSize !== null) {\n        if (tableRoot.dataset.tablePageSize != pageSize) {\n            tableConfigChanged = true;\n        }\n\n        tableRoot.dataset.tablePageSize = pageSize;\n    }\n\n    // Update filters.\n    if (filters) {\n        const filterJson = JSON.stringify(filters);\n\n        if (tableRoot.dataset.tableFilters !== filterJson) {\n            tableConfigChanged = true;\n        }\n\n        tableRoot.dataset.tableFilters = filterJson;\n    }\n\n    // Reset to page 1 when table content is being altered by filtering or sorting.\n    // This ensures the table page being loaded always exists, and gives a consistent experience.\n    if (tableConfigChanged) {\n        pageNumber = 1;\n    }\n\n    // Update hidden columns.\n    if (hiddenColumns) {\n        const columnJson = JSON.stringify(hiddenColumns);\n\n        if (tableRoot.dataset.tableHiddenColumns !== columnJson) {\n            tableConfigChanged = true;\n        }\n\n        tableRoot.dataset.tableHiddenColumns = columnJson;\n    }\n\n    if (pageNumber !== null) {\n        if (tableRoot.dataset.tablePageNumber != pageNumber) {\n            tableConfigChanged = true;\n        }\n\n        tableRoot.dataset.tablePageNumber = pageNumber;\n    }\n\n    // Refresh.\n    if (refreshContent && tableConfigChanged) {\n        return refreshTableContent(tableRoot)\n        .then(tableRoot => {\n            pendingPromise.resolve();\n            return tableRoot;\n        });\n    } else {\n        pendingPromise.resolve();\n        return Promise.resolve(tableRoot);\n    }\n};\n\n/**\n * Get the table dataset for the specified tableRoot, ensuring that the provided table is a dynamic table.\n *\n * @param {HTMLElement} tableRoot\n * @returns {DOMStringMap}\n */\nconst getTableData = tableRoot => {\n    checkTableIsDynamic(tableRoot);\n\n    return tableRoot.dataset;\n};\n\n/**\n * Update the specified table using the new filters.\n *\n * @param {HTMLElement} tableRoot\n * @param {Object} filters\n * @param {Bool} refreshContent\n * @returns {Promise}\n */\nexport const setFilters = (tableRoot, filters, refreshContent = true) =>\n    updateTable(tableRoot, {filters}, refreshContent);\n\n/**\n * Get the filter data for the specified table.\n *\n * @param {HTMLElement} tableRoot\n * @returns {Object}\n */\nexport const getFilters = tableRoot => {\n    checkTableIsDynamic(tableRoot);\n\n    return getFiltersetFromTable(tableRoot);\n};\n\n/**\n * Update the sort order.\n *\n * @param {HTMLElement} tableRoot\n * @param {String} sortBy\n * @param {Number} sortOrder\n * @param {Bool} refreshContent\n * @returns {Promise}\n */\nexport const setSortOrder = (tableRoot, sortBy, sortOrder, refreshContent = true) =>\n    updateTable(tableRoot, {sortBy, sortOrder}, refreshContent);\n\n/**\n * Set the page number.\n *\n * @param {HTMLElement} tableRoot\n * @param {String} pageNumber\n * @param {Bool} refreshContent\n * @returns {Promise}\n */\nexport const setPageNumber = (tableRoot, pageNumber, refreshContent = true) =>\n    updateTable(tableRoot, {pageNumber}, refreshContent);\n\n/**\n * Get the current page number.\n *\n * @param {HTMLElement} tableRoot\n * @returns {Number}\n */\nexport const getPageNumber = tableRoot => getTableData(tableRoot).tablePageNumber;\n\n/**\n * Set the page size.\n *\n * @param {HTMLElement} tableRoot\n * @param {Number} pageSize\n * @param {Bool} refreshContent\n * @returns {Promise}\n */\nexport const setPageSize = (tableRoot, pageSize, refreshContent = true) =>\n    updateTable(tableRoot, {pageSize, pageNumber: 1}, refreshContent);\n\n/**\n * Get the current page size.\n *\n * @param {HTMLElement} tableRoot\n * @returns {Number}\n */\nexport const getPageSize = tableRoot => getTableData(tableRoot).tablePageSize;\n\n/**\n * Update the first initial to show.\n *\n * @param {HTMLElement} tableRoot\n * @param {String} firstInitial\n * @param {Bool} refreshContent\n * @returns {Promise}\n */\nexport const setFirstInitial = (tableRoot, firstInitial, refreshContent = true) =>\n    updateTable(tableRoot, {firstInitial}, refreshContent);\n\n/**\n * Get the current first initial filter.\n *\n * @param {HTMLElement} tableRoot\n * @returns {String}\n */\nexport const getFirstInitial = tableRoot => getTableData(tableRoot).tableFirstInitial;\n\n/**\n * Update the last initial to show.\n *\n * @param {HTMLElement} tableRoot\n * @param {String} lastInitial\n * @param {Bool} refreshContent\n * @returns {Promise}\n */\nexport const setLastInitial = (tableRoot, lastInitial, refreshContent = true) =>\n    updateTable(tableRoot, {lastInitial}, refreshContent);\n\n/**\n * Get the current last initial filter.\n *\n * @param {HTMLElement} tableRoot\n * @returns {String}\n */\nexport const getLastInitial = tableRoot => getTableData(tableRoot).tableLastInitial;\n\n/**\n * Hide a column in the participants table.\n *\n * @param {HTMLElement} tableRoot\n * @param {String} columnToHide\n * @param {Bool} refreshContent\n * @returns {Promise}\n */\nexport const hideColumn = (tableRoot, columnToHide, refreshContent = true) => {\n    const hiddenColumns = JSON.parse(tableRoot.dataset.tableHiddenColumns);\n    hiddenColumns.push(columnToHide);\n\n    return updateTable(tableRoot, {hiddenColumns}, refreshContent);\n};\n\n/**\n * Make a hidden column visible in the participants table.\n *\n * @param {HTMLElement} tableRoot\n * @param {String} columnToShow\n * @param {Bool} refreshContent\n * @returns {Promise}\n */\nexport const showColumn = (tableRoot, columnToShow, refreshContent = true) => {\n    let hiddenColumns = JSON.parse(tableRoot.dataset.tableHiddenColumns);\n    hiddenColumns = hiddenColumns.filter(columnName => columnName !== columnToShow);\n\n    return updateTable(tableRoot, {hiddenColumns}, refreshContent);\n};\n\n/**\n * Reset table preferences.\n *\n * @param {HTMLElement} tableRoot\n * @returns {Promise}\n */\nconst resetTablePreferences = tableRoot => refreshTableContent(tableRoot, true);\n\n/**\n * Set up listeners to handle table updates.\n */\nexport const init = () => {\n    if (watching) {\n        // Already watching.\n        return;\n    }\n    watching = true;\n\n    document.addEventListener('click', e => {\n        const tableRoot = e.target.closest(Selectors.main.region);\n\n        if (!tableRoot) {\n            return;\n        }\n\n        const sortableLink = e.target.closest(Selectors.table.links.sortableColumn);\n        if (sortableLink) {\n            e.preventDefault();\n\n            setSortOrder(tableRoot, sortableLink.dataset.sortby, sortableLink.dataset.sortorder)\n            .catch(Notification.exception);\n        }\n\n        const firstInitialLink = e.target.closest(Selectors.initialsBar.links.firstInitial);\n        if (firstInitialLink !== null) {\n            e.preventDefault();\n\n            setFirstInitial(tableRoot, firstInitialLink.dataset.initial).catch(Notification.exception);\n        }\n\n        const lastInitialLink = e.target.closest(Selectors.initialsBar.links.lastInitial);\n        if (lastInitialLink !== null) {\n            e.preventDefault();\n\n            setLastInitial(tableRoot, lastInitialLink.dataset.initial).catch(Notification.exception);\n        }\n\n        const pageItem = e.target.closest(Selectors.paginationBar.links.pageItem);\n        if (pageItem) {\n            e.preventDefault();\n\n            setPageNumber(tableRoot, pageItem.dataset.pageNumber).catch(Notification.exception);\n        }\n\n        const hide = e.target.closest(Selectors.table.links.hide);\n        if (hide) {\n            e.preventDefault();\n\n            hideColumn(tableRoot, hide.dataset.column).catch(Notification.exception);\n        }\n\n        const show = e.target.closest(Selectors.table.links.show);\n        if (show) {\n            e.preventDefault();\n\n            showColumn(tableRoot, show.dataset.column).catch(Notification.exception);\n        }\n\n        const resetTablePreferencesLink = e.target.closest('.resettable a');\n        if (resetTablePreferencesLink) {\n            e.preventDefault();\n\n            resetTablePreferences(tableRoot).catch(Notification.exception);\n        }\n\n        const showCountLink = e.target.closest(Selectors.showCount.links.toggle);\n        if (showCountLink) {\n            e.preventDefault();\n\n            setPageSize(tableRoot, showCountLink.dataset.targetPageSize).catch(Notification.exception);\n        }\n    });\n};\n\n/**\n * Fetch the table via its table region id.\n *\n * @param {String} tableRegionId\n * @returns {HTMLElement}\n */\nexport const getTableFromId = tableRegionId => {\n    const tableRoot = document.querySelector(Selectors.main.fromRegionId(tableRegionId));\n\n\n    if (!tableRoot) {\n        // The table is not a dynamic table.\n        throw new Error(\"The table specified is not a dynamic table and cannot be updated\");\n    }\n\n    return tableRoot;\n};\n\nexport {\n    Events\n};\n"],"names":["_interopRequireDefault","obj","__esModule","default","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","Selectors","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_interopRequireWildcard","_events","_pending","_notification","watching","checkTableIsDynamic","tableRoot","Error","matches","main","region","getFiltersetFromTable","JSON","parse","dataset","tableFilters","refreshTableContent","resetContent","arguments","length","undefined","filterset","addIconToContainer","pendingPromise","Pending","fetchTableData","tableComponent","tableHandler","tableUniqueid","sortData","tableSortData","joinType","jointype","filters","firstinitial","tableFirstInitial","lastinitial","tableLastInitial","pageNumber","tablePageNumber","pageSize","tablePageSize","hiddenColumns","tableHiddenColumns","then","data","placeholder","document","createElement","innerHTML","html","replaceWith","childNodes","getTableFromId","dispatchEvent","CustomEvent","Events","tableContentRefreshed","bubbles","resolve","_exports","updateTable","sortBy","sortOrder","firstInitial","lastInitial","refreshContent","tableConfigChanged","unshift","sortby","sortorder","parseInt","stringify","filterJson","columnJson","Promise","getTableData","setFilters","getFilters","setSortOrder","setPageNumber","getPageNumber","setPageSize","getPageSize","setFirstInitial","getFirstInitial","setLastInitial","getLastInitial","hideColumn","columnToHide","push","showColumn","columnToShow","filter","columnName","init","addEventListener","e","target","closest","sortableLink","table","links","sortableColumn","preventDefault","catch","Notification","exception","firstInitialLink","initialsBar","initial","lastInitialLink","pageItem","paginationBar","hide","column","show","resetTablePreferences","showCountLink","showCount","toggle","targetPageSize","tableRegionId","querySelector","fromRegionId"],"mappings":"wRA2B6C,SAAAA,uBAAAC,KAAAA,OAAAA,KAAAA,IAAAC,WAAAD,IAAAE,CAAAA,QAAAF,IAAA,CAAA,SAAAG,yBAAAC,aAAA,GAAA,mBAAAC,QAAA,OAAA,KAAA,IAAAC,kBAAAD,IAAAA,QAAAE,iBAAAF,IAAAA,eAAAF,yBAAA,SAAAC,aAAAA,OAAAA,YAAAG,iBAAAD,oBAAAF,YAAA,whBAL7CI,UAK6C,SAAAR,IAAAI,aAAAA,IAAAA,aAAAJ,KAAAA,IAAAC,WAAAD,OAAAA,IAAAA,GAAAA,OAAAA,KAAAA,iBAAAA,KAAAE,mBAAAF,IAAAE,MAAAA,CAAAA,QAAAF,KAAAS,IAAAA,MAAAN,yBAAAC,aAAA,GAAAK,OAAAA,MAAAC,IAAAV,KAAA,OAAAS,MAAAE,IAAAX,KAAA,IAAAY,OAAAC,GAAAA,sBAAAC,OAAAC,gBAAAD,OAAAE,yBAAAC,IAAAA,IAAAA,OAAAjB,IAAAiB,eAAAA,KAAAH,OAAAI,UAAAC,eAAAC,KAAApB,IAAAiB,KAAA,CAAA,IAAAI,KAAAR,sBAAAC,OAAAE,yBAAAhB,IAAAiB,KAAAI,KAAAA,OAAAA,KAAAV,KAAAU,KAAAC,KAAAR,OAAAC,eAAAH,OAAAK,IAAAI,MAAAT,OAAAK,KAAAjB,IAAAiB,IAAAL,CAAAA,OAAAV,QAAAF,IAAAS,OAAAA,MAAAa,IAAAtB,IAAAY,eAAAA,MAAA;;;;;;;KAL7CW,CAAAf,WACAgB,QAAAzB,uBAAAyB,SACAC,SAAA1B,uBAAA0B,UAGAC,cAAA3B,uBAAA2B,eAEA,IAAIC,UAAW,EAQf,MAAMC,oBAAsBC,YACxB,IAAKA,UAED,MAAM,IAAIC,MAAM,oEAGpB,IAAKD,UAAUE,QAAQvB,UAAUwB,KAAKC,QAElC,MAAM,IAAIH,MAAM,oEAGpB,OAAO,CAAI,EASTI,sBAAwBL,WACnBM,KAAKC,MAAMP,UAAUQ,QAAQC,cAU3BC,oBAAsB,SAACV,WAAoC,IAAzBW,aAAYC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GACvD,MAAMG,UAAYV,sBAAsBL,YACxC,EAAAgB,aAAAA,oBAAmBhB,WAEnB,MAAMiB,eAAiB,IAAIC,SAAO7C,QAAC,0CAEnC,OAAO,EAAA8C,mBACHnB,UAAUQ,QAAQY,eAClBpB,UAAUQ,QAAQa,aAClBrB,UAAUQ,QAAQc,cAClB,CACIC,SAAUjB,KAAKC,MAAMP,UAAUQ,QAAQgB,eACvCC,SAAUV,UAAUW,SACpBC,QAASZ,UAAUY,QACnBC,aAAc5B,UAAUQ,QAAQqB,kBAChCC,YAAa9B,UAAUQ,QAAQuB,iBAC/BC,WAAYhC,UAAUQ,QAAQyB,gBAC9BC,SAAUlC,UAAUQ,QAAQ2B,cAC5BC,cAAe9B,KAAKC,MAAMP,UAAUQ,QAAQ6B,qBAEhD1B,cAEH2B,MAAKC,OACF,MAAMC,YAAcC,SAASC,cAAc,OAK3C,OAJAF,YAAYG,UAAYJ,KAAKK,KAC7B5C,UAAU6C,eAAeL,YAAYM,YAG9BC,eAAe/C,UAAUQ,QAAQc,cAAc,IACvDgB,MAAKtC,YACJA,UAAUgD,cAAc,IAAIC,YAAYC,QAAAA,QAAOC,sBAAuB,CAClEC,SAAS,KAGNpD,aAEVsC,MAAKtC,YACFiB,eAAeoC,UAERrD,cAEbsD,SAAA5C,oBAAAA,oBAEK,MAAM6C,YAAc,SAACvD,WASM,IATKwD,OACnCA,OAAS,KAAIC,UACbA,UAAY,KAAI9B,QAChBA,QAAU,KAAI+B,aACdA,aAAe,KAAIC,YACnBA,YAAc,KAAI3B,WAClBA,WAAa,KAAIE,SACjBA,SAAW,KAAIE,cACfA,cAAgB,MACnBxB,UAAAC,OAAAD,QAAAE,IAAAF,UAAAE,GAAAF,UAAG,GAAA,GAAIgD,iBAAchD,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GAClBb,oBAAoBC,WAEpB,MAAMiB,eAAiB,IAAIC,SAAO7C,QAAC,kCACnC,IAAIwF,oBAAqB,EAGzB,GAAIL,QAAUC,UAAW,CAGrBI,oBAAqB,EAErB,MAAMtC,SAAWjB,KAAKC,MAAMP,UAAUQ,QAAQgB,eAC9CD,SAASuC,QAAQ,CACbC,OAAQP,OACRQ,UAAWC,SAASR,UAAW,MAEnCzD,UAAUQ,QAAQgB,cAAgBlB,KAAK4D,UAAU3C,SACrD,CA4BA,GAzBqB,OAAjBmC,eACI1D,UAAUQ,QAAQqB,oBAAsB6B,eACxCG,oBAAqB,GAGzB7D,UAAUQ,QAAQqB,kBAAoB6B,cAGtB,OAAhBC,cACI3D,UAAUQ,QAAQuB,mBAAqB4B,cACvCE,oBAAqB,GAGzB7D,UAAUQ,QAAQuB,iBAAmB4B,aAGxB,OAAbzB,WACIlC,UAAUQ,QAAQ2B,eAAiBD,WACnC2B,oBAAqB,GAGzB7D,UAAUQ,QAAQ2B,cAAgBD,UAIlCP,QAAS,CACT,MAAMwC,WAAa7D,KAAK4D,UAAUvC,SAE9B3B,UAAUQ,QAAQC,eAAiB0D,aACnCN,oBAAqB,GAGzB7D,UAAUQ,QAAQC,aAAe0D,UACrC,CASA,GALIN,qBACA7B,WAAa,GAIbI,cAAe,CACf,MAAMgC,WAAa9D,KAAK4D,UAAU9B,eAE9BpC,UAAUQ,QAAQ6B,qBAAuB+B,aACzCP,oBAAqB,GAGzB7D,UAAUQ,QAAQ6B,mBAAqB+B,UAC3C,CAWA,OATmB,OAAfpC,aACIhC,UAAUQ,QAAQyB,iBAAmBD,aACrC6B,oBAAqB,GAGzB7D,UAAUQ,QAAQyB,gBAAkBD,YAIpC4B,gBAAkBC,mBACXnD,oBAAoBV,WAC1BsC,MAAKtC,YACFiB,eAAeoC,UACRrD,cAGXiB,eAAeoC,UACRgB,QAAQhB,QAAQrD,aAE7BsD,SAAAC,YAAAA,YAQF,MAAMe,aAAetE,YACjBD,oBAAoBC,WAEbA,UAAUQ,SAYiC8C,SAAAiB,WAD5B,SAACvE,UAAW2B,SAA8B,OAChE4B,YAAYvD,UAAW,CAAC2B,mBADiCf,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GACR,EAYnD0C,SAAAkB,WAJwBxE,YACtBD,oBAAoBC,WAEbK,sBAAsBL,YAY1B,MAAMyE,aAAe,SAACzE,UAAWwD,OAAQC,WAAgC,OAC5EF,YAAYvD,UAAW,CAACwD,cAAQC,uBADqC7C,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GACV,EAAC0C,SAAAmB,aAAAA,aAUzD,MAAMC,cAAgB,SAAC1E,UAAWgC,YAAiC,OACtEuB,YAAYvD,UAAW,CAACgC,yBADuCpB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GACX,EAAC0C,SAAAoB,cAAAA,cAQyBpB,SAAAqB,cAArD3E,WAAasE,aAAatE,WAAWiC,gBAU3D,MAAM2C,YAAc,SAAC5E,UAAWkC,UAA+B,OAClEqB,YAAYvD,UAAW,CAACkC,kBAAUF,WAAY,KADapB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GACM,EAAC0C,SAAAsB,YAAAA,YAQQtB,SAAAuB,YAAnD7E,WAAasE,aAAatE,WAAWmC,cAUzD,MAAM2C,gBAAkB,SAAC9E,UAAW0D,cAAmC,OAC1EH,YAAYvD,UAAW,CAAC0D,6BAD2C9C,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GACb,EAAC0C,SAAAwB,gBAAAA,gBAQ2BxB,SAAAyB,gBAAvD/E,WAAasE,aAAatE,WAAW6B,kBAU7D,MAAMmD,eAAiB,SAAChF,UAAW2D,aAAkC,OACxEJ,YAAYvD,UAAW,CAAC2D,2BADyC/C,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GACZ,EAAC0C,SAAA0B,eAAAA,eAQ0B1B,SAAA2B,eAAtDjF,WAAasE,aAAatE,WAAW+B,iBAU5D,MAAMmD,WAAa,SAAClF,UAAWmF,cAAwC,IAA1BvB,iBAAchD,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GAC9D,MAAMwB,cAAgB9B,KAAKC,MAAMP,UAAUQ,QAAQ6B,oBAGnD,OAFAD,cAAcgD,KAAKD,cAEZ5B,YAAYvD,UAAW,CAACoC,6BAAgBwB,iBACjDN,SAAA4B,WAAAA,WAUK,MAAMG,WAAa,SAACrF,UAAWsF,cAAwC,IAA1B1B,iBAAchD,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GAC1DwB,cAAgB9B,KAAKC,MAAMP,UAAUQ,QAAQ6B,oBAGjD,OAFAD,cAAgBA,cAAcmD,QAAOC,YAAcA,aAAeF,eAE3D/B,YAAYvD,UAAW,CAACoC,6BAAgBwB,iBACjDN,SAAA+B,WAAAA,WAoFA/B,SAAAmC,KAvEkBA,KACZ3F,WAIJA,UAAW,EAEX2C,SAASiD,iBAAiB,SAASC,IAC/B,MAAM3F,UAAY2F,EAAEC,OAAOC,QAAQlH,UAAUwB,KAAKC,QAElD,IAAKJ,UACD,OAGJ,MAAM8F,aAAeH,EAAEC,OAAOC,QAAQlH,UAAUoH,MAAMC,MAAMC,gBACxDH,eACAH,EAAEO,iBAEFzB,aAAazE,UAAW8F,aAAatF,QAAQuD,OAAQ+B,aAAatF,QAAQwD,WACzEmC,MAAMC,cAAAA,QAAaC,YAGxB,MAAMC,iBAAmBX,EAAEC,OAAOC,QAAQlH,UAAU4H,YAAYP,MAAMtC,cAC7C,OAArB4C,mBACAX,EAAEO,iBAEFpB,gBAAgB9E,UAAWsG,iBAAiB9F,QAAQgG,SAASL,MAAMC,cAAY/H,QAACgI,YAGpF,MAAMI,gBAAkBd,EAAEC,OAAOC,QAAQlH,UAAU4H,YAAYP,MAAMrC,aAC7C,OAApB8C,kBACAd,EAAEO,iBAEFlB,eAAehF,UAAWyG,gBAAgBjG,QAAQgG,SAASL,MAAMC,cAAY/H,QAACgI,YAGlF,MAAMK,SAAWf,EAAEC,OAAOC,QAAQlH,UAAUgI,cAAcX,MAAMU,UAC5DA,WACAf,EAAEO,iBAEFxB,cAAc1E,UAAW0G,SAASlG,QAAQwB,YAAYmE,MAAMC,cAAY/H,QAACgI,YAG7E,MAAMO,KAAOjB,EAAEC,OAAOC,QAAQlH,UAAUoH,MAAMC,MAAMY,MAChDA,OACAjB,EAAEO,iBAEFhB,WAAWlF,UAAW4G,KAAKpG,QAAQqG,QAAQV,MAAMC,cAAY/H,QAACgI,YAGlE,MAAMS,KAAOnB,EAAEC,OAAOC,QAAQlH,UAAUoH,MAAMC,MAAMc,MAChDA,OACAnB,EAAEO,iBAEFb,WAAWrF,UAAW8G,KAAKtG,QAAQqG,QAAQV,MAAMC,cAAY/H,QAACgI,YAGhCV,EAAEC,OAAOC,QAAQ,mBAE/CF,EAAEO,iBAhEgBlG,YAAaU,oBAAoBV,WAAW,GAkE9D+G,CAAsB/G,WAAWmG,MAAMC,cAAAA,QAAaC,YAGxD,MAAMW,cAAgBrB,EAAEC,OAAOC,QAAQlH,UAAUsI,UAAUjB,MAAMkB,QAC7DF,gBACArB,EAAEO,iBAEFtB,YAAY5E,UAAWgH,cAAcxG,QAAQ2G,gBAAgBhB,MAAMC,cAAY/H,QAACgI,WACpF,IACF,EASC,MAAMtD,eAAiBqE,gBAC1B,MAAMpH,UAAYyC,SAAS4E,cAAc1I,UAAUwB,KAAKmH,aAAaF,gBAGrE,IAAKpH,UAED,MAAM,IAAIC,MAAM,oEAGpB,OAAOD,SAAS,EAClBsD,SAAAP,eAAAA,cAAA"}