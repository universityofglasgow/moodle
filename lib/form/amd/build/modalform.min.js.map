{"version":3,"file":"modalform.min.js","sources":["../src/modalform.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Display a form in a modal dialogue\n *\n * Example:\n *    import ModalForm from 'core_form/modalform';\n *\n *    const modalForm = new ModalForm({\n *        formClass: 'pluginname\\\\form\\\\formname',\n *        modalConfig: {title: 'Here comes the title'},\n *        args: {categoryid: 123},\n *        returnFocus: e.target,\n *    });\n *    modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, (c) => window.console.log(c.detail));\n *    modalForm.show();\n *\n * See also https://docs.moodle.org/dev/Modal_and_AJAX_forms\n *\n * @module     core_form/modalform\n * @copyright  2018 Mitxel Moriana <mitxel@tresipunt.>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from 'core/ajax';\nimport * as FormChangeChecker from 'core_form/changechecker';\nimport * as FormEvents from 'core_form/events';\nimport Fragment from 'core/fragment';\nimport ModalEvents from 'core/modal_events';\nimport ModalFactory from 'core/modal_factory';\nimport Notification from 'core/notification';\nimport Pending from 'core/pending';\nimport {serialize} from './util';\n\nexport default class ModalForm {\n\n    /**\n     * Various events that can be observed.\n     *\n     * @type {Object}\n     */\n    events = {\n        // Form was successfully submitted - the response is passed to the event listener.\n        // Cancellable (but it's hardly ever needed to cancel this event).\n        FORM_SUBMITTED: 'core_form_modalform_formsubmitted',\n        // Cancel button was pressed.\n        // Cancellable (but it's hardly ever needed to cancel this event).\n        FORM_CANCELLED: 'core_form_modalform_formcancelled',\n        // User attempted to submit the form but there was client-side validation error.\n        CLIENT_VALIDATION_ERROR: 'core_form_modalform_clientvalidationerror',\n        // User attempted to submit the form but server returned validation error.\n        SERVER_VALIDATION_ERROR: 'core_form_modalform_validationerror',\n        // Error occurred while performing request to the server.\n        // Cancellable (by default calls Notification.exception).\n        ERROR: 'core_form_modalform_error',\n        // Right after user pressed no-submit button,\n        // listen to this event if you want to add JS validation or processing for no-submit button.\n        // Cancellable.\n        NOSUBMIT_BUTTON_PRESSED: 'core_form_modalform_nosubmitbutton',\n        // Right after user pressed submit button,\n        // listen to this event if you want to add additional JS validation or confirmation dialog.\n        // Cancellable.\n        SUBMIT_BUTTON_PRESSED: 'core_form_modalform_submitbutton',\n        // Right after user pressed cancel button,\n        // listen to this event if you want to add confirmation dialog.\n        // Cancellable.\n        CANCEL_BUTTON_PRESSED: 'core_form_modalform_cancelbutton',\n        // Modal was loaded and this.modal is available (but the form content may not be loaded yet).\n        LOADED: 'core_form_modalform_loaded',\n    };\n\n    /**\n     * Constructor\n     *\n     * Shows the required form inside a modal dialogue\n     *\n     * @param {Object} config parameters for the form and modal dialogue:\n     * @paramy {String} config.formClass PHP class name that handles the form (should extend \\core_form\\modal )\n     * @paramy {Object} config.modalConfig modal config - title, type, etc.\n     *              Default: {removeOnClose: true, type: ModalFactory.types.SAVE_CANCEL}\n     * @paramy {Object} config.args Arguments for the initial form rendering (for example, id of the edited entity)\n     * @paramy {String} config.saveButtonText the text to display on the Modal \"Save\" button (optional)\n     * @paramy {String} config.saveButtonClasses additional CSS classes for the Modal \"Save\" button\n     * @paramy {HTMLElement} config.returnFocus element to return focus to after the dialogue is closed\n     */\n    constructor(config) {\n        this.modal = null;\n        this.config = config;\n        this.config.modalConfig = {\n            removeOnClose: true,\n            type: ModalFactory.types.SAVE_CANCEL,\n            large: true,\n            ...(this.config.modalConfig || {}),\n        };\n        this.config.args = this.config.args || {};\n        this.futureListeners = [];\n    }\n\n    /**\n     * Initialise the modal and shows it\n     *\n     * @return {Promise}\n     */\n    show() {\n        const pendingPromise = new Pending('core_form/modalform:init');\n\n        return ModalFactory.create(this.config.modalConfig)\n        .then((modal) => {\n            this.modal = modal;\n\n            // Retrieve the form and set the modal body. We can not set the body in the modalConfig,\n            // we need to make sure that the modal already exists when we render the form. Some form elements\n            // such as date_selector inspect the existing elements on the page to find the highest z-index.\n            const formParams = serialize(this.config.args || {});\n            const bodyContent = this.getBody(formParams);\n            this.modal.setBodyContent(bodyContent);\n            bodyContent.catch(Notification.exception);\n\n            // After successfull submit, when we press \"Cancel\" or close the dialogue by clicking on X in the top right corner.\n            this.modal.getRoot().on(ModalEvents.hidden, () => {\n                this.notifyResetFormChanges();\n                this.modal.destroy();\n                // Focus on the element that actually launched the modal.\n                if (this.config.returnFocus) {\n                    this.config.returnFocus.focus();\n                }\n            });\n\n            // Add the class to the modal dialogue.\n            this.modal.getModal().addClass('modal-form-dialogue');\n\n            // We catch the press on submit buttons in the forms.\n            this.modal.getRoot().on('click', 'form input[type=submit][data-no-submit]',\n                (e) => {\n                    e.preventDefault();\n                    const event = this.trigger(this.events.NOSUBMIT_BUTTON_PRESSED, e.target);\n                    if (!event.defaultPrevented) {\n                        this.processNoSubmitButton(e.target);\n                    }\n                });\n\n            // We catch the form submit event and use it to submit the form with ajax.\n            this.modal.getRoot().on('submit', 'form', (e) => {\n                e.preventDefault();\n                const event = this.trigger(this.events.SUBMIT_BUTTON_PRESSED);\n                if (!event.defaultPrevented) {\n                    this.submitFormAjax();\n                }\n            });\n\n            // Change the text for the save button.\n            if (typeof this.config.saveButtonText !== 'undefined' &&\n                typeof this.modal.setSaveButtonText !== 'undefined') {\n                this.modal.setSaveButtonText(this.config.saveButtonText);\n            }\n            // Set classes for the save button.\n            if (typeof this.config.saveButtonClasses !== 'undefined') {\n                this.setSaveButtonClasses(this.config.saveButtonClasses);\n            }\n            // When Save button is pressed - submit the form.\n            this.modal.getRoot().on(ModalEvents.save, (e) => {\n                e.preventDefault();\n                this.modal.getRoot().find('form').submit();\n            });\n\n            // When Cancel button is pressed - allow to intercept.\n            this.modal.getRoot().on(ModalEvents.cancel, (e) => {\n                const event = this.trigger(this.events.CANCEL_BUTTON_PRESSED);\n                if (event.defaultPrevented) {\n                    e.preventDefault();\n                }\n            });\n            this.futureListeners.forEach(args => this.modal.getRoot()[0].addEventListener(...args));\n            this.futureListeners = [];\n            this.trigger(this.events.LOADED, null, false);\n            return this.modal.show();\n        })\n        .then(pendingPromise.resolve);\n    }\n\n    /**\n     * Triggers a custom event\n     *\n     * @private\n     * @param {String} eventName\n     * @param {*} detail\n     * @param {Boolean} cancelable\n     * @return {CustomEvent<unknown>}\n     */\n    trigger(eventName, detail = null, cancelable = true) {\n        const e = new CustomEvent(eventName, {detail, cancelable});\n        this.modal.getRoot()[0].dispatchEvent(e);\n        return e;\n    }\n\n    /**\n     * Add listener for an event\n     *\n     * @param {array} args\n     * @example:\n     *    const modalForm = new ModalForm(...);\n     *    dynamicForm.addEventListener(modalForm.events.FORM_SUBMITTED, e => {\n     *        window.console.log(e.detail);\n     *    });\n     */\n    addEventListener(...args) {\n        if (!this.modal) {\n            this.futureListeners.push(args);\n        } else {\n            this.modal.getRoot()[0].addEventListener(...args);\n        }\n    }\n\n    /**\n     * Get form contents (to be used in ModalForm.setBodyContent())\n     *\n     * @param {String} formDataString form data in format of a query string\n     * @method getBody\n     * @private\n     * @return {Promise}\n     */\n    getBody(formDataString) {\n        const params = {\n            formdata: formDataString,\n            form: this.config.formClass\n        };\n        const pendingPromise = new Pending('core_form/modalform:form_body');\n        return Ajax.call([{\n            methodname: 'core_form_dynamic_form',\n            args: params\n        }])[0]\n        .then(response => {\n            pendingPromise.resolve();\n            return {html: response.html, js: Fragment.processCollectedJavascript(response.javascript)};\n        });\n    }\n\n    /**\n     * On exception during form processing. Caller may override\n     *\n     * @param {Object} exception\n     */\n    onSubmitError(exception) {\n        const event = this.trigger(this.events.ERROR, exception);\n        if (event.defaultPrevented) {\n            return;\n        }\n\n        Notification.exception(exception);\n    }\n\n    /**\n     * Notifies listeners that form dirty state should be reset.\n     *\n     * @fires event:formSubmittedByJavascript\n     */\n    notifyResetFormChanges() {\n        const form = this.getFormNode();\n        if (!form) {\n            return;\n        }\n\n        FormEvents.notifyFormSubmittedByJavascript(form, true);\n\n        FormChangeChecker.resetFormDirtyState(form);\n    }\n\n    /**\n     * Get the form node from the Dialogue.\n     *\n     * @returns {HTMLFormElement}\n     */\n    getFormNode() {\n        return this.modal.getRoot().find('form')[0];\n    }\n\n    /**\n     * Click on a \"submit\" button that is marked in the form as registerNoSubmitButton()\n     *\n     * @param {Element} button button that was pressed\n     * @fires event:formSubmittedByJavascript\n     */\n    processNoSubmitButton(button) {\n        const form = this.getFormNode();\n        if (!form) {\n            return;\n        }\n\n        FormEvents.notifyFormSubmittedByJavascript(form, true);\n\n        // Add the button name to the form data and submit it.\n        let formData = this.modal.getRoot().find('form').serialize();\n        formData = formData + '&' + encodeURIComponent(button.getAttribute('name')) + '=' +\n            encodeURIComponent(button.getAttribute('value'));\n\n        const bodyContent = this.getBody(formData);\n        this.modal.setBodyContent(bodyContent);\n        bodyContent.catch(Notification.exception);\n    }\n\n    /**\n     * Validate form elements\n     * @return {Boolean} Whether client-side validation has passed, false if there are errors\n     * @fires event:formSubmittedByJavascript\n     */\n    validateElements() {\n        FormEvents.notifyFormSubmittedByJavascript(this.getFormNode());\n\n        // Now the change events have run, see if there are any \"invalid\" form fields.\n        /** @var {jQuery} list of elements with errors */\n        const invalid = this.modal.getRoot().find('[aria-invalid=\"true\"], .error');\n\n        // If we found invalid fields, focus on the first one and do not submit via ajax.\n        if (invalid.length) {\n            invalid.first().focus();\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Disable buttons during form submission\n     */\n    disableButtons() {\n        this.modal.getFooter().find('[data-action]').attr('disabled', true);\n    }\n\n    /**\n     * Enable buttons after form submission (on validation error)\n     */\n    enableButtons() {\n        this.modal.getFooter().find('[data-action]').removeAttr('disabled');\n    }\n\n    /**\n     * Submit the form via AJAX call to the core_form_dynamic_form WS\n     */\n    async submitFormAjax() {\n        // If we found invalid fields, focus on the first one and do not submit via ajax.\n        if (!this.validateElements()) {\n            this.trigger(this.events.CLIENT_VALIDATION_ERROR, null, false);\n            return;\n        }\n        this.disableButtons();\n\n        // Convert all the form elements values to a serialised string.\n        const form = this.modal.getRoot().find('form');\n        const formData = form.serialize();\n\n        // Now we can continue...\n        Ajax.call([{\n            methodname: 'core_form_dynamic_form',\n            args: {\n                formdata: formData,\n                form: this.config.formClass\n            }\n        }])[0]\n        .then((response) => {\n            if (!response.submitted) {\n                // Form was not submitted because validation failed.\n                const promise = new Promise(\n                    resolve => resolve({html: response.html, js: Fragment.processCollectedJavascript(response.javascript)}));\n                this.modal.setBodyContent(promise);\n                this.enableButtons();\n                this.trigger(this.events.SERVER_VALIDATION_ERROR);\n            } else {\n                // Form was submitted properly. Hide the modal and execute callback.\n                const data = JSON.parse(response.data);\n                FormChangeChecker.markFormSubmitted(form[0]);\n                const event = this.trigger(this.events.FORM_SUBMITTED, data);\n                if (!event.defaultPrevented) {\n                    this.modal.hide();\n                }\n            }\n            return null;\n        })\n        .catch(exception => this.onSubmitError(exception));\n    }\n\n    /**\n     * Set the classes for the 'save' button.\n     *\n     * @method setSaveButtonClasses\n     * @param {(String)} value The 'save' button classes.\n     */\n    setSaveButtonClasses(value) {\n        const button = this.modal.getFooter().find(\"[data-action='save']\");\n        if (!button) {\n            throw new Error(\"Unable to find the 'save' button\");\n        }\n        button.removeClass().addClass(value);\n    }\n}\n"],"names":["_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","_interopRequireWildcard","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_interopRequireDefault","_defineProperty","value","arg","input","hint","prim","Symbol","toPrimitive","undefined","res","TypeError","String","Number","_toPrimitive","_toPropertyKey","enumerable","configurable","writable","_ajax","FormChangeChecker","FormEvents","_fragment","_modal_events","_modal_factory","_notification","_pending","_exports","constructor","config","this","FORM_SUBMITTED","FORM_CANCELLED","CLIENT_VALIDATION_ERROR","SERVER_VALIDATION_ERROR","ERROR","NOSUBMIT_BUTTON_PRESSED","SUBMIT_BUTTON_PRESSED","CANCEL_BUTTON_PRESSED","LOADED","modal","modalConfig","removeOnClose","type","ModalFactory","types","SAVE_CANCEL","large","args","futureListeners","show","pendingPromise","Pending","create","then","formParams","serialize","bodyContent","getBody","setBodyContent","catch","Notification","exception","getRoot","on","ModalEvents","hidden","notifyResetFormChanges","destroy","returnFocus","focus","getModal","addClass","e","preventDefault","trigger","events","target","defaultPrevented","processNoSubmitButton","submitFormAjax","saveButtonText","setSaveButtonText","saveButtonClasses","setSaveButtonClasses","save","find","submit","cancel","forEach","addEventListener","resolve","eventName","CustomEvent","detail","arguments","length","cancelable","dispatchEvent","_len","Array","_key","push","formDataString","params","formdata","form","formClass","Ajax","methodname","response","html","js","Fragment","processCollectedJavascript","javascript","onSubmitError","getFormNode","notifyFormSubmittedByJavascript","resetFormDirtyState","button","formData","encodeURIComponent","getAttribute","validateElements","invalid","first","disableButtons","getFooter","attr","enableButtons","removeAttr","async","submitted","data","JSON","parse","markFormSubmitted","hide","promise","Promise","Error","removeClass"],"mappings":"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"}