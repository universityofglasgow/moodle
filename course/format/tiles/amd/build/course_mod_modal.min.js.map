{"version":3,"file":"course_mod_modal.min.js","sources":["../src/course_mod_modal.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/* eslint space-before-function-paren: 0 */\n\n/**\n * Javascript Module to handle rendering of course modules (e.g. resource/PDF, resource/html, page) in modal windows\n *\n * When the user clicks a PDF course module subtile or old style resource\n * if we are using modals for it (e.g. PDF) , create, populate, launch and size the modal\n *\n * @module      format_tiles/course_mod_modal\n * @copyright   2018 David Watson {@link http://evolutioncode.uk}\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since       Moodle 3.3\n */\n\ndefine([\"jquery\", \"core/modal_factory\", \"core/config\", \"core/templates\", \"core/notification\", \"core/ajax\",\n        'core/fragment', \"core/modal_events\"],\n    function ($, modalFactory, config, Templates, Notification, ajax, Fragment, ModalEvents) {\n        \"use strict\";\n\n        /**\n         * Keep references for all modals we have already added to the page,\n         * so that we can relaunch then if needed\n         * @type {{}}\n         */\n        var modalStore = {};\n        var loadingIconHtml;\n        const win = $(window);\n        var courseId;\n        var tilesConfig;\n\n        const Selector = {\n            modal: \".modal\",\n            modalDialog: \".modal-dialog\",\n            modalBody: \".modal-body\",\n            sectionMain: \".section.main\",\n            pageContent: \"#page-content\",\n            regionMain: \"#region-main\",\n            completionState: \"#completion-check-\",\n            cmModal: \".embed_cm_modal\",\n            moodleMediaPlayer: \".mediaplugin_videojs\",\n            closeBtn: \"button.close\",\n            ACTIVITY: \"li.activity\",\n            URLACTIVITYPOPUPLINK: \".activity.modtype_url.urlpopup a\",\n            modalHeader: \".modal-header\",\n            embedModuleButtons: \".embed-module-buttons\",\n            iframe: \"iframe\"\n        };\n\n        const CLASS = {\n            COMPLETION_ENABLED: \"completion-enabled\",\n            COMPLETION_MANUAL: \"completion-manual\",\n            COMPLETION_AUTO: \"completion-auto\", // E.g. grade based.\n            COMPLETION_VIEW: \"completion-view\",\n            COMPLETION_CHECK_BOX: \"completioncheckbox\",\n            COMPLETION_DROPDOWN: \"completion-dropdown\"\n        };\n\n        const modalMinWidth = function () {\n            return Math.min(win.width(), 1100);\n        };\n\n        /**\n         * Some modals contain videos in iframes or objects, which need to stop playing when dismissed.\n         * @param {object} modal the modal which contains the video.\n         */\n        const stopAllVideosOnDismiss = function(modal) {\n            modal.on(ModalEvents.hidden, function() {\n                const iframes = modal.find(Selector.iframe);\n                const objects = modal.find(\"object\");\n                const moodleMediaPlayer = modal.find(Selector.moodleMediaPlayer);\n\n                if (iframes.length || objects.length || moodleMediaPlayer.length) {\n                    modalStore[modal.data(\"cmid\")] = undefined;\n                    modal.remove();\n                }\n            });\n        };\n        /**\n         *\n         * @param {number} cmId\n         * @param {number} moduleContextId\n         * @param {number} sectionNum\n         * @param {string} title\n         * @param {string} objectType\n         * @param {string} pluginfileUrl\n         * @param {boolean} completionEnabled\n         * @param {number} existingCompletionState\n         * @param {boolean} isManualCompletion\n         * @param {string} secondaryUrl URL to be shown to user as a fallback if embedded URL does not laod.\n         * @returns {boolean}\n         */\n        const launchCmModal = function (\n                cmId, moduleContextId, sectionNum, title, objectType, pluginfileUrl,\n                completionEnabled, existingCompletionState, isManualCompletion, secondaryUrl\n            ) {\n            modalFactory.create({\n                type: modalFactory.types.DEFAULT,\n                title: title,\n                body: loadingIconHtml\n            }).done(function (modal) {\n                modalStore[cmId] = modal;\n                modal.setLarge();\n                modal.show();\n                const modalRoot = $(modal.root);\n                modalRoot.attr(\"id\", \"embed_mod_modal_\" + cmId);\n                modalRoot.data(\"cmid\", cmId);\n                modalRoot.data(\"section\", sectionNum);\n                modalRoot.addClass(\"embed_cm_modal\");\n\n                // If it's a page activity, we simply add the page HTML as the modal body.\n                // Otherwise, we set the body by rendering from a template.\n                if (objectType === 'page') {\n                    modalRoot.addClass('mod_' + objectType);\n                    stopAllVideosOnDismiss(modalRoot);\n                    Fragment.loadFragment(\n                        'format_tiles', `get_cm_content`, moduleContextId, {contextid: moduleContextId}\n                    )\n                       .done(function(html, js) {\n                            modal.setBody(html);\n                            Templates.runTemplateJS(js);\n                        });\n                } else {\n                    // Render the modal body and set it to the page.\n                    // First a blank template data object.\n                    var templateData = {\n                        id: cmId,\n                        pluginfileUrl: pluginfileUrl,\n                        objectType: null,\n                        width: \"100%\",\n                        height: Math.round(win.height() - 60), // Embedded object height in modal - make as high as poss.\n                        cmid: cmId,\n                        tileid: sectionNum,\n                        isediting: 0,\n                        sesskey: config.sesskey,\n                        activityname: title,\n                        config: {wwwroot: config.wwwroot},\n                        completionstring: '',\n                        secondaryurl: secondaryUrl\n                    };\n\n                    var template = null;\n                    if (objectType === \"resource_html\") {\n                        templateData.objectType = \"text/html\";\n                        template = 'format_tiles/embed_file_modal_body';\n                    } else if (objectType === \"resource_pdf\") {\n                        templateData.objectType = 'application/pdf';\n                        template = 'format_tiles/embed_file_modal_body';\n                    } else if (objectType === \"url\") {\n                        templateData.objectType = 'url';\n                        template = 'format_tiles/embed_url_modal_body';\n                    }\n\n                    Templates.render(template, templateData).done(function (html) {\n                        modal.setBody(html);\n                        modalRoot.find(Selector.modalBody).animate({\"min-height\": Math.round(win.height() - 120)}, \"fast\");\n\n                        if (objectType === \"resource_html\" || objectType === 'url') {\n                            // HTML files only - set widths to 100% since they may contain embedded videos etc.\n                            modalRoot.find(Selector.modal).animate({\"max-width\": \"100%\"}, \"fast\");\n                            modalRoot.find(Selector.modalDialog).animate({\"max-width\": \"100%\"}, \"fast\");\n                            modalRoot.find(Selector.modalBody).animate({\"max-width\": \"100%\"}, \"fast\");\n                            stopAllVideosOnDismiss(modalRoot);\n                            if (objectType === 'url') {\n                                modalRoot.find(Selector.modalBody).addClass(\"text-center\");\n                            }\n                        } else if (objectType === \"resource_pdf\") {\n                            // Otherwise (e.g. for PDF) we don't need 100% width.\n                            modalRoot.find(Selector.modal).animate({\"max-width\": modalMinWidth()}, \"fast\");\n                            // We do modal-dialog too since Moove theme uses it.\n                            modalRoot.find(Selector.modalDialog).animate({\"max-width\": modalMinWidth()}, \"fast\");\n                        }\n\n                    }).fail(Notification.exception);\n                }\n\n                // Render the modal header / title and set it to the page.\n                var headerTemplateData = {\n                    cmid: cmId,\n                    activityname: title,\n                    tileid: sectionNum,\n                    showDownload: objectType === \"resource_pdf\" ? 1 : 0,\n                    showNewWindow: [\"resource_pdf\", 'url'].includes(objectType) ? 1 : 0,\n                    pluginfileUrl: pluginfileUrl,\n                    forModal: true,\n                    secondaryurl: secondaryUrl\n                };\n                if (completionEnabled) {\n                    headerTemplateData.istrackeduser = 1;\n                    headerTemplateData.hascompletion = 1;\n                    const oldState = existingCompletionState === 1;\n\n                    // Core completion button template has 'overallcomplete' arg relating to this cm.\n                    // See course/templates/completion_manual.mustache.\n                    headerTemplateData.overallcomplete = oldState ? 1 : 0;\n                    headerTemplateData.overallincomplete = oldState ? 0 : 1;\n                    headerTemplateData.completionIsManual = isManualCompletion;\n                    if (!headerTemplateData.completionIsManual) {\n                        // Auto completion has different vars for core template core_course/completion_automatic.\n                        headerTemplateData.statuscomplete = headerTemplateData.overallcomplete;\n                        headerTemplateData.statusincomplete = headerTemplateData.overallincomplete;\n                    }\n                    // Trigger event to check if other items in course have updated availability.\n                    if (oldState !== headerTemplateData.completionstate) {\n                        require([\"format_tiles/completion\"], function (completion) {\n                            completion.triggerCompletionChangedEvent(parseInt(sectionNum), parseInt(cmId));\n                        });\n                    }\n                }\n\n                Templates.render(\"format_tiles/embed_module_modal_header_btns\", headerTemplateData).done(function (html) {\n                    modalRoot.find(Selector.embedModuleButtons).remove();\n                    modalRoot.find($('button.close')).remove();\n                    modalRoot.find(Selector.modalHeader).append(html);\n                    modalRoot.find(Selector.closeBtn).detach().appendTo(modalRoot.find(Selector.embedModuleButtons));\n                    const toggleCompletionSelector = '[data-action=\"toggle-manual-completion\"]';\n                    modalRoot.find(toggleCompletionSelector).on('click', () => {\n                        require([\"format_tiles/completion\"], function (completion) {\n                            // In this case, core will handle the request to set the new completion value in the DB.\n                            // We wait a moment to allow that to get a head start.\n                            // Then we trigger an event which course.js will see and update section content to show new statuses.\n                            // Use will not notice this as they are looking at the modal, but it's ready when they dismiss modal.\n                            setTimeout(() => {\n                                completion.triggerCompletionChangedEvent(\n                                    parseInt(modalRoot.data('section')), parseInt(modalRoot.data(\"cmid\"))\n                                );\n                            }, 300);\n                        });\n                    });\n                }).fail(Notification.exception);\n\n                // Allow a short delay before we resize the modal, and check a few times, as content may be loading.\n                setTimeout(() => {\n                    modalHeightChangeWatcher(modalRoot, 3, 1000);\n                }, 500);\n\n                return true;\n            });\n            return false;\n        };\n\n        /**\n         * Resize the modal to account for its content.\n         * @param {object} modalRoot\n         */\n        var resizeModal = function(modalRoot) {\n            modalRoot.find(Selector.modal).animate({\"max-width\": modalMinWidth()}, \"fast\");\n\n            var MODAL_MARGIN = 70;\n\n            // If the modal contains a Moodle mediaplayer div, remove the max width css rule which Moodle applies.\n            // Otherwise video will be 400px max wide.\n            var mediaPlayer = $(Selector.moodleMediaPlayer);\n            mediaPlayer.find(\"div\").each(function(index, child) {\n                $(child).css(\"max-width\", \"\");\n            });\n            if (mediaPlayer.length > 0) {\n                stopAllVideosOnDismiss(modalRoot);\n            }\n\n            // If the activity contains an iframe (e.g. is a page with a YouTube video in it, or H5P), ensure modal is big enough.\n            // Do this for every iframe in the course module.\n            modalRoot.find(Selector.iframe).each(function (index, iframe) {\n\n                const iframeSelector = $(iframe);\n\n                // Get the modal.\n                var modal;\n                // Boost calls the modal \"modal dialog\" so try this first.\n                modal = modalRoot.find(Selector.modalDialog);\n\n                // If no luck, try what Clean and Adaptable do instead.\n                if (modal.length === 0) {\n                    modal = modalRoot.find(Selector.modal);\n                }\n\n                // Now check and adjust the width of the modal.\n                var iframeWidth = Math.min(iframeSelector.width(), win.width());\n                if (iframeWidth > modal.width() - MODAL_MARGIN) {\n                    modal.animate(\n                        {\"max-width\": Math.max(iframeWidth + MODAL_MARGIN, modalMinWidth())},\n                        \"fast\"\n                    );\n                    modalRoot.find(Selector.modal).animate(\n                        {\"max-width\": Math.max(iframeWidth + MODAL_MARGIN, modalMinWidth())},\n                        \"fast\"\n                    );\n                }\n\n                // Then the height of the modal body.\n                var modalBody = modalRoot.find(Selector.modalBody);\n                if (iframeSelector.height() > modalBody.height() - MODAL_MARGIN) {\n                    iframeSelector.attr('height', modalBody.height() - MODAL_MARGIN);\n                }\n                stopAllVideosOnDismiss(modalRoot);\n            });\n        };\n\n        /**\n         * Check the modal height to see if the iframe in it is bigger.  If it is, adjust modal height up.\n         * Do this a few times so that, if iframe content is loading, we can check after it's loaded.\n         * @param {object} modalRoot\n         * @param {number} howManyChecks\n         * @param {number}duration\n         * @param {number} oldHeight\n         */\n        const modalHeightChangeWatcher = function (modalRoot, howManyChecks, duration, oldHeight = 0) {\n            const iframe = modalRoot.find(Selector.modalBody);\n            if (iframe) {\n                const newHeight = Math.round(iframe.height());\n                if (newHeight && newHeight > oldHeight + 10) {\n                    resizeModal(modalRoot);\n                }\n                if (howManyChecks > 0) {\n                    setTimeout(() => {\n                        modalHeightChangeWatcher(modalRoot, howManyChecks - 1, duration, newHeight);\n                    }, duration);\n                }\n            }\n        };\n\n        const logCmView = function(cmId) {\n            ajax.call([{\n                methodname: \"format_tiles_log_mod_view\", args: {\n                    courseid: courseId,\n                    cmid: cmId\n                }\n            }])[0].fail(Notification.exception);\n        };\n\n        /**\n         * Do we need a modal for this cm?\n         * @param {number} cmId course module ID\n         * @param {string} url\n         * @return boolean\n         */\n        const modalRequired = function(cmId, url) {\n            if (tilesConfig.modalallowedmodnames === undefined) {\n                return false;\n            }\n            if (tilesConfig.modalallowedcmids === undefined) {\n                return false;\n            }\n            if (!(tilesConfig.modalallowedcmids).includes(cmId)) {\n                return false;\n            }\n\n            return ((tilesConfig.modalallowedmodnames).includes('page') && url.startsWith(`${config.wwwroot}/mod/page/view.php`))\n                || ((tilesConfig.modalallowedmodnames).includes('url') && url.startsWith(`${config.wwwroot}/mod/url/view.php`))\n                || ((tilesConfig.modalallowedmodnames).includes('pdf') && url.startsWith(`${config.wwwroot}/mod/resource/view.php`))\n                || ((tilesConfig.modalallowedmodnames).includes('html')\n                    && url.startsWith(`${config.wwwroot}/mod/resource/view.php`));\n        };\n\n        return {\n            init: function (courseIdInit, isEditing, pageType, launchModalCmid, usingJsNav) {\n                courseId = courseIdInit;\n                $(document).ready(function () {\n                    tilesConfig = $('#format-tiles-js-config').data();\n                    const courseIndex = $('nav#courseindex');\n\n                    if (['course-view-tiles', 'section-view-tiles'].includes(pageType)) {\n                        // We are on a main tiles page, /course/view.php or /course/section.php in Moodle 4.4+.\n                        // If any link in the course index on the left is clicked, check if it needs a modal.\n                        // If it does, launch the modal instead of following the link.\n                        // This isn't ideal but saves plugin re-implementing / maintaining large volume of course index code.\n                        if (courseIndex.length > 0) {\n                            courseIndex.on('click', function(e) {\n                                const target = $(e.target);\n                                const link = target.hasClass('courseindex-link') ? target : target.find('a.courseindex-link');\n                                if (link && link.data('for') === 'cm_name') {\n                                    e.preventDefault();\n                                    const linkUrl = link.attr('href');\n                                    if (linkUrl) {\n                                        const cmId = link.closest('li.courseindex-item').data('id');\n                                        if (modalRequired(cmId, linkUrl)) {\n                                            ajax.call([{\n                                                methodname: \"format_tiles_get_course_mod_info\", args: {cmid: cmId}\n                                            }])[0].done(function (data) {\n                                                if (!data || !data.modalallowed) {\n                                                    window.location.href = linkUrl;\n                                                    return;\n                                                }\n                                                if (usingJsNav) {\n                                                    const expandedSection = $(`li#section-${data.sectionnumber}.state-visible`);\n                                                    if (expandedSection.length === 0) {\n                                                        require([\"format_tiles/course\"], function (course) {\n                                                            course.populateAndExpandSection(\n                                                                data.coursecontextid, data.sectionid, data.sectionnumber\n                                                            );\n                                                        });\n                                                    }\n                                                    launchCmModal(\n                                                        cmId,\n                                                        data.modulecontextid,\n                                                        data.sectionnumber,\n                                                        data.name,\n                                                        data.modname === 'resource'\n                                                            ? `resource_${data.resourcetype}` : data.modname,\n                                                        data.modname === 'url' || data.resourcetype === 'html'\n                                                            ? data.pluginfileurl : linkUrl,\n                                                        data.completionenabled ? 1 : 0,\n                                                        data.iscomplete ? 1 : 0,\n                                                        data.ismanualcompletion,\n                                                        data.pluginfileurl\n                                                    );\n                                                } else {\n                                                    window.location.href = config.wwwroot\n                                                        + `/course/view.php?id=${courseId}`\n                                                        + `&section=${data.sectionnumber}&cmid=${cmId}`;\n                                                }\n                                            })\n                                            .fail(function() {\n                                                window.location.href = linkUrl;\n                                            });\n                                        } else {\n                                            window.location.href = linkUrl;\n                                        }\n                                    }\n                                }\n                            });\n                        }\n\n                        // If we are passing ?cmid=xxx in the URL this suggests we are trying to launch course mod modal.\n                        // This would be from clicking a course index link while in another activity.\n                        // E.g. from /mod/xxx/view.php for another course module.\n                        // This isn't ideal but saves this plugin re-implementing / maintaining large volume of course index code.\n                        if (launchModalCmid) {\n                            ajax.call([{\n                                methodname: \"format_tiles_get_course_mod_info\", args: {cmid: launchModalCmid}\n                            }])[0].done(function (data) {\n                                if (data && data.modalallowed) {\n                                    const expandedSection = $(`li#section-${data.sectionnumber}.state-visible`);\n                                    if (expandedSection.length === 0) {\n                                        if (usingJsNav) {\n                                            require([\"format_tiles/course\"], function (course) {\n                                                course.populateAndExpandSection(\n                                                    data.coursecontextid, data.sectionid, data.sectionnumber\n                                                );\n                                            });\n                                        }\n                                    }\n\n                                    launchCmModal(\n                                        launchModalCmid,\n                                        data.modulecontextid,\n                                        data.sectionnumber,\n                                        data.name,\n                                        data.modname === 'resource' ? `resource_${data.resourcetype}` : data.modname,\n                                        ['url', 'resource'].includes(data.modname) ? data.pluginfileurl : '',\n                                        data.completionenabled ? 1 : 0,\n                                        data.iscomplete ? 1 : 0,\n                                        data.ismanualcompletion,\n                                        data.secondaryurl\n                                    );\n                                }\n                            });\n                        }\n\n                        const launchModalDataActions =\n                            [\"launch-tiles-resource-modal\", \"launch-tiles-module-modal\", \"launch-tiles-url-modal\"];\n                        var modalSelectors = launchModalDataActions.map(function (action) {\n                            return `[data-action=\"${action}\"]`;\n                        }).join(\", \");\n\n                        var pageContent = $(Selector.pageContent);\n                        if (pageContent.length === 0) {\n                            // Some themes e.g. RemUI do not have a #page-content div, so use #region-main.\n                            pageContent = $(Selector.regionMain);\n                        }\n                        pageContent.on(\"click\", modalSelectors, function (e) {\n                            // If click is on a completion checkbox within activity, ignore here as handled elsewhere.\n                            const tgt = $(e.target);\n                            const isExcludedControl = tgt.hasClass(CLASS.COMPLETION_CHECK_BOX)\n                                || tgt.parent().hasClass(CLASS.COMPLETION_CHECK_BOX)\n                                || tgt.hasClass(CLASS.COMPLETION_DROPDOWN)\n                                || tgt.parent().hasClass(CLASS.COMPLETION_DROPDOWN)\n                                || tgt.is(\":button\")\n                                || tgt.hasClass('expanded-content') // \"Show less\" link on restrictions.\n                                || tgt.hasClass('collapsed-content'); // \"Show more\" link on restrictions\n                            if (isExcludedControl) {\n                                return;\n                            }\n                            e.preventDefault();\n                            const currTgt = $(e.currentTarget);\n                            var clickedCmObject = currTgt.closest(\"li.activity\");\n                            const cmId = clickedCmObject.data('cmid');\n                            const moduleContextId = clickedCmObject.data('contextid');\n                            const sectionNum = clickedCmObject.closest(Selector.sectionMain).data('section');\n\n                            // If we already have this modal on the page, launch it.\n                            var existingModal = modalStore[cmId];\n                            if (typeof existingModal === \"object\") {\n                                existingModal.show();\n                            } else {\n                                // Log the fact we viewed it (only do this once not every time the modal launches).\n                                logCmView(cmId);\n\n                                // We don't already have it, so make it.\n                                launchCmModal(\n                                    cmId,\n                                    moduleContextId,\n                                    sectionNum,\n                                    clickedCmObject.data('title'),\n                                    clickedCmObject.data('modtype'),\n                                    clickedCmObject.data('url'),\n                                    clickedCmObject.hasClass(CLASS.COMPLETION_ENABLED),\n                                    clickedCmObject.data('completion-state')\n                                        ? parseInt(clickedCmObject.data('completion-state')) : null,\n                                    clickedCmObject.hasClass(CLASS.COMPLETION_MANUAL),\n                                    clickedCmObject.data(\"url-secondary\")\n                                );\n                            }\n                        });\n\n                        // Render the loading icon and append it to body so that we can use it later.\n                        Templates.render(\"format_tiles/loading\", {})\n                            .catch(Notification.exception)\n                            .done(function (html) {\n                                loadingIconHtml = html; // TODO get this from elsewhere.\n                            }).fail(Notification.exception);\n\n                        // If completion of a cm changes, remove it from store so that it can be re-rendered with correct heading.\n                        $(document).on('format-tiles-completion-changed', function(e, data) {\n                            if (data.cmid && modalStore[data.cmid]) {\n                                modalStore[data.cmid] = undefined;\n                            }\n                        });\n                    } else if (pageType.match('^mod-[a-z]+-view$')) {\n                        courseIndex.on('click', function (e) {\n                            const target = $(e.target);\n                            const link = target.hasClass('courseindex-link') ? target : target.find('a.courseindex-link');\n                            if (link && link.data('for') === 'cm_name') {\n                                e.preventDefault();\n                                const linkUrl = link.attr('href');\n                                if (linkUrl) {\n                                    const link = $(e.target);\n                                    const cmId = link.closest('li.courseindex-item').data('id');\n                                    if (modalRequired(cmId, linkUrl)) {\n                                        if (usingJsNav) {\n                                            window.location.href = `${config.wwwroot}/course/view.php?id=${courseId}&cmid=${cmId}`;\n                                        } else {\n                                            const sectionElement = link.closest('.courseindex-section');\n                                            const sectionNumber = sectionElement ? sectionElement.data('number') : 0;\n                                            window.location.href = `${config.wwwroot}/course/view.php?id=${courseId}`\n                                                + `&section=${sectionNumber}&cmid=${cmId}`;\n                                        }\n                                    } else {\n                                        window.location.href = linkUrl;\n                                    }\n                                }\n                            }\n                        });\n                    }\n                });\n            }\n        };\n    }\n);\n"],"names":["define","$","modalFactory","config","Templates","Notification","ajax","Fragment","ModalEvents","loadingIconHtml","modalStore","win","window","courseId","tilesConfig","Selector","CLASS","modalMinWidth","Math","min","width","stopAllVideosOnDismiss","modal","on","hidden","iframes","find","objects","moodleMediaPlayer","length","data","undefined","remove","launchCmModal","cmId","moduleContextId","sectionNum","title","objectType","pluginfileUrl","completionEnabled","existingCompletionState","isManualCompletion","secondaryUrl","create","type","types","DEFAULT","body","done","setLarge","show","modalRoot","root","attr","addClass","loadFragment","contextid","html","js","setBody","runTemplateJS","templateData","id","height","round","cmid","tileid","isediting","sesskey","activityname","wwwroot","completionstring","secondaryurl","template","render","animate","fail","exception","headerTemplateData","showDownload","showNewWindow","includes","forModal","istrackeduser","hascompletion","oldState","overallcomplete","overallincomplete","completionIsManual","statuscomplete","statusincomplete","completionstate","require","completion","triggerCompletionChangedEvent","parseInt","append","detach","appendTo","setTimeout","modalHeightChangeWatcher","resizeModal","mediaPlayer","each","index","child","css","iframe","iframeSelector","iframeWidth","max","modalBody","howManyChecks","duration","oldHeight","newHeight","modalRequired","url","modalallowedmodnames","modalallowedcmids","startsWith","init","courseIdInit","isEditing","pageType","launchModalCmid","usingJsNav","document","ready","courseIndex","e","target","link","hasClass","preventDefault","linkUrl","closest","call","methodname","args","modalallowed","sectionnumber","course","populateAndExpandSection","coursecontextid","sectionid","modulecontextid","name","modname","resourcetype","pluginfileurl","completionenabled","iscomplete","ismanualcompletion","location","href","modalSelectors","map","action","join","pageContent","tgt","parent","is","clickedCmObject","currentTarget","existingModal","courseid","logCmView","catch","match","sectionElement","sectionNumber"],"mappings":"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"}