{{!
    block_<blockname>.php

    * component
    * copyright
}}
{{< common/boilerplate_php }}
{{$ description }}Block {{ component_name }} is defined here.{{/ description }}
{{$ package }}{{ component }}{{/ package }}
{{$ copyright }}{{ copyright }}{{/ copyright }}
{{/ common/boilerplate_php }}

/**
 * {{ component_name }} block.
 *
 * @package    {{ component }}
 * @copyright  {{ copyright }}
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class {{ component }} extends block_base {

    /**
     * Initializes class member variables.
     */
    public function init() {
        // Needed by Moodle to differentiate between blocks.
        $this->title = get_string('pluginname', '{{ component }}');
    }

    /**
     * Returns the block contents.
     *
     * @return stdClass The block contents.
     */
    public function get_content() {

        if ($this->content !== null) {
            return $this->content;
        }

        if (empty($this->instance)) {
            $this->content = '';
            return $this->content;
        }

        $this->content = new stdClass();
        $this->content->items = array();
        $this->content->icons = array();
        $this->content->footer = '';

        if (!empty($this->config->text)) {
            $this->content->text = $this->config->text;
        } else {
            $text = 'Please define the content text in {{ self.relpath }}.';
            $this->content->text = $text;
        }

        return $this->content;
    }

    /**
     * Defines configuration data.
     *
     * The function is called immediatly after init().
     */
    public function specialization() {

        // Load user defined title and make sure it's never empty.
        if (empty($this->config->title)) {
            $this->title = get_string('pluginname', '{{ component }}');
        } else {
            $this->title = $this->config->title;
        }
    }
{{# self.has_instance_allow_multiple }}

    /**
     * Allow multiple instances in a single course?
     *
     * @return bool True if multiple instances are allowed, false otherwise.
     */
    public function instance_allow_multiple() {
        return true;
    }
{{/ self.has_instance_allow_multiple }}
{{# self.has_config }}

    /**
     * Enables global configuration of the block in settings.php.
     *
     * @return bool True if the global configuration is enabled.
     */
    function has_config() {
        return true;
    }
{{/ self.has_config }}

    /**
     * Sets the applicable formats for the block.
     *
     * @return string[] Array of pages and permissions.
     */
    public function applicable_formats() {
        return array(
            {{# block_features.applicable_formats }}
            '{{ .page }}' => {{ .allowed }},
            {{/ block_features.applicable_formats }}
        );
    }
}
