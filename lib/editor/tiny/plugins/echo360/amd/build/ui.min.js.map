{"version":3,"file":"ui.min.js","sources":["../src/ui.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny Echo360 UI.\n *\n * @module      tiny_echo360/ui\n * @copyright   2023 Echo360 Inc.\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport ModalFactory from 'core/modal_factory';\nimport Ajax from 'core/ajax';\nimport Echo360Modal from 'tiny_echo360/modal';\nimport {getContextId} from \"editor_tiny/options\";\nimport Config from 'core/config';\n\nlet instanceOpeningSelection = null;\nlet instanceEditor = null;\nlet instanceModal = null;\n\n/**\n * Handle action.\n *\n * @param {TinyMCE} editor\n */\nexport const handleAction = (editor) => {\n    instanceEditor = editor;\n    instanceOpeningSelection = editor.selection.getBookmark();\n    displayDialogue(editor);\n};\n\nconst echoEventListeners = [];\n\n/**\n * Returns the query parameters from data as an object\n *\n * @method  getQueryParams\n * @param   {String} data from the Message object sent from the IFrame\n */\nconst getQueryParams = (data) => {\n    try {\n        // Only parse query params if data is a string value to split.\n        if (data !== null && typeof data == 'string') {\n            let jsonData = decodeURI(data.split('?')[1])\n              .replace(/\"/g, '\\\\\"')\n              .replace(/&/g, '\",\"')\n              .replace(/[=]/g, '\":\"')\n              .replace(/\\\\/g, '\\\\\\\\');\n            let queryParams = JSON.parse('{\"' + jsonData + '\"}');\n            if (!queryParams.hasOwnProperty('url')) {\n                return null;\n            } else {\n                queryParams.url = decodeURIComponent(queryParams.url);\n            }\n            queryParams.title = queryParams.title || queryParams.url;\n            return queryParams;\n        }\n    } catch (err) {\n        return null;\n    }\n};\n\n/**\n * Inserts the users input onto the page\n *\n * @method  _doInsert\n * @param   {String} media to embed in editor\n * @private\n */\nconst doInsert = (media) => {\n    instanceEditor.selection.moveToBookmark(instanceOpeningSelection);\n    instanceEditor.execCommand('mceInsertContent', false, media);\n    instanceEditor.selection.moveToBookmark(instanceOpeningSelection);\n    instanceModal.destroy();\n};\n\nconst receiveEchoMessage = (e, cmid) => {\n    if (e.data) {\n        let media = null;\n        let filterLaunchUrl = Config.wwwroot + '/filter/echo360tiny/lti_launch.php';\n        let queryParameters = getQueryParams(e.data);\n        if (queryParameters) {\n            switch (queryParameters.return_type) {\n                case 'iframe':              // Public IFrame Embed.\n                    media = '<iframe ' + 'src=\"' + queryParameters.url\n                        + '\" height=\"' + queryParameters.height\n                        + '\" width=\"' + queryParameters.width\n                        + '\" title=\"' + queryParameters.title\n                        + '\" allowfullscreen=\"allowfullscreen'\n                        + '\" webkitallowfullscreen=\"webkitallowfullscreen'\n                        + '\" mozallowfullscreen=\"mozallowfullscreen'\n                        + '\"></iframe> ';\n                    break;\n                case 'url':                 // Public Link.\n                    media = '<a href=\"' + queryParameters.url + '\" target=\"_blank\">' + queryParameters.title + '</a> ';\n                    break;\n                case 'lti_launch_url':      // Authenticated Link/Embed with LTI Launch Proxy.\n                    if (queryParameters.link_type === 'link') {\n                        let url = filterLaunchUrl\n                            + '?url=' + encodeURIComponent(queryParameters.url)\n                            + '&cmid=' + cmid;\n                        media = '<a href=\"' + url + '\" target=\"_blank\">' + queryParameters.title + '</a> ';\n                    } else {\n                        let url = filterLaunchUrl\n                            + '?url=' + encodeURIComponent(queryParameters.url)\n                            + '&cmid=' + cmid\n                            + '&width=' + queryParameters.width\n                            + '&height=' + queryParameters.height;\n                        media = '<a href=\"' + url + '\" target=\"_blank\">' + queryParameters.title + '</a> ';\n                    }\n                    break;\n                case 'homework': {           // Authenticated Homework Link with LTI Launch Proxy.\n                    let url = filterLaunchUrl\n                      + '?url=' + encodeURIComponent(queryParameters.url)\n                      + '&cmid=' + cmid\n                      + '&width=640'\n                      + '&height=360';\n                    media = '<a href=\"' + url + '\" target=\"_blank\">' + queryParameters.title + '</a> ';\n                    break;\n                }\n                default:\n                    // Return type invalid\n            }\n\n            // Only embed if media is assigned data.\n            if (media !== null && media != '') {\n                doInsert(media);\n            }\n        } else {\n            // DO NOT RESET EDITOR REFERENCE IF NO QUERY PARAMETERS ARE PARSED YET.\n        }\n    } else {\n        // No data returned from message\n    }\n\n};\n\n/**\n * Display the link dialogue.\n *\n * @param {TinyMCE} editor\n * @returns {Promise<void>}\n */\nconst displayDialogue = async(editor) => {\n\n    const contextid = getContextId(editor);\n    const prom = Ajax.call([{\n        methodname: 'tiny_echo360_request_lti_configuration',\n        args: {\n            contextid: contextid\n        }\n    }]);\n\n    prom[0].done(function (ltiConfiguration) {\n        ltiConfiguration['element_id'] = editor.id;\n\n        ModalFactory.create({\n            type: Echo360Modal.TYPE,\n            templateContext: ltiConfiguration,\n            large: true,\n        }).then(function(modal) {\n            instanceModal = modal;\n            modal.show();\n            let form = document.getElementById(\"echo360-form-\" + editor.id);\n            form.submit();\n            form.parentNode.removeChild(form);\n        });\n\n        if(!echoEventListeners[editor.id]) {\n            window.addEventListener(\n              'message', function (e) {\n                  e.stopPropagation();\n                  return receiveEchoMessage(e, this.resource_link_id);\n              }.bind(ltiConfiguration), true\n            );\n        }\n        echoEventListeners[editor.id] = true;\n    });\n};\n"],"names":["instanceOpeningSelection","instanceEditor","instanceModal","editor","selection","getBookmark","displayDialogue","echoEventListeners","receiveEchoMessage","e","cmid","data","media","filterLaunchUrl","Config","wwwroot","queryParameters","jsonData","decodeURI","split","replace","queryParams","JSON","parse","hasOwnProperty","url","decodeURIComponent","title","err","getQueryParams","return_type","height","width","link_type","encodeURIComponent","moveToBookmark","execCommand","destroy","doInsert","async","contextid","Ajax","call","methodname","args","done","ltiConfiguration","id","create","type","Echo360Modal","TYPE","templateContext","large","then","modal","show","form","document","getElementById","submit","parentNode","removeChild","window","addEventListener","stopPropagation","this","resource_link_id","bind"],"mappings":";;;;;;;sQA6BIA,yBAA2B,KAC3BC,eAAiB,KACjBC,cAAgB,2BAOSC,SACzBF,eAAiBE,OACjBH,yBAA2BG,OAAOC,UAAUC,cAC5CC,gBAAgBH,eAGdI,mBAAqB,GA6CrBC,mBAAqB,CAACC,EAAGC,WACvBD,EAAEE,KAAM,KACJC,MAAQ,KACRC,gBAAkBC,gBAAOC,QAAU,qCACnCC,gBAzCYL,CAAAA,cAGH,OAATA,MAAgC,iBAARA,KAAkB,KACtCM,SAAWC,UAAUP,KAAKQ,MAAM,KAAK,IACtCC,QAAQ,KAAM,OACdA,QAAQ,KAAM,OACdA,QAAQ,OAAQ,OAChBA,QAAQ,MAAO,QACdC,YAAcC,KAAKC,MAAM,KAAON,SAAW,aAC1CI,YAAYG,eAAe,QAG5BH,YAAYI,IAAMC,mBAAmBL,YAAYI,KAErDJ,YAAYM,MAAQN,YAAYM,OAASN,YAAYI,IAC9CJ,aALI,MAOjB,MAAOO,YACE,OAsBeC,CAAepB,EAAEE,SACnCK,gBAAiB,QACTA,gBAAgBc,iBACf,SACDlB,MAAQ,gBAAuBI,gBAAgBS,IACzC,aAAeT,gBAAgBe,OAC/B,YAAcf,gBAAgBgB,MAC9B,YAAchB,gBAAgBW,MAH5B,iJASP,MACDf,MAAQ,YAAcI,gBAAgBS,IAAM,qBAAuBT,gBAAgBW,MAAQ,kBAE1F,oBACiC,SAA9BX,gBAAgBiB,UAAsB,CAItCrB,MAAQ,aAHEC,gBACJ,QAAUqB,mBAAmBlB,gBAAgBS,KAC7C,SAAWf,MACW,qBAAuBM,gBAAgBW,MAAQ,YACxE,CAMHf,MAAQ,aALEC,gBACJ,QAAUqB,mBAAmBlB,gBAAgBS,KAC7C,SAAWf,KACX,UAAYM,gBAAgBgB,MAC5B,WAAahB,gBAAgBe,QACP,qBAAuBf,gBAAgBW,MAAQ,kBAG9E,WAMDf,MAAQ,aALEC,gBACN,QAAUqB,mBAAmBlB,gBAAgBS,KAC7C,SAAWf,KAFLG,yBAKkB,qBAAuBG,gBAAgBW,MAAQ,cAQrE,OAAVf,OAA2B,IAATA,OAxDhBA,CAAAA,QACdX,eAAeG,UAAU+B,eAAenC,0BACxCC,eAAemC,YAAY,oBAAoB,EAAOxB,OACtDX,eAAeG,UAAU+B,eAAenC,0BACxCE,cAAcmC,WAqDFC,CAAS1B,UAiBnBN,gBAAkBiC,MAAAA,eAEdC,WAAY,yBAAarC,QAClBsC,cAAKC,KAAK,CAAC,CACpBC,WAAY,yCACZC,KAAM,CACFJ,UAAWA,cAId,GAAGK,MAAK,SAAUC,kBACnBA,iBAAgB,WAAiB3C,OAAO4C,0BAE3BC,OAAO,CAChBC,KAAMC,eAAaC,KACnBC,gBAAiBN,iBACjBO,OAAO,IACRC,MAAK,SAASC,OACbrD,cAAgBqD,MAChBA,MAAMC,WACFC,KAAOC,SAASC,eAAe,gBAAkBxD,OAAO4C,IAC5DU,KAAKG,SACLH,KAAKI,WAAWC,YAAYL,SAG5BlD,mBAAmBJ,OAAO4C,KAC1BgB,OAAOC,iBACL,UAAW,SAAUvD,UACjBA,EAAEwD,kBACKzD,mBAAmBC,EAAGyD,KAAKC,mBACpCC,KAAKtB,mBAAmB,GAGhCvC,mBAAmBJ,OAAO4C,KAAM"}