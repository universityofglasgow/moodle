{"version":3,"file":"course.min.js","sources":["../src/course.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/* eslint space-before-function-paren: 0 */\n\n/**\n * Main Javascript module for format_tiles for when user is *NOT* editing.\n * See course_edit for if they are editing.\n * Handles the UI changes when tiles are selected and anything else not\n * covered by the specific modules\n *\n * @module      format_tiles/course\n * @copyright   2018 David Watson {@link http://evolutioncode.uk}\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine([\"jquery\", \"core/templates\", \"core/ajax\", \"format_tiles/browser_storage\",\n        \"core/notification\", \"core/str\", \"format_tiles/tile_fitter\", 'core/fragment'],\n    function ($, Templates, ajax, browserStorage, Notification, str, tileFitter, Fragment) {\n        \"use strict\";\n\n        var isMobile;\n        var loadingIconHtml;\n        var stringStore = [];\n        var HEADER_BAR_HEIGHT = 60; // This varies by theme and version so will be reset once pages loads below.\n        var reopenLastVisitedSection = false;\n        var courseId;\n        var courseContextId;\n        var resizeLocked = false;\n        var enableCompletion;\n        var reorgSectionsDisabledUntil = 0;\n\n         // Keep a record of which tile is currently open.\n        var openTile = 0;\n\n        var Selector = {\n            BODY: \"body\",\n            PAGE: \"#page\",\n            TILE: \".tile\",\n            TILEID: \"#tile-\",\n            MOVEABLE_SECTION: \".moveablesection\",\n            FILTER_BUTTON: \".filterbutton\",\n            TILE_LOADING_ICON: \".tile-loading-icon\",\n            TILE_LOADING_ICON_ID: \"#loading-icon-\",\n            TILE_COLLAPSED: \".tile-collapsed\",\n            TILE_CLICKABLE: \".tile-clickable\",\n            TILES: \"ul.tiles\",\n            ACTIVITY: \".activity\",\n            ACTIVITY_NAME: \".activityname\",\n            ABOVE_TILES: \"#abovetiles\",\n            INSTANCE_NAME: \".instancename\",\n            SPACER: \".spacer\",\n            SECTION_MOVEABLE: \".moveablesection\",\n            SECTION_ID: \"#section-\",\n            SECTION_TITLE: \".sectiontitle\",\n            SECTION_MAIN: \".section.main\",\n            SECTION_BUTTONS: \".sectionbuttons\",\n            CLOSE_SEC_BTN: \".closesectionbtn\",\n            HIDE_SEC0_BTN: \".buttonhidesec0\",\n            SECTION_ZERO: \"#section-0\",\n            MOODLE_VIDEO: \".mediaplugin.mediaplugin_videojs\",\n            LAUNCH_STANDARD: '[data-action=\"launch-tiles-standard\"]',\n            MANUAL_COMPLETION: '[data-action=\"toggle-manual-completion\"]',\n            TOOLTIP: \"[data-toggle=tooltip]\",\n            MATHJAX_EQUATION: \".filter_mathjaxloader_equation\"\n        };\n        var ClassNames = {\n            SELECTED: \"selected\",\n            OPEN: \"open\",\n            CLOSED: \"closed\",\n            LAUNCH_CM_MODAL: \"launch-tiles-cm-modal\",\n            STATE_VISIBLE: 'state-visible', // This is a Snap theme class. Was added to make this format cooperate better with it.\n            HAS_OPEN_TILE: 'format-tiles-tile-open',\n            ON_TILE_CONTROL: 'on-tile-control' // Tiles may have controls on them which do not open the section when clicked.\n        };\n\n        var Event = {\n            CLICK: \"click\",\n            KEYDOWN: \"keydown\",\n            SCROLL: \"scroll\"\n        };\n\n        var CSS = {\n            DISPLAY: \"display\",\n            Z_INDEX: \"z-index\",\n            HEIGHT: \"height\",\n            BG_COLOUR: \"background-color\"\n        };\n        var Keyboard = {\n            ESCAPE: 27,\n            TAB: 9,\n            RETURN: 13\n        };\n\n        const OVERLAY_ID = 'format_tiles_overlay';\n\n        /**\n         * If we have embedded video in section, stop it.\n         * Runs when section is closed.\n         * @param {number} section sec number where the video is.\n         * @param {number} sectionId sec ID where the video is.\n         */\n        var stopVideoPlaying = function(section, sectionId) {\n            var contentSection = $(Selector.SECTION_ID + section);\n\n            // First iframes (e.g. embedded YouTube).\n            contentSection.find(\"iframe\").each(function (index, iframe) {\n                iframe = $(iframe);\n                // Remove the src from the iframe but keep it in case the section is re-opened.\n                if (iframe.attr('src')) {\n                    iframe.data('src', iframe.attr(\"src\"));\n                    iframe.attr('src', \"\");\n                }\n            });\n\n            // Then Moodle media player.\n            var mediaPlayers = contentSection.find(Selector.MOODLE_VIDEO);\n            if (mediaPlayers.length > 0) {\n                contentSection.html(\"\");\n                getSectionContentFromServer(courseContextId, sectionId).done(function (html, js) {\n                    setCourseContentHTML(contentSection, html, js);\n                });\n            }\n        };\n\n        /**\n         * When JS navigation is being used, when a user un-selects a tile, we have to un-fade other tiles\n         * @param {number} sectionToFocus if we want to focus a tile after closing, which one\n         */\n        var cancelTileSelections = function (sectionToFocus) {\n            $(Selector.MOVEABLE_SECTION).each(function (index, sec) {\n                sec = $(sec);\n                if (sec.is(\":visible\")) {\n                    stopVideoPlaying(sec.data(\"section\"), sec.data(\"sectionid\"));\n                    sec.slideUp().removeClass(ClassNames.STATE_VISIBLE); // Excludes section 0.\n                }\n            });\n            $(Selector.TILE).removeClass(ClassNames.SELECTED).css(CSS.Z_INDEX, \"\").css(CSS.BG_COLOUR, \"\");\n            $(\".section \" + ClassNames.SELECTED).removeClass(ClassNames.SELECTED).css(CSS.Z_INDEX, \"\");\n\n            if (sectionToFocus !== undefined && sectionToFocus !== 0) {\n                $(Selector.TILEID + sectionToFocus).focus();\n            }\n            $(Selector.TILE_LOADING_ICON).fadeOut(300, function () {\n                $(Selector.TILE_LOADING_ICON).html(\"\");\n            });\n            openTile = 0;\n            $(Selector.BODY).removeClass(ClassNames.HAS_OPEN_TILE);\n            overlay.fadeOut(300);\n        };\n\n        const overlay = $('#' + OVERLAY_ID);\n\n        /**\n         * Used where the user clicks the window overlay but we want the active click to be behind the\n         * overlay e.g. the tile or custom menu item behind it.  So we get the co-ordinates of the click\n         * on the overlay and then repeat the click at that spot ignoring the overlay\n         * @param {object} e the click event object\n         */\n        var clickItemBehind = function (e) {\n            var clickedItem = $(e.currentTarget);\n            if (clickedItem.attr(\"id\") === OVERLAY_ID) {\n                // We need to know what is behind the modal, so hide it for an instant to find out.\n                clickedItem.hide();\n                var BottomElement = $(document.elementFromPoint(e.clientX, e.clientY));\n                clickedItem.show();\n                if (BottomElement.hasClass(\"filterbutton\") || BottomElement.hasClass(\"list-group-item\")) {\n                    // Must ba a filter button clicked or a nav drawer item.\n                    BottomElement.click();\n                } else {\n                    // Must be a tile clicked.\n                    var clickedTile = BottomElement.closest(Selector.TILE);\n                    if (clickedTile) {\n                        clickedTile.click();\n                    }\n                }\n            }\n        };\n\n        /**\n         * Set the HTML for a course section to the correct div in the page\n         * @param {Object} contentArea the jquery object for the content area\n         * @param {String} html the HTML\n         * @param {String} js Any additional JS for the new HTML.\n         */\n        var setCourseContentHTML = function (contentArea, html, js) {\n            if (html) {\n                contentArea.html(html);\n                $(Selector.TILE_LOADING_ICON).fadeOut(300, function () {\n                    $(Selector.TILE_LOADING_ICON).html(\"\");\n                });\n\n                if (contentArea.attr(\"id\") !== Selector.SECTION_ZERO) {\n                    // Trap the tab key navigation in the content bearing section.\n                    // Until the user clicks the close button.\n                    // When user reaches last item, send them back to first.\n                    // And vice versa if going backwards.\n\n                    var activities = contentArea.find(Selector.ACTIVITY).not(Selector.SPACER);\n                    contentArea.on(Event.KEYDOWN, function (e) {\n                        if (e.keyCode === Keyboard.ESCAPE) {\n                            // Close open tile, and return focus to closed tile, for screen reader user.\n                            browserStorage.setLastVisitedSection(0);\n                            cancelTileSelections(0);\n                            $(Selector.TILEID + contentArea.data('section')).focus();\n                        }\n                    });\n                    activities.on(Event.KEYDOWN, function (e) {\n                        if (e.keyCode === Keyboard.RETURN) {\n                            var toClick = $(e.currentTarget).find(\"a\");\n                            if (toClick.hasClass(ClassNames.LAUNCH_CM_MODAL)) {\n                                toClick.click();\n                            } else if (toClick.attr(\"href\") !== undefined) {\n                                window.location.href = toClick.attr(\"href\");\n                            }\n                        }\n                    });\n                    if (!isMobile) {\n                        activities.last().on(Event.KEYDOWN, function (e) {\n                            if (e.keyCode === Keyboard.TAB && !e.shiftKey\n                                    && $(e.relatedTarget).closest(Selector.SECTION_MAIN).attr(\"id\") !== contentArea.attr(\"id\")) {\n                                // RelatedTarget is the item we tabbed to.\n                                // If we reached here, the item we are on is not a member of the section we were in.\n                                // (I.e. we are trying to tab out of bottom of section) so move tab to section title instead.\n                                setTimeout(function () {\n                                    // Allow very short delay so we dont skip forward on the basis of our last key press.\n                                    contentArea.find(Selector.SECTION_TITLE).focus();\n                                    contentArea.find(Selector.SECTION_BUTTONS).css(\"top\", \"\");\n                                }, 200);\n                            }\n                        });\n                        contentArea.find(Selector.SECTION_TITLE).on(Event.KEYDOWN, function (e) {\n                            if (e.keyCode === Keyboard.TAB && e.shiftKey\n                                    && $(e.relatedTarget).closest(Selector.SECTION_MAIN).attr(\"id\") !== contentArea.attr(\"id\")) {\n                                // See explanation previous block.\n                                // Here we are trying to tab backwards out of the top of our section.\n                                // So take us to last item instead.\n                                setTimeout(function () {\n                                    activities.last().focus();\n                                }, 200);\n                            }\n                        });\n                    }\n                }\n\n                if (!isMobile) {\n                    // Activate tooltips for completion toggle and any \"restricted\" items in this content.\n                    setTimeout(function () {\n                        // Manual forms, auto icons and \"Restricted until ...\" etc.\n                        try {\n                            const tooltipItems = contentArea.find(\".badge-info\");\n                            if (tooltipItems.length > 0 && typeof tooltipItems.tooltip == 'function') {\n                                tooltipItems.tooltip();\n                            }\n                        } catch (err) {\n                            require([\"core/log\"], function(log) {\n                                log.debug(err);\n                            });\n                        }\n                    }, 500);\n                }\n\n                setTimeout(() => {\n                    // If subtile title is long, it overlaps background image.\n                    // Check heights to see if any subtile backgrounds need dimming.\n                    // Allow short delay for content to be added first.\n                    const MAX_HEIGHT = 110;\n                    contentArea.find(\n                        Selector.ACTIVITY_NAME).each((i, el) => {\n                        el = $(el);\n                        if (el.height() > MAX_HEIGHT) {\n                            el.closest(Selector.INSTANCE_NAME).addClass('opaque-bg');\n                        }\n                    });\n                }, 100);\n            }\n            setTimeout(() => {\n                if (js) {\n                    // User may be opening same section multiple times so avoid adding same script again.\n                    const head = $('head');\n                    const existingScripts = head.find('script').filter(\n                        (index, script) => {\n                            return $(script).html() === js;\n                        }\n                    );\n                    if (existingScripts.length === 0) {\n                        Templates.runTemplateJS(js);\n                    }\n                }\n\n                applyMathJax(contentArea);\n\n                const moodleVideos = contentArea.find(Selector.MOODLE_VIDEO);\n                if (moodleVideos.length > 0) {\n                    // This already happens once on page load, but we repeat since reloaded HTML containing lazy load videos.\n                    require([\"media_videojs/loader\"], function (videoJS) {\n                        videoJS.setUp();\n                    });\n\n                    // Issue 87 - If video fullscreen button is pressed, temporarily disable tile re-orgs on screen resize.\n                    const fsEvents = ['fullscreenchange', 'webkitfullscreenchang', 'mozfullscreenchange', 'msfullscreenchange'];\n                    fsEvents.forEach(function (ev) {\n                        document.addEventListener(ev, function () {\n                            const disableDurationMilliSeconds = 1000;\n                            reorgSectionsDisabledUntil = Date.now() + disableDurationMilliSeconds;\n                        });\n                    });\n                }\n            }, 1000);\n\n            $(document).trigger('format-tiles-section-content-changed', {\n                courseId: parseInt(courseId),\n                section: contentArea.data('section'),\n                sectionid: contentArea.data('sectionid')\n            });\n        };\n\n        /**\n         * Find Mathjax equations in a content area and queue them for processing.\n         * @param {Object} contentArea the jquery object for the content area\n         */\n        const applyMathJax = function(contentArea) {\n            if (typeof window.MathJax !== \"undefined\") {\n                try {\n                    const mathJaxElems = contentArea.find(Selector.MATHJAX_EQUATION);\n                    if (mathJaxElems.length) {\n                        mathJaxElems.each((i, node) => {\n                            window.MathJax.Hub.Queue([\"Typeset\", window.MathJax.Hub, node]);\n                        });\n                    }\n                } catch (err) {\n                    require([\"core/log\"], function (log) {\n                        log.debug(err);\n                    });\n                }\n            }\n        };\n\n        /**\n         * Expand a content containing section (e.g. on tile click)\n         * @param {object} contentArea\n         * @param {number} sectionNumber to expand\n         */\n        var expandSection = function (contentArea, sectionNumber) {\n            const tile = $(\"#tile-\" + sectionNumber);\n            var expandAndScroll = function () {\n                // Scroll to the top of content bearing section\n                // we have to wait until possible reOrg and slide down totally before calling this, else co-ords are wrong.\n                var scrollTo = (tile.offset().top) - $('#section-zero-container').offset().top + HEADER_BAR_HEIGHT;\n                if (scrollTo === $(window).scrollTop) {\n                    // Scroll by at least one pixel otherwise z-index on selected tile is not changed.\n                    // Until mouse moves.\n                    scrollTo += 1;\n                }\n                contentArea.find(Selector.SECTION_TITLE).focus();\n                // If user tries to scroll during animation, stop animation.\n                var events = \"mousedown wheel DOMMouseScroll mousewheel keyup touchmove\";\n                const page = $(Selector.PAGE);\n                page.on(events, function () {\n                    page.stop();\n                });\n\n                page.animate({scrollTop: scrollTo}, \"slow\", \"swing\", function () {\n                    // Animation complete, remove stop handler.\n                    page.off(events, function () {\n                        page.stop();\n                    });\n                });\n                openTile = sectionNumber;\n\n                // For users with screen readers, move focus to the section title within the tile.\n                contentArea.find(Selector.SECTION_TITLE).focus();\n\n                // If we have any iframes in the section which were previous emptied out, re-populate.\n                // This will happen if we have previously closed a section with videos in, and they were muted.\n                const iframes = contentArea.find(\"iframe\");\n                if (iframes.length > 0) {\n                    iframes.each(function (index, iframe) {\n                        iframe = $(iframe);\n                        // If iframe has no src, add it from data-src.\n                        if (iframe.attr('src') === '' && iframe.data('src') !== undefined) {\n                            iframe.attr('src', iframe.data(\"src\"));\n                        }\n                    });\n\n                    if (enableCompletion) {\n                        // Some iframes may load content set to mark as complete on view.\n                        // So maybe need to update tile completion info. E.g. applies with H5P filter.\n                        setTimeout(() => {\n                            $(document).trigger('format-tiles-completion-changed', {\n                                courseid: courseId,\n                                section: sectionNumber\n                            });\n                        }, 1000);\n                    }\n                }\n            };\n\n            contentArea.addClass(ClassNames.STATE_VISIBLE);\n            overlay.fadeIn(300);\n            tile.addClass(ClassNames.SELECTED);\n            $(Selector.BODY).addClass(ClassNames.HAS_OPEN_TILE);\n            contentArea.slideDown(350, function () {\n                // Wait until we have finished sliding down before we work out where the top is for scroll.\n                expandAndScroll();\n            });\n            openTile = sectionNumber;\n        };\n\n        /**\n         * We find out what section is open, collapse them all, then run the re-org.\n         * Finally we re-open the section.\n         * This is to ensure that the content bearing section is on the row under the tile clicked.\n         * It is run at page load and again if window is re-sized etc.\n         * @param {boolean} delayBefore do we want a delay before we re-org.  This allows e.g. browser resizing to complete.\n         * @param {boolean} fitTilesToScreenWidth whether we need to resize the tiles window while tiles are closed.\n         * @returns {Promise}\n         */\n        var reOrgSections = function (delayBefore, fitTilesToScreenWidth) {\n            var dfd = new $.Deferred();\n            if (reorgSectionsDisabledUntil > Date.now()) {\n                dfd.resolve();\n            }\n            const disableDurationMilliSeconds = 1000;\n            reorgSectionsDisabledUntil = Date.now() + disableDurationMilliSeconds;\n\n            var openedSection = $(\".moveablesection:visible\");\n            var openedSectionNum = 0;\n            if (openedSection.length > 0) {\n                openedSectionNum = openedSection.data(\"section\");\n                cancelTileSelections(0);\n            }\n            var reOrgFunc = function(delayBefore) {\n                tileFitter.runReOrg(delayBefore)\n                    .done(function(result) {\n                        if (openedSectionNum !== 0) {\n                            expandSection(openedSection, openedSectionNum);\n                        }\n                        dfd.resolve(result);\n                    })\n                    .fail(function(result) {\n                        if (openedSectionNum !== 0) {\n                            expandSection(openedSection, openedSectionNum);\n                        }\n                        dfd.reject(result);\n                    });\n            };\n\n            if (fitTilesToScreenWidth) {\n                setTimeout(function() {\n                    tileFitter.resizeTilesDivWidth(courseId).done(function() {\n                        reOrgFunc(false);\n                    }, delayBefore);\n                });\n\n            } else {\n                reOrgFunc(delayBefore);\n            }\n            return dfd.promise();\n        };\n\n        var failedLoadSectionNotify = function(sectionNum, failResult, contentArea) {\n            if (failResult) {\n                // Notify the user and invite them to refresh.  We did get a \"failResult\" from server,\n                // So it looks like we do have a connection and can launch this.\n                Notification.confirm(\n                    stringStore.sectionerrortitle,\n                    stringStore.sectionerrorstring,\n                    stringStore.refresh,\n                    stringStore.cancel,\n                    function () {\n                        window.location.reload();\n                    },\n                    null\n                );\n                contentArea.html(\"\"); // Clear loading icon.\n            } else {\n                // It looks like we may not have a connection so we can't launch notifications.\n                // We can warn the user like this instead.\n                setCourseContentHTML(contentArea, \"<p>\" + stringStore.noconnectionerror + \"</p>\", '');\n                setTimeout(function () {\n                    expandSection(contentArea, sectionNum);\n                }, 500);\n            }\n            require([\"core/log\"], function(log) {\n                log.debug(failResult);\n            });\n            throw new Error(\"Not successful retrieving tile content by AJAX for section \" + sectionNum);\n        };\n\n        /**\n         * For a given section, get the content from the server, add it to the store and maybe UI and maybe show it\n         * @param {number} courseContextId the id for the affected course context\n         * @param {number} sectionId the section ID we are wanting to populate\n         * @return {Promise} promise to resolve when the ajax call returns.\n         */\n        var getSectionContentFromServer = function (courseContextId, sectionId) {\n            if (!courseContextId || !sectionId) {\n                require([\"core/log\"], function(log) {\n                    log.debug(`No course context ID '${courseContextId.toString()}' or section ID '${sectionId.toString()}'`);\n                });\n            }\n            // This gets the fragment from format_tiles_output_fragment_get_cm_list().\n            return Fragment.loadFragment(\n                'format_tiles', 'get_cm_list', courseContextId, {sectionid: sectionId}\n            );\n        };\n\n        /**\n         * If the user had section zero collapsed in this course previously, collapse it now\n         */\n        var setSectionZeroFromUserPref = function () {\n            var buttonHideSecZero = $(Selector.HIDE_SEC0_BTN);\n            var sectionZero = $(Selector.SECTION_ZERO);\n            if (browserStorage.storageEnabledLocal()) {\n                // Collapse section zero if user had it collapsed before - relies on local storage so only if enabled.\n                if (browserStorage.getSecZeroCollapseStatus() === true) {\n                    sectionZero.slideUp(0);\n                    buttonHideSecZero.addClass(ClassNames.CLOSED).removeClass(ClassNames.OPEN); // Button image.\n                    $(Selector.ABOVE_TILES).addClass('sec-zero-closed');\n                } else {\n                    sectionZero.slideDown(300);\n                    buttonHideSecZero.addClass(ClassNames.OPEN).removeClass(ClassNames.CLOSED); // Button image.\n                    $(Selector.ABOVE_TILES).removeClass('sec-zero-closed');\n                }\n            } else {\n                // Storage not available so we dont know if sec zero was previously collapsed - expand it.\n                buttonHideSecZero.addClass(ClassNames.OPEN).removeClass(ClassNames.CLOSED);\n                sectionZero.slideDown(300);\n                $(Selector.ABOVE_TILES).removeClass('sec-zero-closed');\n            }\n        };\n\n        /**\n         * To be called when a tile is clicked. Get content from server or storage and display or store it.\n         * @param {number} courseContextId course context id of this course.\n         * @param {number} sectionId section Id for the clicked section.\n         * @param {number} sectionNumber the section number of the tile.\n         */\n        var populateAndExpandSection = function(courseContextId, sectionId, sectionNumber) {\n            $(Selector.TILE).removeClass(ClassNames.SELECTED);\n            openTile = sectionNumber;\n            // Then close all open secs.\n            // Timed to finish in 200 so that it completes well before the opening next.\n            $(Selector.MOVEABLE_SECTION).each(function (index, sec) {\n                sec = $(sec);\n                if (sec.is(\":visible\")) {\n                    stopVideoPlaying(sec.data(\"section\"), sec.data(\"sectionid\"));\n                    sec.slideUp(200).removeClass(ClassNames.STATE_VISIBLE); // Excludes section 0.\n                }\n            });\n            // Log the fact we viewed the section.\n            ajax.call([{\n                methodname: \"format_tiles_log_tile_click\", args: {\n                    coursecontextid: courseContextId,\n                    sectionnumber: sectionNumber,\n                    sectionid: sectionId\n                }\n            }])[0].fail(Notification.exception);\n            // Get the content - use locally stored content first if available.\n            var relatedContentArea = $(Selector.SECTION_ID + sectionNumber);\n            if (relatedContentArea.find(Selector.ACTIVITY).length > 0) {\n                // There is already some content on the screen so display immediately.\n                expandSection(relatedContentArea, sectionNumber);\n\n                // Still contact the server in case content has changed (e.g. restrictions now satisfied).\n                getSectionContentFromServer(courseContextId, sectionId).done(function (html, js) {\n                    setCourseContentHTML(relatedContentArea, html, js);\n                });\n            } else {\n                relatedContentArea.html(loadingIconHtml);\n                // Get from server.\n                getSectionContentFromServer(courseContextId, sectionId).done(function (html, js) {\n                    setCourseContentHTML(relatedContentArea, html, js);\n                    expandSection(relatedContentArea, sectionNumber);\n                }).fail(function (failResult) {\n                    failedLoadSectionNotify(sectionNumber, failResult, relatedContentArea);\n                    cancelTileSelections(sectionNumber);\n                });\n            }\n            browserStorage.setLastVisitedSection(sectionNumber);\n        };\n\n        const removeUrlParam = function (pattern) {\n            if ((window.location.href).match(pattern)) {\n                history.pushState(null, null, (window.location.href).replace(pattern, ''));\n            }\n        };\n\n        return {\n            init: function (\n                courseIdInit,\n                useJavascriptNav, // Set by site admin see settings.php.\n                isMobileInit,\n                sectionNum,\n                useFilterButtons, // If > 0 then are using filters (value depends on filter type).\n                assumeDataStoreConsent, // Set by site admin see settings.php.\n                reopenLastSectionInit, // Set by site admin see settings.php.\n                userId,\n                fitTilesToWidth,\n                enableCompletionInit,\n                useSubTiles,\n                courseContextIdInit\n            ) {\n                courseId = courseIdInit;\n                courseContextId = courseContextIdInit;\n                isMobile = isMobileInit;\n                // Some args are strings or ints but we prefer bool.  Change to bool now as they are passed on elsewhere.\n                reopenLastVisitedSection = reopenLastSectionInit === \"1\";\n                assumeDataStoreConsent = assumeDataStoreConsent === \"1\";\n                enableCompletion = enableCompletionInit === \"1\";\n                 // We want to initialise the browser storage JS module for storing user settings.\n                browserStorage.init(\n                    courseId,\n                    false,\n                    sectionNum,\n                    assumeDataStoreConsent,\n                    userId\n                );\n                $(document).ready(function () {\n                    if (useSubTiles) {\n                        $(Selector.BODY).addClass('format-tiles-subtiles');\n                    }\n                    var pageContent = $(\"#page-content\");\n                    if (pageContent.length === 0) {\n                        // Some themes e.g. RemUI do not have a #page-content div, so use #region-main.\n                        pageContent = $(\"#region-main\");\n                    }\n\n                    // If we are being told to launch a section number from the URL, use that.\n                    if (sectionNum !== 0) {\n                        openTile = sectionNum;\n                    } else {\n                        // Don't use the URL param - check local storage instead.\n                        if (reopenLastVisitedSection && browserStorage.storageEnabledLocal) {\n                            openTile = browserStorage.getLastVisitedSection();\n                            // If user is not on mobile, retrieve last visited section id from browser storage (if present).\n                            // And click it.\n                        }\n                    }\n                    if (openTile !== 0) {\n                        tileFitter.init(courseId, openTile, fitTilesToWidth, false);\n                    } else {\n                        // Set focus to the first tile (not section zero).\n                        $(Selector.TILEID + \"1\").focus();\n                        tileFitter.init(courseId, null, fitTilesToWidth, false);\n                    }\n                    var windowWidth = $(window).outerWidth();\n\n                    if (useJavascriptNav) {\n                        // User is not editing but is usingJS nav to view.\n\n                         // On a tile click, decide what to do an do it.\n                         // (Collapse if already expanded, or expand it and fill with content).\n                        pageContent.on(Event.CLICK, Selector.TILE_CLICKABLE, function (e) {\n                            // Prevent the link being followed to reload the PHP page as we are using JS instead.\n                            if (!useJavascriptNav) {\n                                return;\n                            }\n                            const target = $(e.target);\n                            if (target.hasClass(ClassNames.ON_TILE_CONTROL)) {\n                                // The user has clicked a control on the tile so we don't expand it.\n                                return;\n                            }\n                            e.preventDefault();\n                            // If other tiles have loading icons, fade them out (on the tile not the content sec).\n                            $(Selector.TILE_LOADING_ICON).fadeOut(300, function () {\n                                $(Selector.TILE_LOADING_ICON).html();\n                            });\n                            var thisTile = $(e.currentTarget).closest(Selector.TILE);\n                            var dataSection = parseInt(thisTile.data(\"section\"));\n                            if (thisTile.hasClass(ClassNames.SELECTED)) {\n                                // This tile is already expanded so collapse it.\n                                cancelTileSelections(dataSection);\n                                browserStorage.setLastVisitedSection(0);\n                                overlay.fadeOut(300);\n                            } else {\n                                populateAndExpandSection(courseContextId, thisTile.data('true-sectionid'), dataSection);\n                            }\n                        });\n\n                        overlay.on(Event.CLICK, function(e) {\n                            cancelTileSelections(0);\n                            browserStorage.setLastVisitedSection(0);\n                            clickItemBehind(e);\n                        });\n\n                        // When window is re-sized, content sections under the tiles may be in wrong place.\n                        // So remove them and re-initialise them.\n                        // Collapse the selected section before doing this.\n                        // Otherwise the re-organisation won't work as the tiles' flow will be out when they are analysed.\n                        $(window).on(\"resize\", function () {\n\n                            // On iOS resize events are triggered often on scroll because the address bar hides itself.\n                            // Avoid this using windowWidth here.\n                            if (resizeLocked || windowWidth === $(window).outerWidth()) {\n                                return;\n                            }\n                            resizeLocked = true;\n\n                            // We wait for a short time before doing anything, as user may still be dragging window size change.\n                            // We don't want to react to say 20 resize events happening over a single drag.\n                            setTimeout(function() {\n\n                                if (reorgSectionsDisabledUntil > Date.now()) {\n                                    // We wait until inside our timeout for this as we may be responding to a fullscreen event.\n                                    return;\n                                }\n\n                                // First assume that we are going to resize, but we have checks to make below.\n                                var resizeRequired = true;\n\n                                // If we have an iframe in the section in fullscreen, ignore this resize event.\n                                // It was probably caused when user pressed the full screen button.\n                                // This could be a Moodle media player div, or a YouTube embed or other.\n                                var openContentSection = $(\".moveablesection:visible\");\n                                if (openContentSection.length !== 0) {\n                                    var iframes = openContentSection.find(\"iframe\");\n                                    if (iframes.length !== 0) {\n                                        iframes.each(function (index, player) {\n                                            player = $(player);\n                                            if (player.outerWidth() > openContentSection.outerWidth()) {\n                                                // Video is present and playing full screen so don't react to resize event.\n                                                resizeRequired = false;\n                                            }\n                                        });\n                                    }\n                                }\n                                if (resizeRequired) {\n                                    // Set global for comparison next time.\n                                    windowWidth = $(window).outerWidth();\n                                    reOrgSections(true, fitTilesToWidth);\n                                }\n                                resizeLocked = false;\n                            }, 600);\n                        });\n\n                        // When user clicks to close a section using cross at top right in section.\n                        pageContent.on(Event.CLICK, Selector.CLOSE_SEC_BTN, function (e) {\n                            cancelTileSelections($(e.currentTarget).data(\"section\"));\n                        });\n\n                        setSectionZeroFromUserPref();\n                        // Most filter button related JS is in filter_buttons.js module which is required below.\n\n                        // Remove section and cmid URL params is present as we are using JS nav.\n                        removeUrlParam(/(&|\\\\?)cmid=\\d+/gi);\n                        removeUrlParam(/(&|\\\\?)section=\\d+/gi);\n                    }\n\n                    // If this event is triggered, user has updated a completion check box.\n                    // We need to retrieve section content from server in case availability of items has changed.\n                    // Will also be triggered on focus change e.g. user has returned to this tab from a new window.\n                    $(document).on('format-tiles-completion-changed', function(e, data) {\n                        if (data.courseid && parseInt(courseId) !== parseInt(data.courseid)) {\n                            return;\n                        }\n                        const allSectionNums = $(Selector.TILE).not(Selector.SPACER).map((i, tile) => {\n                            return parseInt($(tile).data('section'));\n                        }).toArray();\n                        // Need to include sec zero as may have completion tracked items.\n                        allSectionNums.push(0);\n\n                        // Get the section ID from section number.\n                        const contentArea = $(Selector.SECTION_ID + data.section);\n                        const sectionId = contentArea.data('sectionid');\n                        // This gets the fragment from format_tiles_output_fragment_get_cm_list().\n                        Fragment.loadFragment(\n                            'format_tiles', 'get_cm_list', courseContextId, {sectionid: sectionId}\n                        )\n                        .done((html, js) => {\n                            setCourseContentHTML(contentArea, html, js);\n                        })\n                        .catch(err => {\n                            require([\"core/log\"], function(log) {\n                                log.debug(err);\n                            });\n                        });\n\n                        ajax.call([\n                            {\n                                methodname: \"format_tiles_get_section_information\",\n                                args: {\n                                    courseid: courseId,\n                                    sectionnums: allSectionNums\n                                }\n                            }\n                        ])[0]\n                        .done((response) => {\n                            require([\"format_tiles/completion\"], function (completion) {\n                                completion.updateSectionsInfo(\n                                    response.sections, response.overall.complete, response.overall.outof\n                                );\n                            });\n\n                        })\n                        .catch(err => {\n                            require([\"core/log\"], function(log) {\n                                log.debug(err);\n                            });\n                        });\n                    });\n\n                    if (enableCompletion) {\n                        // We use pageContent for listener here, as completion button is replaced by core JS when it's clicked.\n                        // We wait half a second to enable the completion change to be registered first.\n                        pageContent.on(Event.CLICK, Selector.MANUAL_COMPLETION, function(e) {\n                            const currentTarget = $(e.currentTarget);\n                            const sectionNum = currentTarget.closest(Selector.SECTION_MAIN).data(\"section\");\n                            const cmid = currentTarget.data(\"cmid\");\n                            require([\"format_tiles/completion\"], function (completion) {\n                                setTimeout(() => {\n                                    completion.triggerCompletionChangedEvent(\n                                        sectionNum ? parseInt(sectionNum) : 0,\n                                        cmid ? parseInt(cmid) : 0\n                                    );\n                                }, 500);\n                            });\n                        });\n                    }\n\n                    const sectionZero = $(Selector.SECTION_ZERO);\n\n                    // When the user presses the button to collapse or expand Section zero (section at the top of the course).\n                    pageContent.on(Event.CLICK, Selector.HIDE_SEC0_BTN, function (e) {\n                        if (sectionZero.css(CSS.DISPLAY) === \"none\") {\n                            // Sec zero is collapsed so expand it on user click.\n                            sectionZero.slideDown(250);\n                            $(Selector.ABOVE_TILES).removeClass('sec-zero-closed');\n                            $(e.currentTarget).addClass(ClassNames.OPEN).removeClass(ClassNames.CLOSED);\n                            browserStorage.setSecZeroCollapseStatus(\"collapsed\");\n                        } else {\n                            // Sec zero is expanded so collapse it on user click.\n                            sectionZero.slideUp(250);\n                            $(Selector.ABOVE_TILES).addClass('sec-zero-closed');\n                            $(e.currentTarget).addClass(ClassNames.CLOSED).removeClass(ClassNames.OPEN);\n                            browserStorage.setSecZeroCollapseStatus(\"expanded\");\n                        }\n                    });\n\n                    if (useFilterButtons) {\n                        require([\"format_tiles/filter_buttons\"], function (filterButtons) {\n                            filterButtons.init(courseId, browserStorage.storageEnabledLocal);\n                        });\n                        if (useJavascriptNav) {\n                            pageContent.on(Event.CLICK, Selector.FILTER_BUTTON, function () {\n                                cancelTileSelections(0);\n                                reOrgSections(true, false);\n                            });\n                        }\n\n                    }\n                    // If theme is displaying the .tiles_coursenav class items, show items with this class.\n                    // They will be hidden otherwise.\n                    // They are hidden when initially rendered from PHP as we only want them shown if browser supports JS.\n                    // See lib.php extend_course_navigation.\n                    $(\".tiles_coursenav\").removeClass(\"hidden\");\n\n                    // Render the loading icon and store its HTML globally so that we can use it where needed later.\n                    Templates.render(\"format_tiles/loading\", {}).done(function (html) {\n                        loadingIconHtml = html;\n                    });\n\n                     // Get these strings now, in case we need them.\n                    // E.g. after we lose connection and cannot display content on a user tile click.\n                    var stringKeys = [\n                        {key: \"sectionerrortitle\", component: \"format_tiles\"},\n                        {key: \"sectionerrorstring\", component: \"format_tiles\"},\n                        {key: \"refresh\"},\n                        {key: \"cancel\", component: \"moodle\"},\n                        {key: \"noconnectionerror\", component: \"format_tiles\"},\n                        {key: \"show\"},\n                        {key: \"hide\"},\n                        {key: \"other\", component: \"format_tiles\"}\n                    ];\n                    str.get_strings(stringKeys).done(function (s) {\n                        s.forEach(function(str, index) {\n                            if (str) {\n                                stringStore[stringKeys[index].key] = str;\n                            } else {\n                                stringStore[stringKeys[index].key] = 'Error.';\n                                require([\"core/log\"], function(log) {\n                                    log.debug(`Format tiles get_strings error ${index}`);\n                                    log.debug(s);\n                                });\n                            }\n                        });\n                    })\n                    .fail(function(err) {\n                        require([\"core/log\"], function(log) {\n                            log.debug(err);\n                        });\n                    });\n\n                    // If a mobile user clicks an embedded video activity, we don't show them a modal.\n                    // It won't work well. Instead we direct them to the original site e.g. YouTube.\n                    if (isMobile) {\n                        pageContent.on(Event.CLICK, Selector.ACTIVITY + \".video a\", function(e) {\n                            var target = $(e.currentTarget);\n                            var url = target.closest(Selector.ACTIVITY).data(\"url-secondary\");\n                            if (url !== undefined) {\n                                e.preventDefault();\n                                e.stopPropagation();\n                                var cm = target.closest(Selector.ACTIVITY);\n                                ajax.call([{\n                                    methodname: \"format_tiles_log_mod_view\", args: {\n                                        courseid: courseId,\n                                        cmid: cm.data(\"cmid\")\n                                    }\n                                }])[0].done(function () {\n                                    window.location.href = url;\n                                });\n                            }\n                        });\n                    } else {\n                        // If user is NOT on mobile device.\n\n                        // If return is pressed while an item is in focus, click the item.\n                        // This is to make the tiles keyboard navigable for users using screen readers.\n                        // User tabbing between tiles is handled by tabindex in the HTML.\n                        // Once the tile is clicked, the expand tile function will move focus to the first content item.\n                        // On escape key, we clear all selections and collapse tiles (handled above not here).\n                        $(Selector.TILE).on(Event.KEYDOWN, function (e) {\n                            if (e.keyCode === Keyboard.RETURN) { // Return key pressed.\n                                $(e.currentTarget).click();\n                            }\n                        });\n\n                        // Move focus to the first tile in the course (not sec zero contents if present).\n                        // $(\"ul.tiles .tile\").first().focus();\n                    }\n\n                    // When a section is open, fix close/edit buttons to top of screen (else hidden on scroll).\n                    let fixButtonsDisabled = false;\n                    $(window).scroll(function() {\n                        if (!fixButtonsDisabled) {\n                            try {\n                                if ($(window).scrollTop() >= 300) {\n                                    $('.moveablesection.state-visible').each((i, s) => {\n                                        s = $(s);\n                                        const section = document.getElementById('section-' + s.data('section'));\n                                        const sectionRect = section.getBoundingClientRect();\n                                        const right = document.body.clientWidth - sectionRect.right + 30;\n                                        const sectionButtons = s.find('.sectionbuttons');\n                                        const topMargin = $(\"#page\").offset().top;\n                                        if (sectionRect.top + topMargin < 0 && sectionRect.bottom - topMargin > 0) {\n                                            sectionButtons.addClass('position-fixed');\n                                            sectionButtons.css({'top': topMargin + 10, 'right': right});\n                                        } else {\n                                            sectionButtons.removeClass('position-fixed');\n                                            sectionButtons.css({'top': 'unset', 'right': 'unset'});\n                                        }\n                                    });\n                                }\n                            } catch (err) {\n                                require([\"core/log\"], function(log) {\n                                    log.debug(err);\n                                });\n                                fixButtonsDisabled = true;\n                            }\n                        }\n                    });\n                });\n            },\n            populateAndExpandSection(courseContextId, sectionId, sectionNumber) {\n                populateAndExpandSection(courseContextId, sectionId, sectionNumber);\n            }\n        };\n    }\n);"],"names":["define","$","Templates","ajax","browserStorage","Notification","str","tileFitter","Fragment","isMobile","loadingIconHtml","courseId","courseContextId","enableCompletion","stringStore","reopenLastVisitedSection","resizeLocked","reorgSectionsDisabledUntil","openTile","Selector","ClassNames","Event","CSS","Keyboard","stopVideoPlaying","section","sectionId","contentSection","find","each","index","iframe","attr","data","length","html","getSectionContentFromServer","done","js","setCourseContentHTML","cancelTileSelections","sectionToFocus","sec","is","slideUp","removeClass","css","undefined","focus","fadeOut","overlay","contentArea","activities","not","on","e","keyCode","setLastVisitedSection","toClick","currentTarget","hasClass","click","window","location","href","last","shiftKey","relatedTarget","closest","setTimeout","tooltipItems","tooltip","err","require","log","debug","i","el","height","addClass","filter","script","runTemplateJS","applyMathJax","videoJS","setUp","forEach","ev","document","addEventListener","Date","now","trigger","parseInt","sectionid","MathJax","mathJaxElems","node","Hub","Queue","expandSection","sectionNumber","tile","fadeIn","slideDown","scrollTo","offset","top","scrollTop","events","page","stop","animate","off","iframes","courseid","expandAndScroll","reOrgSections","delayBefore","fitTilesToScreenWidth","dfd","Deferred","resolve","openedSection","openedSectionNum","reOrgFunc","runReOrg","result","fail","reject","resizeTilesDivWidth","promise","toString","loadFragment","populateAndExpandSection","call","methodname","args","coursecontextid","sectionnumber","exception","relatedContentArea","failResult","sectionNum","confirm","sectionerrortitle","sectionerrorstring","refresh","cancel","reload","noconnectionerror","Error","failedLoadSectionNotify","removeUrlParam","pattern","match","history","pushState","replace","init","courseIdInit","useJavascriptNav","isMobileInit","useFilterButtons","assumeDataStoreConsent","reopenLastSectionInit","userId","fitTilesToWidth","enableCompletionInit","useSubTiles","courseContextIdInit","ready","pageContent","storageEnabledLocal","getLastVisitedSection","windowWidth","outerWidth","target","preventDefault","thisTile","dataSection","clickedItem","hide","BottomElement","elementFromPoint","clientX","clientY","show","clickedTile","clickItemBehind","resizeRequired","openContentSection","player","buttonHideSecZero","sectionZero","getSecZeroCollapseStatus","setSectionZeroFromUserPref","allSectionNums","map","toArray","push","catch","sectionnums","response","completion","updateSectionsInfo","sections","overall","complete","outof","cmid","triggerCompletionChangedEvent","setSecZeroCollapseStatus","filterButtons","render","stringKeys","key","component","get_strings","s","url","stopPropagation","cm","fixButtonsDisabled","scroll","sectionRect","getElementById","getBoundingClientRect","right","body","clientWidth","sectionButtons","topMargin","bottom"],"mappings":";;;;;;;;;;AA4BAA,6BAAO,CAAC,SAAU,iBAAkB,YAAa,+BACzC,oBAAqB,WAAY,2BAA4B,kBACjE,SAAUC,EAAGC,UAAWC,KAAMC,eAAgBC,aAAcC,IAAKC,WAAYC,cAGrEC,SACAC,gBAIAC,SACAC,gBAEAC,iBANAC,YAAc,GAEdC,0BAA2B,EAG3BC,cAAe,EAEfC,2BAA6B,EAG7BC,SAAW,EAEXC,cACM,OADNA,cAEM,QAFNA,cAGM,QAHNA,gBAIQ,SAJRA,0BAKkB,mBALlBA,uBAMe,gBANfA,2BAOmB,qBAPnBA,wBAUgB,kBAVhBA,kBAYU,YAZVA,uBAae,gBAbfA,qBAca,cAdbA,uBAee,gBAffA,gBAgBQ,UAhBRA,oBAkBY,YAlBZA,uBAmBe,gBAnBfA,sBAoBc,gBApBdA,yBAqBiB,kBArBjBA,uBAsBe,mBAtBfA,uBAuBe,kBAvBfA,sBAwBc,aAxBdA,sBAyBc,mCAzBdA,2BA2BmB,2CA3BnBA,0BA6BkB,iCAElBC,oBACU,WADVA,gBAEM,OAFNA,kBAGQ,SAHRA,2BAIiB,wBAJjBA,yBAKe,gBALfA,yBAMe,yBANfA,2BAOiB,kBAGjBC,YACO,QADPA,cAES,UAITC,YACS,UADTA,YAES,UAFTA,cAIW,mBAEXC,gBACQ,GADRA,aAEK,EAFLA,gBAGQ,OAWRC,iBAAmB,SAASC,QAASC,eACjCC,eAAiB1B,EAAEkB,oBAAsBM,SAG7CE,eAAeC,KAAK,UAAUC,MAAK,SAAUC,MAAOC,SAChDA,OAAS9B,EAAE8B,SAEAC,KAAK,SACZD,OAAOE,KAAK,MAAOF,OAAOC,KAAK,QAC/BD,OAAOC,KAAK,MAAO,QAKRL,eAAeC,KAAKT,uBACtBe,OAAS,IACtBP,eAAeQ,KAAK,IACpBC,4BAA4BxB,gBAAiBc,WAAWW,MAAK,SAAUF,KAAMG,IACzEC,qBAAqBZ,eAAgBQ,KAAMG,SASnDE,qBAAuB,SAAUC,gBACjCxC,EAAEkB,2BAA2BU,MAAK,SAAUC,MAAOY,MAC/CA,IAAMzC,EAAEyC,MACAC,GAAG,cACPnB,iBAAiBkB,IAAIT,KAAK,WAAYS,IAAIT,KAAK,cAC/CS,IAAIE,UAAUC,YAAYzB,8BAGlCnB,EAAEkB,eAAe0B,YAAYzB,qBAAqB0B,IAAIxB,YAAa,IAAIwB,IAAIxB,cAAe,IAC1FrB,EAAE,YAAcmB,qBAAqByB,YAAYzB,qBAAqB0B,IAAIxB,YAAa,SAEhEyB,IAAnBN,gBAAmD,IAAnBA,gBAChCxC,EAAEkB,gBAAkBsB,gBAAgBO,QAExC/C,EAAEkB,4BAA4B8B,QAAQ,KAAK,WACvChD,EAAEkB,4BAA4BgB,KAAK,OAEvCjB,SAAW,EACXjB,EAAEkB,eAAe0B,YAAYzB,0BAC7B8B,QAAQD,QAAQ,YAGdC,QAAUjD,EAAE,6BAkCdsC,qBAAuB,SAAUY,YAAahB,KAAMG,OAChDH,KAAM,IACNgB,YAAYhB,KAAKA,MACjBlC,EAAEkB,4BAA4B8B,QAAQ,KAAK,WACvChD,EAAEkB,4BAA4BgB,KAAK,OAGnCgB,YAAYnB,KAAK,QAAUb,sBAAuB,KAM9CiC,WAAaD,YAAYvB,KAAKT,mBAAmBkC,IAAIlC,iBACzDgC,YAAYG,GAAGjC,eAAe,SAAUkC,GAChCA,EAAEC,UAAYjC,kBAEdnB,eAAeqD,sBAAsB,GACrCjB,qBAAqB,GACrBvC,EAAEkB,gBAAkBgC,YAAYlB,KAAK,YAAYe,YAGzDI,WAAWE,GAAGjC,eAAe,SAAUkC,MAC/BA,EAAEC,UAAYjC,gBAAiB,KAC3BmC,QAAUzD,EAAEsD,EAAEI,eAAe/B,KAAK,KAClC8B,QAAQE,SAASxC,4BACjBsC,QAAQG,aACwBd,IAAzBW,QAAQ1B,KAAK,UACpB8B,OAAOC,SAASC,KAAON,QAAQ1B,KAAK,aAI3CvB,WACD2C,WAAWa,OAAOX,GAAGjC,eAAe,SAAUkC,GACtCA,EAAEC,UAAYjC,cAAiBgC,EAAEW,UAC1BjE,EAAEsD,EAAEY,eAAeC,QAAQjD,uBAAuBa,KAAK,QAAUmB,YAAYnB,KAAK,OAIzFqC,YAAW,WAEPlB,YAAYvB,KAAKT,wBAAwB6B,QACzCG,YAAYvB,KAAKT,0BAA0B2B,IAAI,MAAO,MACvD,QAGXK,YAAYvB,KAAKT,wBAAwBmC,GAAGjC,eAAe,SAAUkC,GAC7DA,EAAEC,UAAYjC,cAAgBgC,EAAEW,UACzBjE,EAAEsD,EAAEY,eAAeC,QAAQjD,uBAAuBa,KAAK,QAAUmB,YAAYnB,KAAK,OAIzFqC,YAAW,WACPjB,WAAWa,OAAOjB,UACnB,SAMdvC,UAED4D,YAAW,qBAGGC,aAAenB,YAAYvB,KAAK,eAClC0C,aAAapC,OAAS,GAAoC,mBAAxBoC,aAAaC,SAC/CD,aAAaC,UAEnB,MAAOC,KACLC,QAAQ,CAAC,aAAa,SAASC,KAC3BA,IAAIC,MAAMH,WAGnB,KAGPH,YAAW,KAKPlB,YAAYvB,KACRT,wBAAwBU,MAAK,CAAC+C,EAAGC,OACjCA,GAAK5E,EAAE4E,KACAC,SAJQ,KAKXD,GAAGT,QAAQjD,wBAAwB4D,SAAS,kBAGrD,KAEPV,YAAW,QACH/B,GAAI,CAQ2B,IANlBrC,EAAE,QACc2B,KAAK,UAAUoD,QACxC,CAAClD,MAAOmD,SACGhF,EAAEgF,QAAQ9C,SAAWG,KAGhBJ,QAChBhC,UAAUgF,cAAc5C,IAIhC6C,aAAahC,gBAEQA,YAAYvB,KAAKT,uBACrBe,OAAS,EAAG,CAEzBuC,QAAQ,CAAC,yBAAyB,SAAUW,SACxCA,QAAQC,WAIK,CAAC,mBAAoB,wBAAyB,sBAAuB,sBAC7EC,SAAQ,SAAUC,IACvBC,SAASC,iBAAiBF,IAAI,WAE1BtE,2BAA6ByE,KAAKC,MADE,aAKjD,KAEH1F,EAAEuF,UAAUI,QAAQ,uCAAwC,CACxDjF,SAAUkF,SAASlF,UACnBc,QAAS0B,YAAYlB,KAAK,WAC1B6D,UAAW3C,YAAYlB,KAAK,sBAQ9BkD,aAAe,SAAShC,qBACI,IAAnBW,OAAOiC,kBAEJC,aAAe7C,YAAYvB,KAAKT,2BAClC6E,aAAa9D,QACb8D,aAAanE,MAAK,CAAC+C,EAAGqB,QAClBnC,OAAOiC,QAAQG,IAAIC,MAAM,CAAC,UAAWrC,OAAOiC,QAAQG,IAAKD,UAGnE,MAAOzB,KACLC,QAAQ,CAAC,aAAa,SAAUC,KAC5BA,IAAIC,MAAMH,cAWtB4B,cAAgB,SAAUjD,YAAakD,qBACjCC,KAAOrG,EAAE,SAAWoG,eAsD1BlD,YAAY4B,SAAS3D,0BACrB8B,QAAQqD,OAAO,KACfD,KAAKvB,SAAS3D,qBACdnB,EAAEkB,eAAe4D,SAAS3D,0BAC1B+B,YAAYqD,UAAU,KAAK,YAzDL,eAGdC,SAAYH,KAAKI,SAASC,IAAO1G,EAAE,2BAA2ByG,SAASC,IApU3D,GAqUZF,WAAaxG,EAAE6D,QAAQ8C,YAGvBH,UAAY,GAEhBtD,YAAYvB,KAAKT,wBAAwB6B,YAErC6D,OAAS,kEACPC,KAAO7G,EAAEkB,eACf2F,KAAKxD,GAAGuD,QAAQ,WACZC,KAAKC,UAGTD,KAAKE,QAAQ,CAACJ,UAAWH,UAAW,OAAQ,SAAS,WAEjDK,KAAKG,IAAIJ,QAAQ,WACbC,KAAKC,aAGb7F,SAAWmF,cAGXlD,YAAYvB,KAAKT,wBAAwB6B,cAInCkE,QAAU/D,YAAYvB,KAAK,UAC7BsF,QAAQhF,OAAS,IACjBgF,QAAQrF,MAAK,SAAUC,MAAOC,QAGC,MAF3BA,OAAS9B,EAAE8B,SAEAC,KAAK,aAAwCe,IAAvBhB,OAAOE,KAAK,QACzCF,OAAOC,KAAK,MAAOD,OAAOE,KAAK,WAInCpB,kBAGAwD,YAAW,KACPpE,EAAEuF,UAAUI,QAAQ,kCAAmC,CACnDuB,SAAUxG,SACVc,QAAS4E,kBAEd,MAWXe,MAEJlG,SAAWmF,eAYXgB,cAAgB,SAAUC,YAAaC,2BACnCC,IAAM,IAAIvH,EAAEwH,SACZxG,2BAA6ByE,KAAKC,OAClC6B,IAAIE,UAGRzG,2BAA6ByE,KAAKC,MADE,QAGhCgC,cAAgB1H,EAAE,4BAClB2H,iBAAmB,EACnBD,cAAczF,OAAS,IACvB0F,iBAAmBD,cAAc1F,KAAK,WACtCO,qBAAqB,QAErBqF,UAAY,SAASP,aACrB/G,WAAWuH,SAASR,aACfjF,MAAK,SAAS0F,QACc,IAArBH,kBACAxB,cAAcuB,cAAeC,kBAEjCJ,IAAIE,QAAQK,WAEfC,MAAK,SAASD,QACc,IAArBH,kBACAxB,cAAcuB,cAAeC,kBAEjCJ,IAAIS,OAAOF,mBAInBR,sBACAlD,YAAW,WACP9D,WAAW2H,oBAAoBvH,UAAU0B,MAAK,WAC1CwF,WAAU,KACXP,gBAIPO,UAAUP,aAEPE,IAAIW,WAsCX/F,4BAA8B,SAAUxB,gBAAiBc,kBACpDd,iBAAoBc,WACrB+C,QAAQ,CAAC,aAAa,SAASC,KAC3BA,IAAIC,sCAA+B/D,gBAAgBwH,uCAA8B1G,UAAU0G,oBAI5F5H,SAAS6H,aACZ,eAAgB,cAAezH,gBAAiB,CAACkF,UAAWpE,aAmChE4G,yBAA2B,SAAS1H,gBAAiBc,UAAW2E,eAChEpG,EAAEkB,eAAe0B,YAAYzB,qBAC7BF,SAAWmF,cAGXpG,EAAEkB,2BAA2BU,MAAK,SAAUC,MAAOY,MAC/CA,IAAMzC,EAAEyC,MACAC,GAAG,cACPnB,iBAAiBkB,IAAIT,KAAK,WAAYS,IAAIT,KAAK,cAC/CS,IAAIE,QAAQ,KAAKC,YAAYzB,8BAIrCjB,KAAKoI,KAAK,CAAC,CACPC,WAAY,8BAA+BC,KAAM,CAC7CC,gBAAiB9H,gBACjB+H,cAAetC,cACfP,UAAWpE,cAEf,GAAGsG,KAAK3H,aAAauI,eAErBC,mBAAqB5I,EAAEkB,oBAAsBkF,eAC7CwC,mBAAmBjH,KAAKT,mBAAmBe,OAAS,GAEpDkE,cAAcyC,mBAAoBxC,eAGlCjE,4BAA4BxB,gBAAiBc,WAAWW,MAAK,SAAUF,KAAMG,IACzEC,qBAAqBsG,mBAAoB1G,KAAMG,SAGnDuG,mBAAmB1G,KAAKzB,iBAExB0B,4BAA4BxB,gBAAiBc,WAAWW,MAAK,SAAUF,KAAMG,IACzEC,qBAAqBsG,mBAAoB1G,KAAMG,IAC/C8D,cAAcyC,mBAAoBxC,kBACnC2B,MAAK,SAAUc,aAlHI,SAASC,WAAYD,WAAY3F,mBACvD2F,YAGAzI,aAAa2I,QACTlI,YAAYmI,kBACZnI,YAAYoI,mBACZpI,YAAYqI,QACZrI,YAAYsI,QACZ,WACItF,OAAOC,SAASsF,WAEpB,MAEJlG,YAAYhB,KAAK,MAIjBI,qBAAqBY,YAAa,MAAQrC,YAAYwI,kBAAoB,OAAQ,IAClFjF,YAAW,WACP+B,cAAcjD,YAAa4F,cAC5B,MAEPtE,QAAQ,CAAC,aAAa,SAASC,KAC3BA,IAAIC,MAAMmE,eAER,IAAIS,MAAM,8DAAgER,YAyFxES,CAAwBnD,cAAeyC,WAAYD,oBACnDrG,qBAAqB6D,mBAG7BjG,eAAeqD,sBAAsB4C,sBAGnCoD,eAAiB,SAAUC,SACxB5F,OAAOC,SAASC,KAAM2F,MAAMD,UAC7BE,QAAQC,UAAU,KAAM,KAAO/F,OAAOC,SAASC,KAAM8F,QAAQJ,QAAS,YAIvE,CACHK,KAAM,SACFC,aACAC,iBACAC,aACAnB,WACAoB,iBACAC,uBACAC,sBACAC,OACAC,gBACAC,qBACAC,YACAC,qBAEA/J,SAAWqJ,aACXpJ,gBAAkB8J,oBAClBjK,SAAWyJ,aAEXnJ,yBAAqD,MAA1BsJ,sBAC3BD,uBAAoD,MAA3BA,uBACzBvJ,iBAA4C,MAAzB2J,qBAEnBpK,eAAe2J,KACXpJ,UACA,EACAoI,WACAqB,uBACAE,QAEJrK,EAAEuF,UAAUmF,OAAM,WACVF,aACAxK,EAAEkB,eAAe4D,SAAS,6BAE1B6F,YAAc3K,EAAE,iBACO,IAAvB2K,YAAY1I,SAEZ0I,YAAc3K,EAAE,iBAID,IAAf8I,WACA7H,SAAW6H,WAGPhI,0BAA4BX,eAAeyK,sBAC3C3J,SAAWd,eAAe0K,yBAKjB,IAAb5J,SACAX,WAAWwJ,KAAKpJ,SAAUO,SAAUqJ,iBAAiB,IAGrDtK,EAAEkB,gBAAkB,KAAK6B,QACzBzC,WAAWwJ,KAAKpJ,SAAU,KAAM4J,iBAAiB,QAEjDQ,YAAc9K,EAAE6D,QAAQkH,aAExBf,mBAKAW,YAAYtH,GAAGjC,YAAaF,yBAAyB,SAAUoC,OAEtD0G,4BAGUhK,EAAEsD,EAAE0H,QACRrH,SAASxC,6BAIpBmC,EAAE2H,iBAEFjL,EAAEkB,4BAA4B8B,QAAQ,KAAK,WACvChD,EAAEkB,4BAA4BgB,cAE9BgJ,SAAWlL,EAAEsD,EAAEI,eAAeS,QAAQjD,eACtCiK,YAAcvF,SAASsF,SAASlJ,KAAK,YACrCkJ,SAASvH,SAASxC,sBAElBoB,qBAAqB4I,aACrBhL,eAAeqD,sBAAsB,GACrCP,QAAQD,QAAQ,MAEhBqF,yBAAyB1H,gBAAiBuK,SAASlJ,KAAK,kBAAmBmJ,iBAInFlI,QAAQI,GAAGjC,aAAa,SAASkC,GAC7Bf,qBAAqB,GACrBpC,eAAeqD,sBAAsB,GA5gBnC,SAAUF,OACxB8H,YAAcpL,EAAEsD,EAAEI,kBAlEP,yBAmEX0H,YAAYrJ,KAAK,MAAsB,CAEvCqJ,YAAYC,WACRC,cAAgBtL,EAAEuF,SAASgG,iBAAiBjI,EAAEkI,QAASlI,EAAEmI,aAC7DL,YAAYM,OACRJ,cAAc3H,SAAS,iBAAmB2H,cAAc3H,SAAS,mBAEjE2H,cAAc1H,YACX,KAEC+H,YAAcL,cAAcnH,QAAQjD,eACpCyK,aACAA,YAAY/H,UA+fRgI,CAAgBtI,MAOpBtD,EAAE6D,QAAQR,GAAG,UAAU,WAIftC,cAAgB+J,cAAgB9K,EAAE6D,QAAQkH,eAG9ChK,cAAe,EAIfqD,YAAW,gBAEHpD,2BAA6ByE,KAAKC,YAMlCmG,gBAAiB,EAKjBC,mBAAqB9L,EAAE,+BACO,IAA9B8L,mBAAmB7J,OAAc,KAC7BgF,QAAU6E,mBAAmBnK,KAAK,UACf,IAAnBsF,QAAQhF,QACRgF,QAAQrF,MAAK,SAAUC,MAAOkK,SAC1BA,OAAS/L,EAAE+L,SACAhB,aAAee,mBAAmBf,eAEzCc,gBAAiB,MAK7BA,iBAEAf,YAAc9K,EAAE6D,QAAQkH,aACxB3D,eAAc,EAAMkD,kBAExBvJ,cAAe,KAChB,SAIP4J,YAAYtH,GAAGjC,YAAaF,wBAAwB,SAAUoC,GAC1Df,qBAAqBvC,EAAEsD,EAAEI,eAAe1B,KAAK,eApOhC,eACzBgK,kBAAoBhM,EAAEkB,wBACtB+K,YAAcjM,EAAEkB,uBAChBf,eAAeyK,uBAEmC,IAA9CzK,eAAe+L,4BACfD,YAAYtJ,QAAQ,GACpBqJ,kBAAkBlH,SAAS3D,mBAAmByB,YAAYzB,iBAC1DnB,EAAEkB,sBAAsB4D,SAAS,qBAEjCmH,YAAY1F,UAAU,KACtByF,kBAAkBlH,SAAS3D,iBAAiByB,YAAYzB,mBACxDnB,EAAEkB,sBAAsB0B,YAAY,qBAIxCoJ,kBAAkBlH,SAAS3D,iBAAiByB,YAAYzB,mBACxD8K,YAAY1F,UAAU,KACtBvG,EAAEkB,sBAAsB0B,YAAY,oBAqN5BuJ,GAIA3C,eAAe,qBACfA,eAAe,yBAMnBxJ,EAAEuF,UAAUlC,GAAG,mCAAmC,SAASC,EAAGtB,SACtDA,KAAKkF,UAAYtB,SAASlF,YAAckF,SAAS5D,KAAKkF,uBAGpDkF,eAAiBpM,EAAEkB,eAAekC,IAAIlC,iBAAiBmL,KAAI,CAAC1H,EAAG0B,OAC1DT,SAAS5F,EAAEqG,MAAMrE,KAAK,cAC9BsK,UAEHF,eAAeG,KAAK,SAGdrJ,YAAclD,EAAEkB,oBAAsBc,KAAKR,SAC3CC,UAAYyB,YAAYlB,KAAK,aAEnCzB,SAAS6H,aACL,eAAgB,cAAezH,gBAAiB,CAACkF,UAAWpE,YAE/DW,MAAK,CAACF,KAAMG,MACTC,qBAAqBY,YAAahB,KAAMG,OAE3CmK,OAAMjI,MACHC,QAAQ,CAAC,aAAa,SAASC,KAC3BA,IAAIC,MAAMH,WAIlBrE,KAAKoI,KAAK,CACN,CACIC,WAAY,uCACZC,KAAM,CACFtB,SAAUxG,SACV+L,YAAaL,mBAGtB,GACFhK,MAAMsK,WACHlI,QAAQ,CAAC,4BAA4B,SAAUmI,YAC3CA,WAAWC,mBACPF,SAASG,SAAUH,SAASI,QAAQC,SAAUL,SAASI,QAAQE,aAK1ER,OAAMjI,MACHC,QAAQ,CAAC,aAAa,SAASC,KAC3BA,IAAIC,MAAMH,cAKlB3D,kBAGA+J,YAAYtH,GAAGjC,YAAaF,4BAA4B,SAASoC,SACvDI,cAAgB1D,EAAEsD,EAAEI,eACpBoF,WAAapF,cAAcS,QAAQjD,uBAAuBc,KAAK,WAC/DiL,KAAOvJ,cAAc1B,KAAK,QAChCwC,QAAQ,CAAC,4BAA4B,SAAUmI,YAC3CvI,YAAW,KACPuI,WAAWO,8BACPpE,WAAalD,SAASkD,YAAc,EACpCmE,KAAOrH,SAASqH,MAAQ,KAE7B,iBAKThB,YAAcjM,EAAEkB,uBAGtByJ,YAAYtH,GAAGjC,YAAaF,wBAAwB,SAAUoC,GACrB,SAAjC2I,YAAYpJ,IAAIxB,cAEhB4K,YAAY1F,UAAU,KACtBvG,EAAEkB,sBAAsB0B,YAAY,mBACpC5C,EAAEsD,EAAEI,eAAeoB,SAAS3D,iBAAiByB,YAAYzB,mBACzDhB,eAAegN,yBAAyB,eAGxClB,YAAYtJ,QAAQ,KACpB3C,EAAEkB,sBAAsB4D,SAAS,mBACjC9E,EAAEsD,EAAEI,eAAeoB,SAAS3D,mBAAmByB,YAAYzB,iBAC3DhB,eAAegN,yBAAyB,gBAI5CjD,mBACA1F,QAAQ,CAAC,gCAAgC,SAAU4I,eAC/CA,cAActD,KAAKpJ,SAAUP,eAAeyK,wBAE5CZ,kBACAW,YAAYtH,GAAGjC,YAAaF,wBAAwB,WAChDqB,qBAAqB,GACrB6E,eAAc,GAAM,OAShCpH,EAAE,oBAAoB4C,YAAY,UAGlC3C,UAAUoN,OAAO,uBAAwB,IAAIjL,MAAK,SAAUF,MACxDzB,gBAAkByB,YAKlBoL,WAAa,CACb,CAACC,IAAK,oBAAqBC,UAAW,gBACtC,CAACD,IAAK,qBAAsBC,UAAW,gBACvC,CAACD,IAAK,WACN,CAACA,IAAK,SAAUC,UAAW,UAC3B,CAACD,IAAK,oBAAqBC,UAAW,gBACtC,CAACD,IAAK,QACN,CAACA,IAAK,QACN,CAACA,IAAK,QAASC,UAAW,iBAE9BnN,IAAIoN,YAAYH,YAAYlL,MAAK,SAAUsL,GACvCA,EAAErI,SAAQ,SAAShF,IAAKwB,OAChBxB,IACAQ,YAAYyM,WAAWzL,OAAO0L,KAAOlN,KAErCQ,YAAYyM,WAAWzL,OAAO0L,KAAO,SACrC/I,QAAQ,CAAC,aAAa,SAASC,KAC3BA,IAAIC,+CAAwC7C,QAC5C4C,IAAIC,MAAMgJ,aAKzB3F,MAAK,SAASxD,KACXC,QAAQ,CAAC,aAAa,SAASC,KAC3BA,IAAIC,MAAMH,WAMd/D,SACAmK,YAAYtH,GAAGjC,YAAaF,kBAAoB,YAAY,SAASoC,OAC7D0H,OAAShL,EAAEsD,EAAEI,eACbiK,IAAM3C,OAAO7G,QAAQjD,mBAAmBc,KAAK,yBACrCc,IAAR6K,IAAmB,CACnBrK,EAAE2H,iBACF3H,EAAEsK,sBACEC,GAAK7C,OAAO7G,QAAQjD,mBACxBhB,KAAKoI,KAAK,CAAC,CACPC,WAAY,4BAA6BC,KAAM,CAC3CtB,SAAUxG,SACVuM,KAAMY,GAAG7L,KAAK,YAElB,GAAGI,MAAK,WACRyB,OAAOC,SAASC,KAAO4J,WAYnC3N,EAAEkB,eAAemC,GAAGjC,eAAe,SAAUkC,GACrCA,EAAEC,UAAYjC,iBACdtB,EAAEsD,EAAEI,eAAeE,eAS3BkK,oBAAqB,EACzB9N,EAAE6D,QAAQkK,QAAO,eACRD,uBAEO9N,EAAE6D,QAAQ8C,aAAe,KACzB3G,EAAE,kCAAkC4B,MAAK,CAAC+C,EAAG+I,KACzCA,EAAI1N,EAAE0N,SAEAM,YADUzI,SAAS0I,eAAe,WAAaP,EAAE1L,KAAK,YAChCkM,wBACtBC,MAAQ5I,SAAS6I,KAAKC,YAAcL,YAAYG,MAAQ,GACxDG,eAAiBZ,EAAE/L,KAAK,mBACxB4M,UAAYvO,EAAE,SAASyG,SAASC,IAClCsH,YAAYtH,IAAM6H,UAAY,GAAKP,YAAYQ,OAASD,UAAY,GACpED,eAAexJ,SAAS,kBACxBwJ,eAAezL,IAAI,KAAQ0L,UAAY,SAAaJ,UAEpDG,eAAe1L,YAAY,kBAC3B0L,eAAezL,IAAI,KAAQ,cAAkB,cAI3D,MAAO0B,KACLC,QAAQ,CAAC,aAAa,SAASC,KAC3BA,IAAIC,MAAMH,QAEduJ,oBAAqB,UAMzCzF,yBAAyB1H,gBAAiBc,UAAW2E,eACjDiC,yBAAyB1H,gBAAiBc,UAAW2E"}