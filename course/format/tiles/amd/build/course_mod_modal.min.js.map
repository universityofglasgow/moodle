{"version":3,"file":"course_mod_modal.min.js","sources":["../src/course_mod_modal.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/* eslint space-before-function-paren: 0 */\n\n/**\n * Javascript Module to handle rendering of course modules (e.g. resource/PDF, resource/html, page) in modal windows\n *\n * When the user clicks a PDF course module subtile or old style resource\n * if we are using modals for it (e.g. PDF) , create, populate, launch and size the modal\n *\n * @module      format_tiles/course_mod_modal\n * @copyright   2018 David Watson {@link http://evolutioncode.uk}\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since       Moodle 3.3\n */\n\ndefine([\"jquery\", \"core/modal_factory\", \"core/config\", \"core/templates\", \"core/notification\", \"core/ajax\",\n        'core/fragment', \"core/modal_events\"],\n    function ($, modalFactory, config, Templates, Notification, ajax, Fragment, ModalEvents) {\n        \"use strict\";\n\n        /**\n         * Keep references for all modals we have already added to the page,\n         * so that we can relaunch then if needed\n         * @type {{}}\n         */\n        var modalStore = {};\n        var loadingIconHtml;\n        const win = $(window);\n        var courseId;\n        var tilesConfig;\n\n        const Selector = {\n            modal: \".modal\",\n            modalDialog: \".modal-dialog\",\n            modalBody: \".modal-body\",\n            sectionMain: \".section.main\",\n            pageContent: \"#page-content\",\n            regionMain: \"#region-main\",\n            completionState: \"#completion-check-\",\n            cmModal: \".embed_cm_modal\",\n            moodleMediaPlayer: \".mediaplugin_videojs\",\n            closeBtn: \"button.close\",\n            ACTIVITY: \"li.activity\",\n            URLACTIVITYPOPUPLINK: \".activity.modtype_url.urlpopup a\",\n            modalHeader: \".modal-header\",\n            embedModuleButtons: \".embed-module-buttons\",\n            iframe: \"iframe\"\n        };\n\n        const CLASS = {\n            COMPLETION_ENABLED: \"completion-enabled\",\n            COMPLETION_MANUAL: \"completion-manual\",\n            COMPLETION_AUTO: \"completion-auto\", // E.g. grade based.\n            COMPLETION_VIEW: \"completion-view\",\n            COMPLETION_CHECK_BOX: \"completioncheckbox\",\n            COMPLETION_DROPDOWN: \"completion-dropdown\"\n        };\n\n        const modalMinWidth = function () {\n            return Math.min(win.width(), 1100);\n        };\n\n        /**\n         * Some modals contain videos in iframes or objects, which need to stop playing when dismissed.\n         * @param {object} modal the modal which contains the video.\n         */\n        const stopAllVideosOnDismiss = function(modal) {\n            modal.on(ModalEvents.hidden, function() {\n                const iframes = modal.find(Selector.iframe);\n                const objects = modal.find(\"object\");\n                const moodleMediaPlayer = modal.find(Selector.moodleMediaPlayer);\n\n                if (iframes.length || objects.length || moodleMediaPlayer.length) {\n                    modalStore[modal.data(\"cmid\")] = undefined;\n                    modal.remove();\n                }\n            });\n        };\n        /**\n         *\n         * @param {number} cmId\n         * @param {number} moduleContextId\n         * @param {number} sectionNum\n         * @param {string} title\n         * @param {string} objectType\n         * @param {boolean} completionEnabled\n         * @param {number} existingCompletionState\n         * @param {boolean} isManualCompletion\n         * @returns {boolean}\n         */\n        const launchCmModal = function (\n                cmId, moduleContextId, sectionNum, title, objectType,\n                completionEnabled, existingCompletionState, isManualCompletion\n            ) {\n            modalFactory.create({\n                type: modalFactory.types.DEFAULT,\n                title: title,\n                body: loadingIconHtml\n            }).done(function (modal) {\n                modalStore[cmId] = modal;\n                modal.setLarge();\n                modal.show();\n                const modalRoot = $(modal.root);\n                modalRoot.attr(\"id\", \"embed_mod_modal_\" + cmId);\n                modalRoot.data(\"cmid\", cmId);\n                modalRoot.data(\"section\", sectionNum);\n                modalRoot.addClass(\"embed_cm_modal\");\n\n                // If it's a page activity, we simply add the page HTML as the modal body.\n                // Otherwise, we set the body by rendering from a template.\n                if (objectType === 'page') {\n                    modalRoot.addClass('mod_' + objectType);\n                    stopAllVideosOnDismiss(modalRoot);\n                    Fragment.loadFragment(\n                        'format_tiles', `get_cm_content`, moduleContextId, {contextid: moduleContextId}\n                    )\n                       .done(function(html, js) {\n                            modal.setBody(html);\n                            Templates.runTemplateJS(js);\n                        });\n                } else {\n                    // Render the modal body and set it to the page.\n                    // First a blank template data object.\n                    var templateData = {\n                        id: cmId,\n                        objectType: null,\n                        width: \"100%\",\n                        height: Math.round(win.height() - 60), // Embedded object height in modal - make as high as poss.\n                        cmid: cmId,\n                        tileid: sectionNum,\n                        isediting: 0,\n                        sesskey: config.sesskey,\n                        activityname: title,\n                        config: {wwwroot: config.wwwroot},\n                        completionstring: ''\n                    };\n\n                    var template = null;\n                    if ([\"resource_html\", 'resource_markup'].includes(objectType)) {\n                        templateData.objectType = \"text/html\";\n                        template = 'format_tiles/embed_file_modal_body';\n                    } else if (objectType === \"resource_pdf\") {\n                        templateData.objectType = 'application/pdf';\n                        template = 'format_tiles/embed_file_modal_body';\n                    } else if (objectType === \"url\") {\n                        templateData.objectType = 'url';\n                        template = 'format_tiles/embed_url_modal_body';\n                    }\n\n                    Templates.render(template, templateData).done(function (html) {\n                        modal.setBody(html);\n                        modalRoot.find(Selector.modalBody).animate({\"min-height\": Math.round(win.height() - 120)}, \"fast\");\n\n                        if (objectType === \"resource_html\" || objectType === 'url') {\n                            // HTML files only - set widths to 100% since they may contain embedded videos etc.\n                            modalRoot.find(Selector.modal).animate({\"max-width\": \"100%\"}, \"fast\");\n                            modalRoot.find(Selector.modalDialog).animate({\"max-width\": \"100%\"}, \"fast\");\n                            modalRoot.find(Selector.modalBody).animate({\"max-width\": \"100%\"}, \"fast\");\n                            stopAllVideosOnDismiss(modalRoot);\n                            if (objectType === 'url') {\n                                modalRoot.find(Selector.modalBody).addClass(\"text-center\");\n                            }\n                        } else if (objectType === \"resource_pdf\") {\n                            // Otherwise (e.g. for PDF) we don't need 100% width.\n                            modalRoot.find(Selector.modal).animate({\"max-width\": modalMinWidth()}, \"fast\");\n                            // We do modal-dialog too since Moove theme uses it.\n                            modalRoot.find(Selector.modalDialog).animate({\"max-width\": modalMinWidth()}, \"fast\");\n                        }\n\n                    }).fail(Notification.exception);\n                }\n\n                // Render the modal header / title and set it to the page.\n                var headerTemplateData = {\n                    cmid: cmId,\n                    activityname: title,\n                    tileid: sectionNum,\n                    showDownload: objectType === \"resource_pdf\" ? 1 : 0,\n                    showNewWindow: [\"resource_pdf\", 'url'].includes(objectType) ? 1 : 0,\n                    forModal: true,\n                    config: {wwwroot: config.wwwroot}\n                };\n                if (completionEnabled) {\n                    headerTemplateData.istrackeduser = 1;\n                    headerTemplateData.hascompletion = 1;\n                    const oldState = existingCompletionState === 1;\n\n                    // Core completion button template has 'overallcomplete' arg relating to this cm.\n                    // See course/templates/completion_manual.mustache.\n                    headerTemplateData.overallcomplete = oldState ? 1 : 0;\n                    headerTemplateData.overallincomplete = oldState ? 0 : 1;\n                    headerTemplateData.completionIsManual = isManualCompletion;\n                    if (!headerTemplateData.completionIsManual) {\n                        // Auto completion has different vars for core template core_course/completion_automatic.\n                        headerTemplateData.statuscomplete = headerTemplateData.overallcomplete;\n                        headerTemplateData.statusincomplete = headerTemplateData.overallincomplete;\n                    }\n                    // Trigger event to check if other items in course have updated availability.\n                    if (oldState !== headerTemplateData.completionstate) {\n                        require([\"format_tiles/completion\"], function (completion) {\n                            completion.triggerCompletionChangedEvent(parseInt(sectionNum), parseInt(cmId));\n                        });\n                    }\n                }\n\n                Templates.render(\"format_tiles/embed_module_modal_header_btns\", headerTemplateData).done(function (html) {\n                    modalRoot.find(Selector.embedModuleButtons).remove();\n                    modalRoot.find($('button.close')).remove();\n                    modalRoot.find(Selector.modalHeader).append(html);\n                    modalRoot.find(Selector.closeBtn).detach().appendTo(modalRoot.find(Selector.embedModuleButtons));\n                    const toggleCompletionSelector = '[data-action=\"toggle-manual-completion\"]';\n                    modalRoot.find(toggleCompletionSelector).on('click', () => {\n                        require([\"format_tiles/completion\"], function (completion) {\n                            // In this case, core will handle the request to set the new completion value in the DB.\n                            // We wait a moment to allow that to get a head start.\n                            // Then we trigger an event which course.js will see and update section content to show new statuses.\n                            // Use will not notice this as they are looking at the modal, but it's ready when they dismiss modal.\n                            setTimeout(() => {\n                                completion.triggerCompletionChangedEvent(\n                                    parseInt(modalRoot.data('section')), parseInt(modalRoot.data(\"cmid\"))\n                                );\n                            }, 300);\n                        });\n                    });\n                }).fail(Notification.exception);\n\n                // Allow a short delay before we resize the modal, and check a few times, as content may be loading.\n                setTimeout(() => {\n                    modalHeightChangeWatcher(modalRoot, 3, 1000);\n                }, 500);\n\n                return true;\n            });\n            return false;\n        };\n\n        /**\n         * Resize the modal to account for its content.\n         * @param {object} modalRoot\n         */\n        var resizeModal = function(modalRoot) {\n            modalRoot.find(Selector.modal).animate({\"max-width\": modalMinWidth()}, \"fast\");\n\n            var MODAL_MARGIN = 70;\n\n            // If the modal contains a Moodle mediaplayer div, remove the max width css rule which Moodle applies.\n            // Otherwise video will be 400px max wide.\n            var mediaPlayer = $(Selector.moodleMediaPlayer);\n            mediaPlayer.find(\"div\").each(function(index, child) {\n                $(child).css(\"max-width\", \"\");\n            });\n            if (mediaPlayer.length > 0) {\n                stopAllVideosOnDismiss(modalRoot);\n            }\n\n            // If the activity contains an iframe (e.g. is a page with a YouTube video in it, or H5P), ensure modal is big enough.\n            // Do this for every iframe in the course module.\n            modalRoot.find(Selector.iframe).each(function (index, iframe) {\n\n                const iframeSelector = $(iframe);\n\n                // Get the modal.\n                var modal;\n                // Boost calls the modal \"modal dialog\" so try this first.\n                modal = modalRoot.find(Selector.modalDialog);\n\n                // If no luck, try what Clean and Adaptable do instead.\n                if (modal.length === 0) {\n                    modal = modalRoot.find(Selector.modal);\n                }\n\n                // Now check and adjust the width of the modal.\n                var iframeWidth = Math.min(iframeSelector.width(), win.width());\n                if (iframeWidth > modal.width() - MODAL_MARGIN) {\n                    modal.animate(\n                        {\"max-width\": Math.max(iframeWidth + MODAL_MARGIN, modalMinWidth())},\n                        \"fast\"\n                    );\n                    modalRoot.find(Selector.modal).animate(\n                        {\"max-width\": Math.max(iframeWidth + MODAL_MARGIN, modalMinWidth())},\n                        \"fast\"\n                    );\n                }\n\n                // Then the height of the modal body.\n                var modalBody = modalRoot.find(Selector.modalBody);\n                if (iframeSelector.height() > modalBody.height() - MODAL_MARGIN) {\n                    iframeSelector.attr('height', modalBody.height() - MODAL_MARGIN);\n                }\n                stopAllVideosOnDismiss(modalRoot);\n            });\n        };\n\n        /**\n         * Check the modal height to see if the iframe in it is bigger.  If it is, adjust modal height up.\n         * Do this a few times so that, if iframe content is loading, we can check after it's loaded.\n         * @param {object} modalRoot\n         * @param {number} howManyChecks\n         * @param {number}duration\n         * @param {number} oldHeight\n         */\n        const modalHeightChangeWatcher = function (modalRoot, howManyChecks, duration, oldHeight = 0) {\n            const iframe = modalRoot.find(Selector.modalBody);\n            if (iframe) {\n                const newHeight = Math.round(iframe.height());\n                if (newHeight && newHeight > oldHeight + 10) {\n                    resizeModal(modalRoot);\n                }\n                if (howManyChecks > 0) {\n                    setTimeout(() => {\n                        modalHeightChangeWatcher(modalRoot, howManyChecks - 1, duration, newHeight);\n                    }, duration);\n                }\n            }\n        };\n\n        /**\n         * Do we need a modal for this cm?\n         * @param {number} cmId course module ID\n         * @param {string} url\n         * @return boolean\n         */\n        const modalRequired = function(cmId, url) {\n            if (tilesConfig.modalallowedmodnames === undefined) {\n                return false;\n            }\n            if (tilesConfig.modalallowedcmids === undefined) {\n                return false;\n            }\n            if (!(tilesConfig.modalallowedcmids).includes(cmId)) {\n                return false;\n            }\n\n            return ((tilesConfig.modalallowedmodnames).includes('page') && url.startsWith(`${config.wwwroot}/mod/page/view.php`))\n                || ((tilesConfig.modalallowedmodnames).includes('url') && url.startsWith(`${config.wwwroot}/mod/url/view.php`))\n                || ((tilesConfig.modalallowedmodnames).includes('pdf') && url.startsWith(`${config.wwwroot}/mod/resource/view.php`))\n                || ((tilesConfig.modalallowedmodnames).includes('html')\n                    && url.startsWith(`${config.wwwroot}/mod/resource/view.php`));\n        };\n\n        return {\n            init: function (courseIdInit, isEditing, pageType, launchModalCmid, usingJsNav) {\n                courseId = parseInt(courseIdInit);\n                $(document).ready(function () {\n                    tilesConfig = $('#format-tiles-js-config').data();\n                    const courseIndex = $('nav#courseindex');\n\n                    if (['course-view-tiles', 'section-view-tiles'].includes(pageType)) {\n                        // We are on a main tiles page, /course/view.php or /course/section.php in Moodle 4.4+.\n                        // If any link in the course index on the left is clicked, check if it needs a modal.\n                        // If it does, launch the modal instead of following the link.\n                        // This isn't ideal but saves plugin re-implementing / maintaining large volume of course index code.\n                        // TODO use reactive UI - courseformat/activity:openAnchor in course/format/amd/src/local/courseindex.\n                        if (!isEditing && courseIndex.length > 0) {\n                            courseIndex.on('click', function(e) {\n                                const target = $(e.target);\n                                const link = target.hasClass('courseindex-link') ? target : target.find('a.courseindex-link');\n                                if (link && link.data('for') === 'cm_name') {\n                                    e.preventDefault();\n                                    const linkUrl = link.attr('href');\n                                    if (linkUrl) {\n                                        const cmId = link.closest('li.courseindex-item').data('id');\n                                        ajax.call([{\n                                            methodname: \"format_tiles_get_course_mod_info\", args: {cmid: cmId}\n                                        }])[0].done(function (data) {\n                                            const expandedSection = $(`li#section-${data.sectionnumber}.state-visible`);\n                                            if (modalRequired(cmId, linkUrl)) {\n                                                if (!data || !data.modalallowed) {\n                                                    window.location.href = linkUrl;\n                                                    return;\n                                                }\n                                                if (usingJsNav) {\n                                                    if (expandedSection.length === 0) {\n                                                        require([\"format_tiles/course\"], function (course) {\n                                                            course.populateAndExpandSection(\n                                                                data.coursecontextid, data.sectionid, data.sectionnumber\n                                                            );\n                                                        });\n                                                    }\n                                                    launchCmModal(\n                                                        cmId,\n                                                        data.modulecontextid,\n                                                        data.sectionnumber,\n                                                        data.name,\n                                                        data.modname === 'resource'\n                                                            ? `resource_${data.resourcetype}` : data.modname,\n                                                        data.completionenabled ? 1 : 0,\n                                                        data.iscomplete ? 1 : 0,\n                                                        data.ismanualcompletion\n                                                    );\n                                                } else {\n                                                    window.location.href = config.wwwroot\n                                                        + `/course/view.php?id=${courseId}`\n                                                        + `&section=${data.sectionnumber}&cmid=${cmId}`;\n                                                }\n                                            } else {\n                                                // Link URL may be anchor e.g. #module-138 if the item is a label.\n                                                const isAnchorLink = link.data('anchor') || linkUrl.startsWith('#');\n                                                if (!isAnchorLink) {\n                                                    window.location.href = linkUrl;\n                                                } else {\n                                                    if (usingJsNav) {\n                                                        if (expandedSection.length === 0) {\n                                                            require([\"format_tiles/course\"], function (course) {\n                                                                course.populateAndExpandSection(\n                                                                    data.coursecontextid, data.sectionid, data.sectionnumber\n                                                                );\n                                                            });\n                                                        }\n                                                    } else {\n                                                        window.location.href = config.wwwroot\n                                                            + `/course/view.php?id=${courseId}`\n                                                            + `&section=${data.sectionnumber}`;\n                                                    }\n                                                }\n                                            }\n                                        })\n                                        .fail(function() {\n                                            window.location.href = linkUrl;\n                                        });\n                                    }\n                                }\n                            });\n                        }\n\n                        // If we are passing ?cmid=xxx in the URL this suggests we are trying to launch course mod modal.\n                        // This would be from clicking a course index link while in another activity.\n                        // E.g. from /mod/xxx/view.php for another course module.\n                        // This isn't ideal but saves this plugin re-implementing / maintaining large volume of course index code.\n                        if (launchModalCmid) {\n                            ajax.call([{\n                                methodname: \"format_tiles_get_course_mod_info\", args: {cmid: launchModalCmid}\n                            }])[0].done(function (data) {\n                                if (data && data.modalallowed && data.courseid === courseId) {\n                                    const expandedSection = $(`li#section-${data.sectionnumber}.state-visible`);\n                                    if (expandedSection.length === 0) {\n                                        if (usingJsNav) {\n                                            require([\"format_tiles/course\"], function (course) {\n                                                course.populateAndExpandSection(\n                                                    data.coursecontextid, data.sectionid, data.sectionnumber\n                                                );\n                                            });\n                                        }\n                                    }\n\n                                    launchCmModal(\n                                        launchModalCmid,\n                                        data.modulecontextid,\n                                        data.sectionnumber,\n                                        data.name,\n                                        data.modname === 'resource' ? `resource_${data.resourcetype}` : data.modname,\n                                        data.completionenabled ? 1 : 0,\n                                        data.iscomplete ? 1 : 0,\n                                        data.ismanualcompletion,\n                                    );\n                                }\n                            });\n                        }\n\n                        var pageContent = $(Selector.pageContent);\n                        if (pageContent.length === 0) {\n                            // Some themes e.g. RemUI do not have a #page-content div, so use #region-main.\n                            pageContent = $(Selector.regionMain);\n                        }\n\n                        pageContent.on(\"keydown\", `[data-action=\"launch-tiles-cm-modal\"]`, function (e) {\n                            const ENTER_KEY = 13;\n                            if (e.keyCode === ENTER_KEY) {\n                                // User has tabbed to a modal capable activity and pressed enter.\n                                // To improve accessibility, do not launch a modal but show them standard activity screen.\n                                e.preventDefault();\n                                const url = $(e.target).attr('href');\n                                if (url) {\n                                    window.location.href = url;\n                                }\n                            }\n                        });\n\n                        pageContent.on(\"click\", `[data-action=\"launch-tiles-cm-modal\"]`, function (e) {\n                            // If click is on a completion checkbox within activity, ignore here as handled elsewhere.\n                            const tgt = $(e.target);\n                            const isExcludedControl = tgt.hasClass(CLASS.COMPLETION_CHECK_BOX)\n                                || tgt.parent().hasClass(CLASS.COMPLETION_CHECK_BOX)\n                                || tgt.hasClass(CLASS.COMPLETION_DROPDOWN)\n                                || tgt.parent().hasClass(CLASS.COMPLETION_DROPDOWN)\n                                || tgt.is(\":button\")\n                                || tgt.hasClass('expanded-content') // \"Show less\" link on restrictions.\n                                || tgt.hasClass('collapsed-content'); // \"Show more\" link on restrictions\n                            if (isExcludedControl) {\n                                return;\n                            }\n                            e.preventDefault();\n                            const currTgt = $(e.currentTarget);\n                            var clickedCmObject = currTgt.closest(\"li.activity\");\n                            const cmId = clickedCmObject.data('cmid');\n                            const moduleContextId = clickedCmObject.data('contextid');\n                            const sectionNum = clickedCmObject.closest(Selector.sectionMain).data('section');\n\n                            // If we already have this modal on the page, launch it.\n                            var existingModal = modalStore[cmId];\n                            if (typeof existingModal === \"object\") {\n                                existingModal.show();\n                            } else {\n\n                                // We don't already have it, so make it.\n                                launchCmModal(\n                                    cmId,\n                                    moduleContextId,\n                                    sectionNum,\n                                    clickedCmObject.data('title'),\n                                    clickedCmObject.data('modtype'),\n                                    clickedCmObject.hasClass(CLASS.COMPLETION_ENABLED),\n                                    clickedCmObject.data('completion-state')\n                                        ? parseInt(clickedCmObject.data('completion-state')) : null,\n                                    clickedCmObject.hasClass(CLASS.COMPLETION_MANUAL),\n                                );\n                            }\n                        });\n\n                        // Render the loading icon and append it to body so that we can use it later.\n                        Templates.render(\"format_tiles/loading\", {})\n                            .catch(Notification.exception)\n                            .done(function (html) {\n                                loadingIconHtml = html; // TODO get this from elsewhere.\n                            }).fail(Notification.exception);\n\n                        // If completion of a cm changes, remove it from store so that it can be re-rendered with correct heading.\n                        $(document).on('format-tiles-completion-changed', function(e, data) {\n                            if (data.cmid && modalStore[data.cmid]) {\n                                modalStore[data.cmid] = undefined;\n                            }\n                        });\n                    } else if (pageType.match('^mod-[a-z]+-view$')) {\n                        courseIndex.on('click', function (e) {\n                            const target = $(e.target);\n                            const link = target.hasClass('courseindex-link') ? target : target.find('a.courseindex-link');\n                            if (link && link.data('for') === 'cm_name') {\n                                e.preventDefault();\n                                const linkUrl = link.attr('href');\n                                if (linkUrl) {\n                                    const link = $(e.target);\n                                    const cmId = link.closest('li.courseindex-item').data('id');\n                                    if (modalRequired(cmId, linkUrl)) {\n                                        if (usingJsNav) {\n                                            window.location.href = `${config.wwwroot}/course/view.php?id=${courseId}&cmid=${cmId}`;\n                                        } else {\n                                            const sectionElement = link.closest('.courseindex-section');\n                                            const sectionNumber = sectionElement ? sectionElement.data('number') : 0;\n                                            window.location.href = `${config.wwwroot}/course/view.php?id=${courseId}`\n                                                + `&section=${sectionNumber}&cmid=${cmId}`;\n                                        }\n                                    } else {\n                                        window.location.href = linkUrl;\n                                    }\n                                }\n                            }\n                        });\n                    }\n                });\n            }\n        };\n    }\n);\n"],"names":["define","$","modalFactory","config","Templates","Notification","ajax","Fragment","ModalEvents","loadingIconHtml","modalStore","win","window","courseId","tilesConfig","Selector","CLASS","modalMinWidth","Math","min","width","stopAllVideosOnDismiss","modal","on","hidden","iframes","find","objects","moodleMediaPlayer","length","data","undefined","remove","launchCmModal","cmId","moduleContextId","sectionNum","title","objectType","completionEnabled","existingCompletionState","isManualCompletion","create","type","types","DEFAULT","body","done","setLarge","show","modalRoot","root","attr","addClass","loadFragment","contextid","html","js","setBody","runTemplateJS","templateData","id","height","round","cmid","tileid","isediting","sesskey","activityname","wwwroot","completionstring","template","includes","render","animate","fail","exception","headerTemplateData","showDownload","showNewWindow","forModal","istrackeduser","hascompletion","oldState","overallcomplete","overallincomplete","completionIsManual","statuscomplete","statusincomplete","completionstate","require","completion","triggerCompletionChangedEvent","parseInt","append","detach","appendTo","setTimeout","modalHeightChangeWatcher","resizeModal","mediaPlayer","each","index","child","css","iframe","iframeSelector","iframeWidth","max","modalBody","howManyChecks","duration","oldHeight","newHeight","modalRequired","url","modalallowedmodnames","modalallowedcmids","startsWith","init","courseIdInit","isEditing","pageType","launchModalCmid","usingJsNav","document","ready","courseIndex","e","target","link","hasClass","preventDefault","linkUrl","closest","call","methodname","args","expandedSection","sectionnumber","modalallowed","location","href","course","populateAndExpandSection","coursecontextid","sectionid","modulecontextid","name","modname","resourcetype","completionenabled","iscomplete","ismanualcompletion","courseid","pageContent","keyCode","tgt","parent","is","clickedCmObject","currentTarget","existingModal","catch","match","sectionElement","sectionNumber"],"mappings":"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"}