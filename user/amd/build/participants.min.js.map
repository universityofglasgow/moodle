{"version":3,"file":"participants.min.js","sources":["../src/participants.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Some UI stuff for participants page.\n * This is also used by the report/participants/index.php because it has the same functionality.\n *\n * @module     core_user/participants\n * @copyright  2017 Damyon Wiese\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport * as DynamicTable from 'core_table/dynamic';\nimport * as Str from 'core/str';\nimport CheckboxToggleAll from 'core/checkbox-toggleall';\nimport CustomEvents from 'core/custom_interaction_events';\nimport DynamicTableSelectors from 'core_table/local/dynamic/selectors';\nimport ModalEvents from 'core/modal_events';\nimport Notification from 'core/notification';\nimport Pending from 'core/pending';\nimport jQuery from 'jquery';\nimport {showAddNote, showSendMessage} from 'core_user/local/participants/bulkactions';\nimport 'core/inplace_editable';\n\nconst Selectors = {\n    bulkActionSelect: \"#formactionid\",\n    bulkUserSelectedCheckBoxes: \"input[data-togglegroup='participants-table'][data-toggle='slave']:checked\",\n    checkCountButton: \"#checkall\",\n    showCountText: '[data-region=\"participant-count\"]',\n    showCountToggle: '[data-action=\"showcount\"]',\n    stateHelpIcon: '[data-region=\"state-help-icon\"]',\n    tableForm: uniqueId => `form[data-table-unique-id=\"${uniqueId}\"]`,\n};\n\nexport const init = ({\n    uniqueid,\n    noteStateNames = {},\n}) => {\n    const root = document.querySelector(Selectors.tableForm(uniqueid));\n    const getTableFromUniqueId = uniqueId => root.querySelector(DynamicTableSelectors.main.fromRegionId(uniqueId));\n\n    /**\n     * Private method.\n     *\n     * @method registerEventListeners\n     * @private\n     */\n    const registerEventListeners = () => {\n        CustomEvents.define(Selectors.bulkActionSelect, [CustomEvents.events.accessibleChange]);\n        jQuery(Selectors.bulkActionSelect).on(CustomEvents.events.accessibleChange, e => {\n            const bulkActionSelect = e.target.closest('select');\n            const action = bulkActionSelect.value;\n            const tableRoot = getTableFromUniqueId(uniqueid);\n            const checkboxes = tableRoot.querySelectorAll(Selectors.bulkUserSelectedCheckBoxes);\n            const pendingPromise = new Pending('core_user/participants:bulkActionSelect');\n\n            if (action.indexOf('#') !== -1) {\n                e.preventDefault();\n\n                const ids = [];\n                checkboxes.forEach(checkbox => {\n                    ids.push(checkbox.getAttribute('name').replace('user', ''));\n                });\n\n                let bulkAction;\n                if (action === '#messageselect') {\n                    bulkAction = showSendMessage(ids);\n                } else if (action === '#addgroupnote') {\n                    bulkAction = showAddNote(\n                        root.dataset.courseId,\n                        ids,\n                        noteStateNames,\n                        root.querySelector(Selectors.stateHelpIcon)\n                    );\n                }\n\n                if (bulkAction) {\n                    const pendingBulkAction = new Pending('core_user/participants:bulkActionSelected');\n                    bulkAction\n                    .then(modal => {\n                        modal.getRoot().on(ModalEvents.hidden, () => {\n                            // Focus on the action select when the dialog is closed.\n                            bulkActionSelect.focus();\n                        });\n\n                        pendingBulkAction.resolve();\n                        return modal;\n                    })\n                    .catch(Notification.exception);\n                }\n            } else if (action !== '' && checkboxes.length) {\n                bulkActionSelect.form.submit();\n            }\n\n            resetBulkAction(bulkActionSelect);\n            pendingPromise.resolve();\n        });\n\n        root.addEventListener('click', e => {\n            // Handle clicking of the \"Select all\" actions.\n            const checkCountButton = root.querySelector(Selectors.checkCountButton);\n            const checkCountButtonClicked = checkCountButton && checkCountButton.contains(e.target);\n\n            if (checkCountButtonClicked) {\n                e.preventDefault();\n\n                const tableRoot = getTableFromUniqueId(uniqueid);\n\n                DynamicTable.setPageSize(tableRoot, checkCountButton.dataset.targetPageSize)\n                .then(tableRoot => {\n                    // Update the toggle state.\n                    CheckboxToggleAll.setGroupState(root, 'participants-table', true);\n\n                    return tableRoot;\n                })\n                .catch(Notification.exception);\n            }\n        });\n\n        // When the content is refreshed, update the row counts in various places.\n        root.addEventListener(DynamicTable.Events.tableContentRefreshed, e => {\n            const checkCountButton = root.querySelector(Selectors.checkCountButton);\n\n            const tableRoot = e.target;\n\n            const defaultPageSize = parseInt(tableRoot.dataset.tableDefaultPerPage, 10);\n            const currentPageSize = parseInt(tableRoot.dataset.tablePageSize, 10);\n            const totalRowCount = parseInt(tableRoot.dataset.tableTotalRows, 10);\n\n            CheckboxToggleAll.updateSlavesFromMasterState(root, 'participants-table');\n\n            const pageCountStrings = [\n                {\n                    key: 'countparticipantsfound',\n                    component: 'core_user',\n                    param: totalRowCount,\n                },\n            ];\n\n            if (totalRowCount <= defaultPageSize) {\n                if (checkCountButton) {\n                    checkCountButton.classList.add('hidden');\n                }\n            } else if (totalRowCount <= currentPageSize) {\n                // The are fewer than the current page size.\n                pageCountStrings.push({\n                    key: 'selectalluserswithcount',\n                    component: 'core',\n                    param: defaultPageSize,\n                });\n\n                if (checkCountButton) {\n                    // The 'Check all [x]' button is only visible when there are values to set.\n                    checkCountButton.classList.add('hidden');\n                }\n            } else {\n                pageCountStrings.push({\n                    key: 'selectalluserswithcount',\n                    component: 'core',\n                    param: totalRowCount,\n                });\n\n                if (checkCountButton) {\n                    checkCountButton.classList.remove('hidden');\n                }\n            }\n\n            Str.get_strings(pageCountStrings)\n            .then(([showingParticipantCountString, selectCountString]) => {\n                const showingParticipantCount = root.querySelector(Selectors.showCountText);\n                showingParticipantCount.innerHTML = showingParticipantCountString;\n\n                if (selectCountString && checkCountButton) {\n                    checkCountButton.value = selectCountString;\n                }\n\n                return;\n            })\n            .catch(Notification.exception);\n        });\n    };\n\n    const resetBulkAction = bulkActionSelect => {\n        bulkActionSelect.value = '';\n    };\n\n    registerEventListeners();\n};\n"],"names":["_interopRequireDefault","obj","__esModule","default","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","_interopRequireWildcard","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","DynamicTable","Str","_checkboxToggleall","_custom_interaction_events","_selectors","_modal_events","_notification","_pending","_jquery","Selectors","uniqueId","concat","_exports","init","_ref","uniqueid","noteStateNames","root","document","querySelector","getTableFromUniqueId","DynamicTableSelectors","main","fromRegionId","resetBulkAction","bulkActionSelect","value","CustomEvents","define","events","accessibleChange","jQuery","on","e","target","closest","action","checkboxes","querySelectorAll","pendingPromise","Pending","indexOf","preventDefault","ids","bulkAction","forEach","checkbox","push","getAttribute","replace","showSendMessage","showAddNote","dataset","courseId","pendingBulkAction","then","modal","getRoot","ModalEvents","hidden","focus","resolve","catch","Notification","exception","length","form","submit","addEventListener","checkCountButton","contains","tableRoot","setPageSize","targetPageSize","CheckboxToggleAll","setGroupState","Events","tableContentRefreshed","defaultPageSize","parseInt","tableDefaultPerPage","currentPageSize","tablePageSize","totalRowCount","tableTotalRows","updateSlavesFromMasterState","pageCountStrings","component","param","classList","add","remove","get_strings","_ref2","showingParticipantCountString","selectCountString","innerHTML"],"mappings":"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"}