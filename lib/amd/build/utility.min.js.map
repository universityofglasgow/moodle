{"version":3,"file":"utility.min.js","sources":["../src/utility.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript handling for HTML attributes. This module gets autoloaded on page load.\n *\n * With the appropriate HTML attributes, various functionalities defined in this module can be used such as a displaying\n * an alert or a confirmation modal, etc.\n *\n * @module     core/utility\n * @copyright  2021 Andrew Nicols <andrew@nicols.co.uk>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since      4.0\n *\n * @example <caption>Calling the confirmation modal to delete a block</caption>\n *\n * // The following is an example of how to use this module via an indirect PHP call with a button.\n *\n * $controls[] = new action_menu_link_secondary(\n *     $deleteactionurl,\n *     new pix_icon('t/delete', $str, 'moodle', array('class' => 'iconsmall', 'title' => '')),\n *     $str,\n *     [\n *         'class' => 'editing_delete',\n *         'data-modal' => 'confirmation', // Needed so this module will pick it up in the click handler.\n *         'data-modal-title-str' => json_encode(['deletecheck_modal', 'block']),\n *         'data-modal-content-str' => json_encode(['deleteblockcheck', 'block', $blocktitle]),\n *         'data-modal-yes-button-str' => json_encode(['delete', 'core']),\n *         'data-modal-toast' => 'true', // Can be set to inform the user that their action was a success.\n *         'data-modal-toast-confirmation-str' => json_encode(['deleteblockinprogress', 'block', $blocktitle]),\n *         'data-modal-destination' => $deleteconfirmationurl->out(false), // Where do you want to direct the user?\n *     ]\n * );\n */\n\nimport * as Str from 'core/str';\nimport Pending from 'core/pending';\nimport {add as addToast} from 'core/toast';\nimport {saveCancelPromise, exception} from 'core/notification';\n\n// We want to ensure that we only initialize the listeners only once.\nlet registered = false;\n\n/**\n * Either fetch the string or return it from the dom node.\n *\n * @method getConfirmationString\n * @private\n * @param {HTMLElement} dataset The page element to fetch dataset items in\n * @param {String} type The type of string to fetch\n * @param {String} field The dataset field name to fetch the contents of\n * @return {Promise}\n *\n */\nconst getModalString = (dataset, type, field) => {\n    if (dataset[`${type}${field}Str`]) {\n        return Str.get_string.apply(null, JSON.parse(dataset[`${type}${field}Str`]));\n    }\n    return Promise.resolve(dataset[`${type}${field}`]);\n};\n\n/**\n * Display a save/cancel confirmation.\n *\n * @private\n * @param {HTMLElement} source The title of the confirmation\n * @param {String} type The content of the confirmation\n * @returns {Promise}\n */\nconst displayConfirmation = (source, type) => {\n    return saveCancelPromise(\n        getModalString(source.dataset, type, 'Title'),\n        getModalString(source.dataset, type, 'Content'),\n        getModalString(source.dataset, type, 'YesButton'),\n    )\n    .then(() => {\n        if (source.dataset[`${type}Toast`] === 'true') {\n            const stringForToast = getModalString(source.dataset, type, 'ToastConfirmation');\n            if (typeof stringForToast === \"string\") {\n                addToast(stringForToast);\n            } else {\n                stringForToast.then(str => addToast(str)).catch(e => exception(e));\n            }\n        }\n        window.location.href = source.dataset[`${type}Destination`];\n        return;\n    }).catch(() => {\n        return;\n    });\n};\n\n/**\n * Display an alert and return the promise from it.\n *\n * @private\n * @param {String} title The title of the alert\n * @param {String} content The content of the alert\n * @returns {Promise}\n */\nconst displayAlert = async(title, content) => {\n    const pendingPromise = new Pending('core/confirm:alert');\n\n    const ModalFactory = await import('core/modal_factory');\n\n    return ModalFactory.create({\n        type: ModalFactory.types.ALERT,\n        title: title,\n        body: content,\n        removeOnClose: true,\n    })\n    .then(function(modal) {\n        modal.show();\n        pendingPromise.resolve();\n\n        return modal;\n    });\n};\n\n/**\n * Set up the listeners for the confirmation modal widget within the page.\n *\n * @method registerConfirmationListeners\n * @private\n */\nconst registerConfirmationListeners = () => {\n    document.addEventListener('click', e => {\n        const confirmRequest = e.target.closest('[data-confirmation=\"modal\"]');\n        if (confirmRequest) {\n            e.preventDefault();\n            displayConfirmation(confirmRequest, 'confirmation');\n        }\n\n        const modalConfirmation = e.target.closest('[data-modal=\"confirmation\"]');\n        if (modalConfirmation) {\n            e.preventDefault();\n            displayConfirmation(modalConfirmation, 'modal');\n        }\n\n        const alertRequest = e.target.closest('[data-modal=\"alert\"]');\n        if (alertRequest) {\n            e.preventDefault();\n            displayAlert(\n                getModalString(alertRequest.dataset, 'modal', 'Title'),\n                getModalString(alertRequest.dataset, 'modal', 'Content'),\n            );\n        }\n    });\n};\n\nif (!registered) {\n    registerConfirmationListeners();\n    registered = true;\n}\n"],"names":["obj","Str","nodeInterop","__esModule","default","cache","_getRequireWildcardCache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_interopRequireWildcard","_pending","_systemImportTransformerGlobalIdentifier","window","self","global","WeakMap","cacheBabelInterop","cacheNodeInterop","registered","getModalString","dataset","type","field","concat","get_string","apply","JSON","parse","Promise","resolve","displayConfirmation","source","saveCancelPromise","then","stringForToast","addToast","str","catch","e","exception","location","href","registerConfirmationListeners","document","addEventListener","confirmRequest","target","closest","preventDefault","modalConfirmation","alertRequest","async","title","content","pendingPromise","Pending","ModalFactory","define","amd","reject","require","module","exports","component","loader","create","types","ALERT","body","removeOnClose","modal","show","displayAlert"],"mappings":"gIAgDmC,IAAAA,IADnCC,IACmC,SAAAD,IAAAE,aAAAA,IAAAA,aAAAF,KAAAA,IAAAG,WAAAH,OAAAA,IAAAA,GAAAA,OAAAA,KAAAA,iBAAAA,KAAAI,mBAAAJ,IAAAI,MAAAA,CAAAA,QAAAJ,KAAAK,IAAAA,MAAAC,yBAAAJ,aAAA,GAAAG,OAAAA,MAAAE,IAAAP,KAAA,OAAAK,MAAAG,IAAAR,KAAA,IAAAS,OAAAC,GAAAA,sBAAAC,OAAAC,gBAAAD,OAAAE,yBAAAC,IAAAA,IAAAA,OAAAd,IAAAc,eAAAA,KAAAH,OAAAI,UAAAC,eAAAC,KAAAjB,IAAAc,KAAA,CAAA,IAAAI,KAAAR,sBAAAC,OAAAE,yBAAAb,IAAAc,KAAAI,KAAAA,OAAAA,KAAAV,KAAAU,KAAAC,KAAAR,OAAAC,eAAAH,OAAAK,IAAAI,MAAAT,OAAAK,KAAAd,IAAAc,IAAAL,CAAAA,OAAAL,QAAAJ,IAAAK,OAAAA,MAAAc,IAAAnB,IAAAS,eAAAA,MAAA,CADnCW,CAAAnB,KACAoB,UAAmCrB,IAAnCqB,WAAmCrB,IAAAG,WAAAH,IAAAI,CAAAA,QAAAJ,KAAA,IAAAsB,yCAAA,oBAAAC,OAAAA,OAAA,oBAAAC,KAAAA,KAAA,oBAAAC,OAAAA,OAAA,CAAA,EAAA,SAAAnB,yBAAAJ,aAAA,GAAA,mBAAAwB,QAAA,OAAA,KAAA,IAAAC,kBAAAD,IAAAA,QAAAE,iBAAAF,IAAAA,eAAApB,yBAAA,SAAAJ,aAAAA,OAAAA,YAAA0B,iBAAAD,oBAAAzB,YAAA,CAKnC,IAAI2B,YAAa,EAajB,MAAMC,eAAiBA,CAACC,QAASC,KAAMC,QAC/BF,QAAOG,GAAAA,OAAIF,MAAIE,OAAGD,MAAK,QAChBhC,IAAIkC,WAAWC,MAAM,KAAMC,KAAKC,MAAMP,QAAO,GAAAG,OAAIF,MAAIE,OAAGD,MAAW,UAEvEM,QAAQC,QAAQT,QAAOG,GAAAA,OAAIF,MAAIE,OAAGD,SAWvCQ,oBAAsBA,CAACC,OAAQV,QAC1B,EAAAW,cAAiBA,mBACpBb,eAAeY,OAAOX,QAASC,KAAM,SACrCF,eAAeY,OAAOX,QAASC,KAAM,WACrCF,eAAeY,OAAOX,QAASC,KAAM,cAExCY,MAAK,KACF,GAAuC,SAAnCF,OAAOX,QAAOG,GAAAA,OAAIF,KAAI,UAAqB,CAC3C,MAAMa,eAAiBf,eAAeY,OAAOX,QAASC,KAAM,qBAC9B,iBAAnBa,gBACP,EAAAC,OAAAA,KAASD,gBAETA,eAAeD,MAAKG,MAAO,EAAAD,OAAAA,KAASC,OAAMC,OAAMC,IAAK,EAAAC,cAASA,WAACD,IAEvE,CACA1B,OAAO4B,SAASC,KAAOV,OAAOX,QAAOG,GAAAA,OAAIF,KAAkB,eAC3D,IACDgB,OAAM,KACL,IA8DHnB,aAzBiCwB,MAClCC,SAASC,iBAAiB,SAASN,IAC/B,MAAMO,eAAiBP,EAAEQ,OAAOC,QAAQ,+BACpCF,iBACAP,EAAEU,iBACFlB,oBAAoBe,eAAgB,iBAGxC,MAAMI,kBAAoBX,EAAEQ,OAAOC,QAAQ,+BACvCE,oBACAX,EAAEU,iBACFlB,oBAAoBmB,kBAAmB,UAG3C,MAAMC,aAAeZ,EAAEQ,OAAOC,QAAQ,wBAClCG,eACAZ,EAAEU,iBAzCOG,OAAMC,MAAOC,WAC9B,MAAMC,eAAiB,IAAIC,SAAO9D,QAAC,sBAE7B+D,mBAAe7C,mBAAAA,yCAAA8C,QAAA9C,yCAAA8C,OAAAC,IAAA,IAAA9B,SAAAC,SAAAA,QAAA8B,QAAAhD,yCAAAiD,QAAA/B,CAAAA,sBAAAA,QAAA8B,OAAA,IAAAE,oBAAAA,QAAAA,OAAAC,SAAA,oBAAAF,SAAA,oBAAAC,QAAAA,OAAAE,WAAApD,yCAAAiD,SAAAhC,cAAAjB,yCAAAiD,QAAAI,OAAApC,QAAAC,QAAA+B,QAAA,uBAAiChC,QAAAC,QAAAlB,yCAAC,wBAEhD6C,aAAaS,OAAO,CACvB5C,KAAMmC,aAAaU,MAAMC,MACzBf,MAAOA,MACPgB,KAAMf,QACNgB,eAAe,IAElBpC,MAAK,SAASqC,OAIX,OAHAA,MAAMC,OACNjB,eAAezB,UAERyC,KACX,GAAE,EA0BME,CACIrD,eAAe+B,aAAa9B,QAAS,QAAS,SAC9CD,eAAe+B,aAAa9B,QAAS,QAAS,YAEtD,GACF,EAIFsB,GACAxB,YAAa,EAChB"}