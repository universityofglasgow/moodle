{"version":3,"file":"commands.min.js","sources":["../src/commands.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Commands helper for the Moodle tiny_generico plugin.\n *\n * @module      tiny_generico/commands\n * @copyright   2023 Justin Hunt <justin@poodll.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getButtonImage} from 'editor_tiny/utils';\nimport {get_string as getString} from 'core/str';\nimport {\n    component,\n    widgetsButtonName,\n    widgetsMenuItemName\n} from './common';\nimport widget_selector from './widget_selector';\nimport {getConfig} from \"./options\";\n\n/**\n * Handle the action for your plugin.\n * @param {TinyMCE.editor} editor The tinyMCE editor instance.\n */\nconst handleAction = (editor) => {\n    // TODO Handle the action.\n    window.console.log(editor);\n};\n\n/**\n * Get the setup function for the buttons.\n *\n * This is performed in an async function which ultimately returns the registration function as the\n * Tiny.AddOnManager.Add() function does not support async functions.\n *\n * @returns {function} The registration function to call within the Plugin.add function.\n */\nexport const getSetup = async() => {\n    const [\n        widgetsButtonNameTitle,\n        widgetsMenuItemNameTitle,\n        widgetsIcon,\n    ] = await Promise.all([\n        getString('button_widgets', component),\n        getString('menuitem_widgets', component),\n        getButtonImage('widgets', component),\n    ]);\n\n    return (editor) => {\n\n\n        // Register the Moodle SVG as an icon suitable for use as a TinyMCE toolbar button.\n        editor.ui.registry.addIcon('genericowidgetsicon', widgetsIcon.html);\n\n        // Register the widgets icon if its not disabled (via permissions)\n        var config = getConfig(editor);\n        if(!config.disabled) {\n\n            // Register the widgets Toolbar Button.\n            editor.ui.registry.addButton(widgetsButtonName, {\n                icon: 'genericowidgetsicon',\n                tooltip: widgetsButtonNameTitle,\n                onAction: () => widget_selector.display(editor),\n            });\n\n            // Add the widgets Menu Item.\n            // This allows it to be added to a standard menu, or a context menu.\n            editor.ui.registry.addMenuItem(widgetsMenuItemName, {\n                icon: 'genericowidgetsicon',\n                text: widgetsMenuItemNameTitle,\n                onAction: () => widget_selector.display(editor),\n            });\n        }\n    };\n};\n"],"names":["async","widgetsButtonNameTitle","widgetsMenuItemNameTitle","widgetsIcon","Promise","all","component","editor","ui","registry","addIcon","html","disabled","addButton","widgetsButtonName","icon","tooltip","onAction","widget_selector","display","addMenuItem","widgetsMenuItemName","text"],"mappings":";;;;;;;kLAkDwBA,gBAEhBC,uBACAC,yBACAC,mBACMC,QAAQC,IAAI,EAClB,mBAAU,iBAAkBC,oBAC5B,mBAAU,mBAAoBA,oBAC9B,yBAAe,UAAWA,4BAGtBC,SAIJA,OAAOC,GAAGC,SAASC,QAAQ,sBAAuBP,YAAYQ,OAGjD,sBAAUJ,QACZK,WAGPL,OAAOC,GAAGC,SAASI,UAAUC,0BAAmB,CAC5CC,KAAM,sBACNC,QAASf,uBACTgB,SAAU,IAAMC,yBAAgBC,QAAQZ,UAK5CA,OAAOC,GAAGC,SAASW,YAAYC,4BAAqB,CAChDN,KAAM,sBACNO,KAAMpB,yBACNe,SAAU,IAAMC,yBAAgBC,QAAQZ"}