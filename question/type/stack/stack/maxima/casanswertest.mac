/* This file contains functions used to wrap previously PHP side portions of
   answertest processing over the existing CAS side logic to allow those tests
   to be executed fully on CAS side. Some of this logic relies on the raw string
   values of student inputs being available. */


/* These are essentially the old atnumsigfigs.class.php with some validation happening outside this. */
ATNumSigFigs_CASSigFigsWrapper(sans,tans,options,rawsans) := block([allowextra,requiredsigfigs,requiredaccuracy,digits,result,Validity,RawMark,FeedBack,AnswerNote],
    /* The return value */
    Validity: true,
    RawMark: true,
    FeedBack: "",
    AnswerNote: "",

    /* First unpack the options. */
    /*  Note, in this test we first define the required number of significant digits,
        no more no less, we may also define a second parameter that provides three
        ways of function.

         First for positive values, it defines the number of those significant digits
         that need to match the correct ones. Makes no sense for this to be bigger than
         the number of required digits.

         Second for zero value it means that we do not care about the value only of the
         form i.e. you can input any digits you want as long as they can be interpreted
         as the correct number of significant digits.

         Third for the special value of -1 it defines that we allow more significant
         digits than what we require and that the value must match for those we require.
    */
    requiredsigfigs: 3,
    requiredaccuracy: -1,
    allowextra: false,

    if listp(options) then (
        requiredsigfigs: options[1],
        requiredaccuracy: options[2]
    ) else (
        requiredsigfigs: options,
        requiredaccuracy: options
    ),

    if ev(is(requiredaccuracy = -1),simp) then (
        allowextra: true,
        requiredaccuracy: requiredsigfigs
    ),

    /* What if the options do not make sense? */
    /* Note that the options may now be dynamic and evaluated in CAS. */
    if requiredsigfigs <= 0 or requiredaccuracy < 0 or not integerp(requiredsigfigs) or not integerp(requiredaccuracy) then (
        return([false, false, "STACKERROR_OPTION.", ""])
    ),

    /* Find the number of digits. */
    digits: sig_figs_from_str(rawsans),

    if allowextra = true then (
        if requiredsigfigs > stackmap_get(digits, "upperbound") then (
            AnswerNote: StackAddNote(AnswerNote, "ATNumSigFigs_WrongDigits"),
            FeedBack: StackAddFeedback(FeedBack, "ATNumSigFigs_WrongDigits"),
            RawMark: false
        ),
        /* If excessive digits allowed and provided they better be correct. */
        requiredaccuracy:stackmap_get(digits, "upperbound")
    ) else (
        if requiredsigfigs = stackmap_get(digits, "lowerbound") then (
            RawMark: true
        ) else if stackmap_get(digits, "lowerbound") <= requiredsigfigs and requiredsigfigs <= stackmap_get(digits, "upperbound") then (
            AnswerNote: StackAddNote(AnswerNote, "ATNumSigFigs_WithinRange"),
            RawMark: true
        ) else (
            AnswerNote: StackAddNote(AnswerNote, "ATNumSigFigs_WrongDigits"),
            FeedBack: StackAddFeedback(FeedBack, "ATNumSigFigs_WrongDigits"),
            RawMark: false
        )
    ),

    /* Now that digits are clear continue to check the accuracy. Or not. */
    if requiredaccuracy # 0 then (
        result: ATNumSigFigs(sans,tans,options),
        Validity: Validity and result[1],
        RawMark: RawMark and result[2],
        if result[3] # "" then (
            AnswerNote: sconcat(AnswerNote, result[3])
        ),
        if result[4] # "" then (
            FeedBack: sconcat(FeedBack, result[4])
        )
    ),

    return([Validity, RawMark, AnswerNote, FeedBack])
)$


ATSigFigsStrict_CASSigFigsWrapper(requiredsigfigs,rawsans) := block([digits,Validity,RawMark,FeedBack,AnswerNote],
    /* The return value */
    Validity: true,
    RawMark: false,
    FeedBack: "",
    AnswerNote: "",

    /* What if the options do not make sense? */
    /* Note that the options may now be dynamic and evaluated in CAS. */
    if requiredsigfigs <= 0 or not integerp(requiredsigfigs) then (
        return([false, false, "STACKERROR_OPTION.", ""])
    ),

    /* Find the number of digits. */
    digits: sig_figs_from_str(rawsans),

    if requiredsigfigs = stackmap_get(digits, "lowerbound") then (
        RawMark: true
    ) else if stackmap_get(digits, "lowerbound") <= requiredsigfigs and requiredsigfigs <= stackmap_get(digits, "upperbound") then (
        AnswerNote: StackAddNote(AnswerNote, "ATSigFigsStrict_WithinRange")
    ),

    return([Validity, RawMark, AnswerNote, FeedBack])
)$

ATUnitsSigFigs_CASSigFigsWrapper(sans,tans,options,rawsans,strict) :=  block([tmp1, tmp2, tmp3, tmp4],
    /* First the units and value */
    tmp1: ATUnitsFun(sans, tans, options, strict, "SigFigs"),

    /* If we do not have valid stuff for units tests we better drop out now. */
    if is(tmp1[1] = false) then return(tmp1),

    /* We need to convert the numbers into the same base. Also must be very careful when to simplify. */
    tmp3:float(stack_units_nums(stack_unit_si_to_si_base(sans))),
    tmp4:float(stack_units_nums(stack_unit_si_to_si_base(tans))),
    tmp3:ev(tmp3,simp),
    tmp4:ev(tmp4,simp),

    /* Then check the figures */
    tmp2: ATNumSigFigs_CASSigFigsWrapper(tmp3,tmp4,options,rawsans),
    
    /* Merge*/
    return([tmp1[1] and tmp2[1], tmp1[2] and tmp2[2], sconcat(tmp1[3],tmp2[3]), sconcat(tmp1[4],tmp2[4])])
)$

ATNumDecPlaces_CASDecPlacesWrapper(sans,tans,options,rawsans) := block([digits,Validity,RawMark,FeedBack,AnswerNote,required,val],
    Validity: true,
    RawMark: true,
    FeedBack: "",
    AnswerNote: "",

    /* First check if the students answer is a float. */
    if not ev(floatnump(sans),simp) then (
        AnswerNote: StackAddNote(AnswerNote, "ATNumDecPlaces_SA_Not_num"),
        FeedBack: StackAddFeedback(FeedBack, "ATNumDecPlaces_Float"),
        RawMark: false,
        Validity: false
    ),

    /* Now many digits needed? */
    required: ev(options,numer,simp),

    if not integerp(required) or is(required<1) then (
        AnswerNote: StackAddNote(AnswerNote, "ATNumDecPlaces_STACKERROR_Option"),
        FeedBack: StackAddFeedback(FeedBack, "ATNumDecPlaces_OptNotInt"),
        RawMark: false,
        Validity: false
    ),

    if Validity then (
        /* Find the number of digits. */
        digits: sig_figs_from_str(rawsans),

        /* Does it match the number of digits? */
        if is(stackmap_get(digits, "decimalplaces")=required) then (
            AnswerNote: StackAddNote(AnswerNote, "ATNumDecPlaces_Correct")
        ) else (
            AnswerNote: StackAddNote(AnswerNote, "ATNumDecPlaces_Wrong_DPs"),
            FeedBack: StackAddFeedback(FeedBack, "ATNumDecPlaces_Wrong_DPs"),
            RawMark: false
        ),

        /* Then the actual value. Simply round to required and
           then check the difference. */
        val: ev(float(round(sans*10^required)),simp),
        val: ev(val - ev(float(round(remove_displaydp(tans)*10^required)),simp),simp),
        val: ev(abs(val),simp),
        if is(val < 0.1) then (
            AnswerNote: StackAddNote(AnswerNote, "ATNumDecPlaces_Equiv")
        ) else (
            AnswerNote: StackAddNote(AnswerNote, "ATNumDecPlaces_Not_equiv"),
            RawMark: false
        )
    ),

    return([Validity, RawMark, AnswerNote, FeedBack])
)$


ATDecimalPlacesWrong(sans,tans,options) := block([Validity,RawMark,FeedBack,AnswerNote,_sans,_tans,required],
    Validity: true,
    RawMark: true,
    FeedBack: "",
    AnswerNote: "",

    /* First check if the students answer is a number. */
    if not ev(numberp(sans),simp) then (
        AnswerNote: StackAddNote(AnswerNote, "ATNumDecPlacesWrong_SA_Not_num"),
        FeedBack: StackAddFeedback(FeedBack, "ATNumDecPlaces_Float"),
        RawMark: false,
        Validity: false
    ),
    /* Also teachers answer. */
    if not ev(numberp(remove_displaydp(tans)),simp) then (
        AnswerNote: StackAddNote(AnswerNote, "ATNumDecPlacesWrong_Tans_Not_Num"),
        RawMark: false,
        Validity: false
    ),

    /* Now many digits needs to match? */
    required: ev(options,numer,simp),

    if not integerp(required) or is(required<1) then (
        AnswerNote: StackAddNote(AnswerNote, "ATNumDecPlacesWrong_STACKERROR_Option"),
        FeedBack: StackAddFeedback(FeedBack, "ATNumDecPlaces_OptNotInt"),
        RawMark: false,
        Validity: false
    ),

    if Validity then (
        /* Shift the values to same range and cut to the required
           match length. */
        _sans:ev(sans,numer),
        _tans:ev(remove_displaydp(tans),numer),

        /* Special case, if either one is 0. */
        if is(_sans=0) or is(_sans=0.0) or is(_tans=0) or is(_tans=0.0) then (
            RawMark: ev(is(_sans-_tans < 10^-required),numer,simp),
            if RawMark then (
                AnswerNote: StackAddNote(AnswerNote, "ATNumDecPlacesWrong_Correct")
            ) else (
                AnswerNote: StackAddNote(AnswerNote, "ATNumDecPlacesWrong_Wrong")
            ),
            return([Validity, RawMark, AnswerNote, FeedBack])
        ),

        /* Now that log(0) has been handled shift the numbers */
        _sans:ev(_sans*10^floor(-log(abs(_sans))/log(10)+required),numer,simp),
        _tans:ev(_tans*10^floor(-log(abs(_tans))/log(10)+required),numer,simp),

        /* Truncate extras. */
        _sans:floor(_sans),
        _tans:floor(_tans),

        RawMark: ev(is(abs(_sans-_tans) < 0.1),numer,simp),
        if RawMark then (
            AnswerNote: StackAddNote(AnswerNote, "ATNumDecPlacesWrong_Correct")
        ) else (
            AnswerNote: StackAddNote(AnswerNote, "ATNumDecPlacesWrong_Wrong")
        )
    ),

    return([Validity, RawMark, AnswerNote, FeedBack])
)$