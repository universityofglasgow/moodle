{"version":3,"file":"str.min.js","sources":["../src/str.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Fetch and return language strings.\n *\n * @module     core/str\n * @copyright  2015 Damyon Wiese <damyon@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since      2.9\n *\n */\nimport $ from 'jquery';\nimport Ajax from 'core/ajax';\nimport LocalStorage from 'core/localstorage';\n\n// Module cache for the promises so that we don't make multiple\n// unnecessary requests.\nlet promiseCache = [];\n\n/* eslint-disable no-restricted-properties */\n\n/**\n * Return a Promise that resolves to a string.\n *\n * If the string has previously been cached, then the Promise will be resolved immediately, otherwise it will be fetched\n * from the server and resolved when available.\n *\n * @method get_string\n * @param {string} key The language string key\n * @param {string} component The language string component\n * @param {string} param The param for variable expansion in the string.\n * @param {string} lang The users language - if not passed it is deduced.\n * @return {Promise}\n *\n * @example <caption>Fetching a string</caption>\n *\n * import {get_string as getString} from 'core/str';\n * get_string('cannotfindteacher', 'error')\n * .then(str => {\n *     window.console.log(str); // Cannot find teacher\n * })\n * .catch();\n */\n// eslint-disable-next-line camelcase\nexport const get_string = (key, component, param, lang) => {\n    return get_strings([{key, component, param, lang}])\n        .then(results => results[0]);\n};\n\n/**\n * Make a batch request to load a set of strings.\n *\n * Any missing string will be fetched from the server.\n * The Promise will only be resolved once all strings are available, or an attempt has been made to fetch them.\n *\n * @method get_strings\n * @param {Object[]} requests List of strings to fetch\n * @param {string} requests.key The string identifer to fetch\n * @param {string} [requests.component='core'] The componet to fetch from\n * @param {string} [requests.lang] The language to fetch a string for. Defaults to current page language.\n * @param {object|string} [requests.param] The param for variable expansion in the string.\n * @return {Promise[]}\n *\n * @example <caption>Fetching a set of strings</caption>\n *\n * import {get_strings as getStrings} from 'core/str';\n * get_strings([\n *     {\n *         key: 'cannotfindteacher',\n *         component: 'error',\n *     },\n *     {\n *         key: 'yes',\n *         component: 'core',\n *     },\n *     {\n *         key: 'no',\n *         component: 'core',\n *     },\n * ])\n * .then((cannotFindTeacher, yes, no) => {\n *     window.console.log(cannotFindTeacher); // Cannot find teacher\n *     window.console.log(yes); // Yes\n *     window.console.log(no); // No\n * })\n * .catch();\n */\n// eslint-disable-next-line camelcase\nexport const get_strings = (requests) => {\n    let requestData = [];\n    const pageLang = $('html').attr('lang').replace(/-/g, '_');\n\n    // Helper function to construct the cache key.\n    const getCacheKey = ({key, component, lang = pageLang}) => `core_str/${key}/${component}/${lang}`;\n\n    const stringPromises = requests.map((request) => {\n        let {component, key, param, lang = pageLang} = request;\n        if (!component) {\n            component = 'core';\n        }\n\n        const cacheKey = getCacheKey({key, component, lang});\n\n        // Helper function to add the promise to cache.\n        const buildReturn = (promise) => {\n            // Make sure the promise cache contains our promise.\n            promiseCache[cacheKey] = promise;\n            return promise;\n        };\n\n        // Check if we can serve the string straight from M.str.\n        if (component in M.str && key in M.str[component]) {\n            return buildReturn(new Promise((resolve) => {\n                resolve(M.util.get_string(key, component, param, lang));\n            }));\n        }\n\n        // Check if the string is in the browser's local storage.\n        const cached = LocalStorage.get(cacheKey);\n        if (cached) {\n            M.str[component] = {...M.str[component], [key]: cached};\n            return buildReturn(new Promise((resolve) => {\n                resolve(M.util.get_string(key, component, param, lang));\n            }));\n        }\n\n        // Check if we've already loaded this string from the server.\n        if (cacheKey in promiseCache) {\n            return buildReturn(promiseCache[cacheKey]).then(() => {\n                return M.util.get_string(key, component, param, lang);\n            });\n        } else {\n            // We're going to have to ask the server for the string so\n            // add this string to the list of requests to be sent.\n            return buildReturn(new Promise((resolve, reject) => {\n                requestData.push({\n                    methodname: 'core_get_string',\n                    args: {\n                        stringid: key,\n                        stringparams: [],\n                        component,\n                        lang,\n                    },\n                    done: (str) => {\n                        // When we get the response from the server\n                        // we should update M.str and the browser's\n                        // local storage before resolving this promise.\n                        M.str[component] = {...M.str[component], [key]: str};\n                        LocalStorage.set(cacheKey, str);\n                        resolve(M.util.get_string(key, component, param, lang));\n                    },\n                    fail: reject\n                });\n            }));\n        }\n    });\n\n    if (requestData.length) {\n        // If we need to load any strings from the server then send\n        // off the request.\n        Ajax.call(requestData, true, false, false, 0, M.cfg.langrev);\n    }\n\n    // We need to use jQuery here because some calling code uses the\n    // .done handler instead of the .then handler.\n    return $.when.apply($, stringPromises)\n        .then((...strings) => strings);\n};\n\n/**\n * Add a list of strings to the caches.\n *\n * This function should typically only be called from core APIs to pre-cache values.\n *\n * @method cache_strings\n * @protected\n * @param {Object[]} strings List of strings to fetch\n * @param {string} strings.key The string identifer to fetch\n * @param {string} strings.value The string value\n * @param {string} [strings.component='core'] The componet to fetch from\n * @param {string} [strings.lang] The language to fetch a string for. Defaults to current page language.\n */\n// eslint-disable-next-line camelcase\nexport const cache_strings = (strings) => {\n    const defaultLang = $('html').attr('lang').replace(/-/g, '_');\n\n    strings.forEach(({key, component, value, lang = defaultLang}) => {\n        const cacheKey = ['core_str', key, component, lang].join('/');\n\n        // Check M.str caching.\n        if (!(component in M.str) || !(key in M.str[component])) {\n            if (!(component in M.str)) {\n                M.str[component] = {};\n            }\n\n            M.str[component][key] = value;\n        }\n\n        // Check local storage.\n        if (!LocalStorage.get(cacheKey)) {\n            LocalStorage.set(cacheKey, value);\n        }\n\n        // Check the promises cache.\n        if (!(cacheKey in promiseCache)) {\n            promiseCache[cacheKey] = $.Deferred().resolve(value).promise();\n        }\n    });\n};\n/* eslint-enable no-restricted-properties */\n"],"names":["_interopRequireDefault","obj","__esModule","default","_jquery","_ajax","_localstorage","promiseCache","_exports","get_string","key","component","param","lang","get_strings","then","results","requests","requestData","pageLang","$","attr","replace","stringPromises","map","request","cacheKey","_ref","concat","getCacheKey","buildReturn","promise","M","str","Promise","resolve","util","cached","LocalStorage","get","reject","push","methodname","args","stringid","stringparams","done","set","fail","length","Ajax","call","cfg","langrev","when","apply","_len","arguments","strings","Array","_key","cache_strings","defaultLang","forEach","_ref2","value","join","Deferred"],"mappings":"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"}