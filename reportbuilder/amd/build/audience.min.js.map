{"version":3,"file":"audience.min.js","sources":["../src/audience.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Report builder audiences\n *\n * @module      core_reportbuilder/audience\n * @copyright   2021 David Matamoros <davidmc@moodle.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n\"use strict\";\n\nimport 'core/inplace_editable';\nimport Templates from 'core/templates';\nimport Notification from 'core/notification';\nimport Pending from 'core/pending';\nimport {prefetchStrings} from 'core/prefetch';\nimport {get_string as getString} from 'core/str';\nimport DynamicForm from 'core_form/dynamicform';\nimport {add as addToast} from 'core/toast';\nimport {deleteAudience} from 'core_reportbuilder/local/repository/audiences';\nimport * as reportSelectors from 'core_reportbuilder/local/selectors';\nimport {loadFragment} from 'core/fragment';\nimport {markFormAsDirty} from 'core_form/changechecker';\n\nlet reportId = 0;\nlet contextId = 0;\n\n/**\n * Add audience card\n *\n * @param {String} className\n * @param {String} title\n */\nconst addAudienceCard = (className, title) => {\n    const pendingPromise = new Pending('core_reportbuilder/audience:add');\n\n    const audiencesContainer = document.querySelector(reportSelectors.regions.audiencesContainer);\n    const audienceCardLength = audiencesContainer.querySelectorAll(reportSelectors.regions.audienceCard).length;\n\n    const params = {\n        classname: className,\n        reportid: reportId,\n        showormessage: (audienceCardLength > 0),\n        title: title,\n    };\n\n    // Load audience card fragment, render and then initialise the form within.\n    loadFragment('core_reportbuilder', 'audience_form', contextId, params)\n        .then((html, js) => {\n            const audienceCard = Templates.appendNodeContents(audiencesContainer, html, js)[0];\n            const audienceEmptyMessage = audiencesContainer.querySelector(reportSelectors.regions.audienceEmptyMessage);\n\n            const audienceForm = initAudienceCardForm(audienceCard);\n            // Mark as dirty new audience form created to prevent users leaving the page without saving it.\n            markFormAsDirty(audienceForm.getFormNode());\n            audienceEmptyMessage.classList.add('hidden');\n\n            return getString('audienceadded', 'core_reportbuilder', title);\n        })\n        .then(addToast)\n        .then(() => pendingPromise.resolve())\n        .catch(Notification.exception);\n};\n\n/**\n * Edit audience card\n *\n * @param {Element} audienceCard\n */\nconst editAudienceCard = audienceCard => {\n    const pendingPromise = new Pending('core_reportbuilder/audience:edit');\n\n    // Load audience form with data for editing, then toggle visible controls in the card.\n    const audienceForm = initAudienceCardForm(audienceCard);\n    audienceForm.load({id: audienceCard.dataset.instanceid})\n        .then(() => {\n            const audienceFormContainer = audienceCard.querySelector(reportSelectors.regions.audienceFormContainer);\n            const audienceDescription = audienceCard.querySelector(reportSelectors.regions.audienceDescription);\n            const audienceEdit = audienceCard.querySelector(reportSelectors.actions.audienceEdit);\n\n            audienceFormContainer.classList.remove('hidden');\n            audienceDescription.classList.add('hidden');\n            audienceEdit.disabled = true;\n\n            return pendingPromise.resolve();\n        })\n        .catch(Notification.exception);\n};\n\n/**\n * Initialise dynamic form within given audience card\n *\n * @param {Element} audienceCard\n * @return {DynamicForm}\n */\nconst initAudienceCardForm = audienceCard => {\n    const audienceFormContainer = audienceCard.querySelector(reportSelectors.regions.audienceFormContainer);\n    const audienceForm = new DynamicForm(audienceFormContainer, '\\\\core_reportbuilder\\\\form\\\\audience');\n\n    // After submitting the form, update the card instance and description properties.\n    audienceForm.addEventListener(audienceForm.events.FORM_SUBMITTED, data => {\n        const audienceHeading = audienceCard.querySelector(reportSelectors.regions.audienceHeading);\n        const audienceDescription = audienceCard.querySelector(reportSelectors.regions.audienceDescription);\n\n        audienceCard.dataset.instanceid = data.detail.instanceid;\n\n        audienceHeading.innerHTML = data.detail.heading;\n        audienceDescription.innerHTML = data.detail.description;\n\n        closeAudienceCardForm(audienceCard);\n\n        return getString('audiencesaved', 'core_reportbuilder')\n            .then(addToast);\n    });\n\n    // If cancelling the form, close the card or remove it if it was never created.\n    audienceForm.addEventListener(audienceForm.events.FORM_CANCELLED, () => {\n        if (audienceCard.dataset.instanceid > 0) {\n            closeAudienceCardForm(audienceCard);\n        } else {\n            removeAudienceCard(audienceCard);\n        }\n    });\n\n    return audienceForm;\n};\n\n/**\n * Delete audience card\n *\n * @param {Element} audienceDelete\n */\nconst deleteAudienceCard = audienceDelete => {\n    const audienceCard = audienceDelete.closest(reportSelectors.regions.audienceCard);\n    const audienceTitle = audienceCard.dataset.title;\n\n    Notification.saveCancelPromise(\n        getString('deleteaudience', 'core_reportbuilder', audienceTitle),\n        getString('deleteaudienceconfirm', 'core_reportbuilder', audienceTitle),\n        getString('delete', 'core'),\n        {triggerElement: audienceDelete}\n    ).then(() => {\n        const pendingPromise = new Pending('core_reportbuilder/audience:delete');\n\n        return deleteAudience(reportId, audienceCard.dataset.instanceid)\n            .then(() => addToast(getString('audiencedeleted', 'core_reportbuilder', audienceTitle)))\n            .then(() => {\n                removeAudienceCard(audienceCard);\n                return pendingPromise.resolve();\n            })\n            .catch(Notification.exception);\n    }).catch(() => {\n        return;\n    });\n};\n\n/**\n * Close audience card form\n *\n * @param {Element} audienceCard\n */\nconst closeAudienceCardForm = audienceCard => {\n    // Remove the [data-region=\"audience-form-container\"] (with all the event listeners attached to it), and create it again.\n    const audienceFormContainer = audienceCard.querySelector(reportSelectors.regions.audienceFormContainer);\n    const NewAudienceFormContainer = audienceFormContainer.cloneNode(false);\n    audienceCard.querySelector(reportSelectors.regions.audienceForm).replaceChild(NewAudienceFormContainer, audienceFormContainer);\n    // Show the description container and enable the action buttons.\n    audienceCard.querySelector(reportSelectors.regions.audienceDescription).classList.remove('hidden');\n    audienceCard.querySelector(reportSelectors.actions.audienceEdit).disabled = false;\n    audienceCard.querySelector(reportSelectors.actions.audienceDelete).disabled = false;\n};\n\n/**\n * Remove audience card\n *\n * @param {Element} audienceCard\n */\nconst removeAudienceCard = audienceCard => {\n    audienceCard.remove();\n\n    const audiencesContainer = document.querySelector(reportSelectors.regions.audiencesContainer);\n    const audienceCards = audiencesContainer.querySelectorAll(reportSelectors.regions.audienceCard);\n\n    // Show message if there are no cards remaining, ensure first card's separator is not present.\n    if (audienceCards.length === 0) {\n        const audienceEmptyMessage = document.querySelector(reportSelectors.regions.audienceEmptyMessage);\n        audienceEmptyMessage.classList.remove('hidden');\n    } else {\n        const audienceFirstCardSeparator = audienceCards[0].querySelector('.audience-separator');\n        audienceFirstCardSeparator?.remove();\n    }\n};\n\nlet initialized = false;\n\n/**\n * Initialise audiences tab.\n *\n * @param {Number} id\n * @param {Number} contextid\n */\nexport const init = (id, contextid) => {\n    prefetchStrings('core_reportbuilder', [\n        'audienceadded',\n        'audiencedeleted',\n        'audiencesaved',\n        'deleteaudience',\n        'deleteaudienceconfirm',\n    ]);\n\n    prefetchStrings('core', [\n        'delete',\n    ]);\n\n    reportId = id;\n    contextId = contextid;\n\n    if (initialized) {\n        // We already added the event listeners (can be called multiple times by mustache template).\n        return;\n    }\n\n    document.addEventListener('click', event => {\n\n        // Add instance.\n        const audienceAdd = event.target.closest(reportSelectors.actions.audienceAdd);\n        if (audienceAdd) {\n            event.preventDefault();\n            addAudienceCard(audienceAdd.dataset.uniqueIdentifier, audienceAdd.dataset.name);\n        }\n\n        // Edit instance.\n        const audienceEdit = event.target.closest(reportSelectors.actions.audienceEdit);\n        if (audienceEdit) {\n            const audienceEditCard = audienceEdit.closest(reportSelectors.regions.audienceCard);\n\n            event.preventDefault();\n            editAudienceCard(audienceEditCard);\n        }\n\n        // Delete instance.\n        const audienceDelete = event.target.closest(reportSelectors.actions.audienceDelete);\n        if (audienceDelete) {\n            event.preventDefault();\n            deleteAudienceCard(audienceDelete);\n        }\n    });\n\n    initialized = true;\n};\n"],"names":["_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","_exports","value","init","_templates","_notification","_pending","_dynamicform","reportSelectors","cache","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_interopRequireWildcard","reportId","contextId","initAudienceCardForm","audienceCard","audienceFormContainer","querySelector","regions","audienceForm","DynamicForm","addEventListener","events","FORM_SUBMITTED","data","audienceHeading","audienceDescription","dataset","instanceid","detail","innerHTML","heading","description","closeAudienceCardForm","getString","get_string","then","addToast","FORM_CANCELLED","removeAudienceCard","NewAudienceFormContainer","cloneNode","replaceChild","classList","remove","actions","audienceEdit","disabled","audienceDelete","audienceCards","document","audiencesContainer","querySelectorAll","length","audienceEmptyMessage","audienceFirstCardSeparator","initialized","id","contextid","prefetchStrings","event","audienceAdd","target","closest","preventDefault","addAudienceCard","className","title","pendingPromise","Pending","audienceCardLength","params","classname","reportid","showormessage","loadFragment","html","js","Templates","appendNodeContents","markFormAsDirty","getFormNode","add","resolve","catch","Notification","exception","uniqueIdentifier","name","audienceEditCard","load","editAudienceCard","audienceTitle","saveCancelPromise","triggerElement","deleteAudience","deleteAudienceCard"],"mappings":"2dAkCsE,SAAAA,yBAAAC,aAAA,GAAA,mBAAAC,QAAA,OAAA,KAAA,IAAAC,kBAAAD,IAAAA,QAAAE,iBAAAF,IAAAA,eAAAF,yBAAA,SAAAC,aAAAA,OAAAA,YAAAG,iBAAAD,oBAAAF,YAAA,CAAA,SAAAI,uBAAAC,KAAAA,OAAAA,KAAAA,IAAAC,WAAAD,IAAAE,CAAAA,QAAAF,IAAA,CAXzDG,OAAAC,eAAAC,SAAA,aAAA,CAAAC,OAAA,IAAAD,SAAAE,UAAA,EAGbC,WAAAT,uBAAAS,YACAC,cAAAV,uBAAAU,eACAC,SAAAX,uBAAAW,UAGAC,aAAAZ,uBAAAY,cAGAC,gBAAsE,SAAAZ,IAAAL,aAAAA,IAAAA,aAAAK,KAAAA,IAAAC,WAAAD,OAAAA,IAAAA,GAAAA,OAAAA,KAAAA,iBAAAA,KAAAE,mBAAAF,IAAAE,MAAAA,CAAAA,QAAAF,KAAAa,IAAAA,MAAAnB,yBAAAC,aAAA,GAAAkB,OAAAA,MAAAC,IAAAd,KAAA,OAAAa,MAAAE,IAAAf,KAAA,IAAAgB,OAAAC,GAAAA,sBAAAd,OAAAC,gBAAAD,OAAAe,yBAAAC,IAAAA,IAAAA,OAAAnB,IAAAmB,eAAAA,KAAAhB,OAAAiB,UAAAC,eAAAC,KAAAtB,IAAAmB,KAAA,CAAA,IAAAI,KAAAN,sBAAAd,OAAAe,yBAAAlB,IAAAmB,KAAAI,KAAAA,OAAAA,KAAAR,KAAAQ,KAAAC,KAAArB,OAAAC,eAAAY,OAAAG,IAAAI,MAAAP,OAAAG,KAAAnB,IAAAmB,IAAAH,CAAAA,OAAAd,QAAAF,IAAAa,OAAAA,MAAAW,IAAAxB,IAAAgB,eAAAA,MAAA,CAAtES,CAAAb,iBAIA,IAAIc,SAAW,EACXC,UAAY,EAQhB,MA8DMC,qBAAuBC,eACzB,MAAMC,sBAAwBD,aAAaE,cAAcnB,gBAAgBoB,QAAQF,uBAC3EG,aAAe,IAAIC,aAAAA,QAAYJ,sBAAuB,wCA2B5D,OAxBAG,aAAaE,iBAAiBF,aAAaG,OAAOC,gBAAgBC,OAC9D,MAAMC,gBAAkBV,aAAaE,cAAcnB,gBAAgBoB,QAAQO,iBACrEC,oBAAsBX,aAAaE,cAAcnB,gBAAgBoB,QAAQQ,qBAS/E,OAPAX,aAAaY,QAAQC,WAAaJ,KAAKK,OAAOD,WAE9CH,gBAAgBK,UAAYN,KAAKK,OAAOE,QACxCL,oBAAoBI,UAAYN,KAAKK,OAAOG,YAE5CC,sBAAsBlB,eAEf,EAAAmB,KAASC,YAAC,gBAAiB,sBAC7BC,KAAKC,OAAAA,IAAS,IAIvBlB,aAAaE,iBAAiBF,aAAaG,OAAOgB,gBAAgB,KAC1DvB,aAAaY,QAAQC,WAAa,EAClCK,sBAAsBlB,cAEtBwB,mBAAmBxB,aACvB,IAGGI,YAAY,EAqCjBc,sBAAwBlB,eAE1B,MAAMC,sBAAwBD,aAAaE,cAAcnB,gBAAgBoB,QAAQF,uBAC3EwB,yBAA2BxB,sBAAsByB,WAAU,GACjE1B,aAAaE,cAAcnB,gBAAgBoB,QAAQC,cAAcuB,aAAaF,yBAA0BxB,uBAExGD,aAAaE,cAAcnB,gBAAgBoB,QAAQQ,qBAAqBiB,UAAUC,OAAO,UACzF7B,aAAaE,cAAcnB,gBAAgB+C,QAAQC,cAAcC,UAAW,EAC5EhC,aAAaE,cAAcnB,gBAAgB+C,QAAQG,gBAAgBD,UAAW,CAAK,EAQjFR,mBAAqBxB,eACvBA,aAAa6B,SAEb,MACMK,cADqBC,SAASjC,cAAcnB,gBAAgBoB,QAAQiC,oBACjCC,iBAAiBtD,gBAAgBoB,QAAQH,cAGlF,GAA6B,IAAzBkC,cAAcI,OAAc,CACCH,SAASjC,cAAcnB,gBAAgBoB,QAAQoC,sBACvDX,UAAUC,OAAO,SAC1C,KAAO,CACH,MAAMW,2BAA6BN,cAAc,GAAGhC,cAAc,uBAClEsC,kCAAAA,2BAA4BX,QAChC,GAGJ,IAAIY,aAAc,EAwDhBjE,SAAAE,KAhDkBA,CAACgE,GAAIC,cACrB,EAAAC,UAAeA,iBAAC,qBAAsB,CAClC,gBACA,kBACA,gBACA,iBACA,2BAGJ,EAAAA,2BAAgB,OAAQ,CACpB,WAGJ/C,SAAW6C,GACX5C,UAAY6C,UAERF,cAKJN,SAAS7B,iBAAiB,SAASuC,QAG/B,MAAMC,YAAcD,MAAME,OAAOC,QAAQjE,gBAAgB+C,QAAQgB,aAC7DA,cACAD,MAAMI,iBAlMMC,EAACC,UAAWC,SAChC,MAAMC,eAAiB,IAAIC,SAAOjF,QAAC,mCAE7B+D,mBAAqBD,SAASjC,cAAcnB,gBAAgBoB,QAAQiC,oBACpEmB,mBAAqBnB,mBAAmBC,iBAAiBtD,gBAAgBoB,QAAQH,cAAcsC,OAE/FkB,OAAS,CACXC,UAAWN,UACXO,SAAU7D,SACV8D,cAAgBJ,mBAAqB,EACrCH,MAAOA,QAIX,EAAAQ,wBAAa,qBAAsB,gBAAiB9D,UAAW0D,QAC1DnC,MAAK,CAACwC,KAAMC,MACT,MAAM9D,aAAe+D,WAAS1F,QAAC2F,mBAAmB5B,mBAAoByB,KAAMC,IAAI,GAC1EvB,qBAAuBH,mBAAmBlC,cAAcnB,gBAAgBoB,QAAQoC,sBAEhFnC,aAAeL,qBAAqBC,cAK1C,OAHA,EAAAiE,gCAAgB7D,aAAa8D,eAC7B3B,qBAAqBX,UAAUuC,IAAI,WAE5B,EAAAhD,iBAAU,gBAAiB,qBAAsBiC,MAAM,IAEjE/B,KAAKC,YACLD,MAAK,IAAMgC,eAAee,YAC1BC,MAAMC,cAAAA,QAAaC,UAAU,EAuK1BrB,CAAgBJ,YAAYlC,QAAQ4D,iBAAkB1B,YAAYlC,QAAQ6D,OAI9E,MAAM1C,aAAec,MAAME,OAAOC,QAAQjE,gBAAgB+C,QAAQC,cAClE,GAAIA,aAAc,CACd,MAAM2C,iBAAmB3C,aAAaiB,QAAQjE,gBAAgBoB,QAAQH,cAEtE6C,MAAMI,iBAvKOjD,gBACrB,MAAMqD,eAAiB,IAAIC,SAAOjF,QAAC,oCAGd0B,qBAAqBC,cAC7B2E,KAAK,CAACjC,GAAI1C,aAAaY,QAAQC,aACvCQ,MAAK,KACF,MAAMpB,sBAAwBD,aAAaE,cAAcnB,gBAAgBoB,QAAQF,uBAC3EU,oBAAsBX,aAAaE,cAAcnB,gBAAgBoB,QAAQQ,qBACzEoB,aAAe/B,aAAaE,cAAcnB,gBAAgB+C,QAAQC,cAMxE,OAJA9B,sBAAsB2B,UAAUC,OAAO,UACvClB,oBAAoBiB,UAAUuC,IAAI,UAClCpC,aAAaC,UAAW,EAEjBqB,eAAee,SAAS,IAElCC,MAAMC,cAAYjG,QAACkG,UAAU,EAuJ1BK,CAAiBF,iBACrB,CAGA,MAAMzC,eAAiBY,MAAME,OAAOC,QAAQjE,gBAAgB+C,QAAQG,gBAChEA,iBACAY,MAAMI,iBA/GShB,kBACvB,MAAMjC,aAAeiC,eAAee,QAAQjE,gBAAgBoB,QAAQH,cAC9D6E,cAAgB7E,aAAaY,QAAQwC,MAE3CkB,cAAAA,QAAaQ,mBACT,EAAA3D,KAASC,YAAC,iBAAkB,qBAAsByD,gBAClD,EAAA1D,KAAAA,YAAU,wBAAyB,qBAAsB0D,gBACzD,EAAA1D,KAAAA,YAAU,SAAU,QACpB,CAAC4D,eAAgB9C,iBACnBZ,MAAK,KACH,MAAMgC,eAAiB,IAAIC,SAAOjF,QAAC,sCAEnC,OAAO,EAAA2G,WAAAA,gBAAenF,SAAUG,aAAaY,QAAQC,YAChDQ,MAAK,KAAM,EAAAC,OAAQ6C,MAAC,EAAAhD,KAAAA,YAAU,kBAAmB,qBAAsB0D,kBACvExD,MAAK,KACFG,mBAAmBxB,cACZqD,eAAee,aAEzBC,MAAMC,cAAYjG,QAACkG,UAAU,IACnCF,OAAM,KACL,GACF,EA2FMY,CAAmBhD,gBACvB,IAGJQ,aAAc,EAAI,CACpB"}